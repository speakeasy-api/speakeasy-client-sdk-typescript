/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SpeakeasyCore } from "../core.js";
import { encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../sdk/models/errors/httpclienterrors.js";
import { SDKError } from "../sdk/models/errors/sdkerror.js";
import { SDKValidationError } from "../sdk/models/errors/sdkvalidationerror.js";
import * as operations from "../sdk/models/operations/index.js";
import { Result } from "../sdk/types/fp.js";

export enum GenerateRequestPostmanCollectionAcceptEnum {
  applicationJson = "application/json",
  applicationOctetStream = "application/octet-stream",
}

/**
 * Generate a Postman collection for a particular request.
 *
 * @remarks
 * Generates a Postman collection for a particular request.
 * Allowing it to be replayed with the same inputs that were captured by the SDK.
 */
export async function requestsGenerateRequestPostmanCollection(
  client: SpeakeasyCore,
  request: operations.GenerateRequestPostmanCollectionRequest,
  options?: RequestOptions & {
    acceptHeaderOverride?: GenerateRequestPostmanCollectionAcceptEnum;
  },
): Promise<
  Result<
    operations.GenerateRequestPostmanCollectionResponse,
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations.GenerateRequestPostmanCollectionRequest$outboundSchema.parse(
        value,
      ),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return parsed;
  }
  const payload = parsed.value;
  const body = null;

  const pathParams = {
    requestID: encodeSimple("requestID", payload.requestID, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/v1/eventlog/{requestID}/generate/postman")(
    pathParams,
  );

  const headers = new Headers({
    Accept: options?.acceptHeaderOverride
      || "application/json;q=1, application/octet-stream;q=0",
  });

  const securityInput = await extractSecurity(client._options.security);
  const context = {
    operationID: "generateRequestPostmanCollection",
    oAuth2Scopes: [],
    securitySource: client._options.security,
  };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "GET",
    path: path,
    headers: headers,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return requestRes;
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: [],
    retryConfig: options?.retries
      || client._options.retryConfig,
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  });
  if (!doResult.ok) {
    return doResult;
  }
  const response = doResult.value;

  const [result] = await M.match<
    operations.GenerateRequestPostmanCollectionResponse,
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.stream(
      "2XX",
      operations.GenerateRequestPostmanCollectionResponse$inboundSchema,
    ),
    M.json(
      "4XX",
      operations.GenerateRequestPostmanCollectionResponse$inboundSchema,
    ),
  )(response);
  if (!result.ok) {
    return result;
  }

  return result;
}
