/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { workspacesGetFeatureFlags } from "../funcs/workspacesGetFeatureFlags.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { unwrapAsync } from "../sdk/types/fp.js";
import { useSpeakeasyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type WorkspacesGetFeatureFlagsQueryData =
  shared.WorkspaceFeatureFlagResponse;

/**
 * Get workspace feature flags
 */
export function useWorkspacesGetFeatureFlags(
  request: operations.GetWorkspaceFeatureFlagsRequest,
  options?: QueryHookOptions<WorkspacesGetFeatureFlagsQueryData>,
): UseQueryResult<WorkspacesGetFeatureFlagsQueryData, Error> {
  const client = useSpeakeasyContext();
  return useQuery({
    ...buildWorkspacesGetFeatureFlagsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get workspace feature flags
 */
export function useWorkspacesGetFeatureFlagsSuspense(
  request: operations.GetWorkspaceFeatureFlagsRequest,
  options?: SuspenseQueryHookOptions<WorkspacesGetFeatureFlagsQueryData>,
): UseSuspenseQueryResult<WorkspacesGetFeatureFlagsQueryData, Error> {
  const client = useSpeakeasyContext();
  return useSuspenseQuery({
    ...buildWorkspacesGetFeatureFlagsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchWorkspacesGetFeatureFlags(
  queryClient: QueryClient,
  client$: SpeakeasyCore,
  request: operations.GetWorkspaceFeatureFlagsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildWorkspacesGetFeatureFlagsQuery(
      client$,
      request,
    ),
  });
}

export function setWorkspacesGetFeatureFlagsData(
  client: QueryClient,
  queryKeyBase: [workspaceId: string | undefined],
  data: WorkspacesGetFeatureFlagsQueryData,
): WorkspacesGetFeatureFlagsQueryData | undefined {
  const key = queryKeyWorkspacesGetFeatureFlags(...queryKeyBase);

  return client.setQueryData<WorkspacesGetFeatureFlagsQueryData>(key, data);
}

export function invalidateWorkspacesGetFeatureFlags(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[workspaceId: string | undefined]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/speakeasy-client-sdk-typescript",
      "Workspaces",
      "getFeatureFlags",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllWorkspacesGetFeatureFlags(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/speakeasy-client-sdk-typescript",
      "Workspaces",
      "getFeatureFlags",
    ],
  });
}

export function buildWorkspacesGetFeatureFlagsQuery(
  client$: SpeakeasyCore,
  request: operations.GetWorkspaceFeatureFlagsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<WorkspacesGetFeatureFlagsQueryData>;
} {
  return {
    queryKey: queryKeyWorkspacesGetFeatureFlags(request.workspaceId),
    queryFn: async function workspacesGetFeatureFlagsQueryFn(
      ctx,
    ): Promise<WorkspacesGetFeatureFlagsQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(workspacesGetFeatureFlags(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyWorkspacesGetFeatureFlags(
  workspaceId: string | undefined,
): QueryKey {
  return [
    "@speakeasy-api/speakeasy-client-sdk-typescript",
    "Workspaces",
    "getFeatureFlags",
    workspaceId,
  ];
}
