/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { authGetAccess } from "../funcs/authGetAccess.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { unwrapAsync } from "../sdk/types/fp.js";
import { useSpeakeasyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type AuthGetAccessQueryData = shared.AccessDetails;

/**
 * Get access allowances for a particular workspace
 *
 * @remarks
 * Checks if generation is permitted for a particular run of the CLI
 */
export function useAuthGetAccess(
  request: operations.GetWorkspaceAccessRequest,
  options?: QueryHookOptions<AuthGetAccessQueryData>,
): UseQueryResult<AuthGetAccessQueryData, Error> {
  const client = useSpeakeasyContext();
  return useQuery({
    ...buildAuthGetAccessQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get access allowances for a particular workspace
 *
 * @remarks
 * Checks if generation is permitted for a particular run of the CLI
 */
export function useAuthGetAccessSuspense(
  request: operations.GetWorkspaceAccessRequest,
  options?: SuspenseQueryHookOptions<AuthGetAccessQueryData>,
): UseSuspenseQueryResult<AuthGetAccessQueryData, Error> {
  const client = useSpeakeasyContext();
  return useSuspenseQuery({
    ...buildAuthGetAccessQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchAuthGetAccess(
  queryClient: QueryClient,
  client$: SpeakeasyCore,
  request: operations.GetWorkspaceAccessRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildAuthGetAccessQuery(
      client$,
      request,
    ),
  });
}

export function setAuthGetAccessData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      genLockId?: string | undefined;
      targetType?: string | undefined;
      passive?: boolean | undefined;
    },
  ],
  data: AuthGetAccessQueryData,
): AuthGetAccessQueryData | undefined {
  const key = queryKeyAuthGetAccess(...queryKeyBase);

  return client.setQueryData<AuthGetAccessQueryData>(key, data);
}

export function invalidateAuthGetAccess(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      genLockId?: string | undefined;
      targetType?: string | undefined;
      passive?: boolean | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/speakeasy-client-sdk-typescript",
      "Auth",
      "getAccess",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllAuthGetAccess(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/speakeasy-client-sdk-typescript",
      "Auth",
      "getAccess",
    ],
  });
}

export function buildAuthGetAccessQuery(
  client$: SpeakeasyCore,
  request: operations.GetWorkspaceAccessRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<AuthGetAccessQueryData>;
} {
  return {
    queryKey: queryKeyAuthGetAccess({
      genLockId: request.genLockId,
      targetType: request.targetType,
      passive: request.passive,
    }),
    queryFn: async function authGetAccessQueryFn(
      ctx,
    ): Promise<AuthGetAccessQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(authGetAccess(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyAuthGetAccess(
  parameters: {
    genLockId?: string | undefined;
    targetType?: string | undefined;
    passive?: boolean | undefined;
  },
): QueryKey {
  return [
    "@speakeasy-api/speakeasy-client-sdk-typescript",
    "Auth",
    "getAccess",
    parameters,
  ];
}
