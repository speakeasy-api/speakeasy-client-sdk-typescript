/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { organizationsGetAll } from "../funcs/organizationsGetAll.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as shared from "../sdk/models/shared/index.js";
import { unwrapAsync } from "../sdk/types/fp.js";
import { useSpeakeasyContext } from "./_context.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";

export type OrganizationsGetAllQueryData = Array<shared.Organization>;

/**
 * Get organizations for a user
 *
 * @remarks
 * Returns a list of organizations a user has access too
 */
export function useOrganizationsGetAll(
  options?: QueryHookOptions<OrganizationsGetAllQueryData>,
): UseQueryResult<OrganizationsGetAllQueryData, Error> {
  const client = useSpeakeasyContext();
  return useQuery({
    ...buildOrganizationsGetAllQuery(
      client,
      options,
    ),
    ...options,
  });
}

/**
 * Get organizations for a user
 *
 * @remarks
 * Returns a list of organizations a user has access too
 */
export function useOrganizationsGetAllSuspense(
  options?: SuspenseQueryHookOptions<OrganizationsGetAllQueryData>,
): UseSuspenseQueryResult<OrganizationsGetAllQueryData, Error> {
  const client = useSpeakeasyContext();
  return useSuspenseQuery({
    ...buildOrganizationsGetAllQuery(
      client,
      options,
    ),
    ...options,
  });
}

export function prefetchOrganizationsGetAll(
  queryClient: QueryClient,
  client$: SpeakeasyCore,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildOrganizationsGetAllQuery(
      client$,
    ),
  });
}

export function setOrganizationsGetAllData(
  client: QueryClient,
  data: OrganizationsGetAllQueryData,
): OrganizationsGetAllQueryData | undefined {
  const key = queryKeyOrganizationsGetAll();

  return client.setQueryData<OrganizationsGetAllQueryData>(key, data);
}

export function invalidateAllOrganizationsGetAll(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/speakeasy-client-sdk-typescript",
      "Organizations",
      "getAll",
    ],
  });
}

export function buildOrganizationsGetAllQuery(
  client$: SpeakeasyCore,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<OrganizationsGetAllQueryData>;
} {
  return {
    queryKey: queryKeyOrganizationsGetAll(),
    queryFn: async function organizationsGetAllQueryFn(
      ctx,
    ): Promise<OrganizationsGetAllQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(organizationsGetAll(
        client$,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyOrganizationsGetAll(): QueryKey {
  return [
    "@speakeasy-api/speakeasy-client-sdk-typescript",
    "Organizations",
    "getAll",
  ];
}
