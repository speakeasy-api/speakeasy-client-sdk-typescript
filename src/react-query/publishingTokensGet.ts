/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { publishingTokensGet } from "../funcs/publishingTokensGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { unwrapAsync } from "../sdk/types/fp.js";
import { useSpeakeasyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type PublishingTokensGetQueryData = shared.PublishingToken;

/**
 * Get a specific publishing token
 *
 * @remarks
 * Get information about a particular publishing token.
 */
export function usePublishingTokensGet(
  request: operations.GetPublishingTokenByIDRequest,
  options?: QueryHookOptions<PublishingTokensGetQueryData>,
): UseQueryResult<PublishingTokensGetQueryData, Error> {
  const client = useSpeakeasyContext();
  return useQuery({
    ...buildPublishingTokensGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get a specific publishing token
 *
 * @remarks
 * Get information about a particular publishing token.
 */
export function usePublishingTokensGetSuspense(
  request: operations.GetPublishingTokenByIDRequest,
  options?: SuspenseQueryHookOptions<PublishingTokensGetQueryData>,
): UseSuspenseQueryResult<PublishingTokensGetQueryData, Error> {
  const client = useSpeakeasyContext();
  return useSuspenseQuery({
    ...buildPublishingTokensGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchPublishingTokensGet(
  queryClient: QueryClient,
  client$: SpeakeasyCore,
  request: operations.GetPublishingTokenByIDRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildPublishingTokensGetQuery(
      client$,
      request,
    ),
  });
}

export function setPublishingTokensGetData(
  client: QueryClient,
  queryKeyBase: [tokenID: string],
  data: PublishingTokensGetQueryData,
): PublishingTokensGetQueryData | undefined {
  const key = queryKeyPublishingTokensGet(...queryKeyBase);

  return client.setQueryData<PublishingTokensGetQueryData>(key, data);
}

export function invalidatePublishingTokensGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[tokenID: string]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/speakeasy-client-sdk-typescript",
      "PublishingTokens",
      "get",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllPublishingTokensGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/speakeasy-client-sdk-typescript",
      "PublishingTokens",
      "get",
    ],
  });
}

export function buildPublishingTokensGetQuery(
  client$: SpeakeasyCore,
  request: operations.GetPublishingTokenByIDRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<PublishingTokensGetQueryData>;
} {
  return {
    queryKey: queryKeyPublishingTokensGet(request.tokenID),
    queryFn: async function publishingTokensGetQueryFn(
      ctx,
    ): Promise<PublishingTokensGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(publishingTokensGet(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyPublishingTokensGet(tokenID: string): QueryKey {
  return [
    "@speakeasy-api/speakeasy-client-sdk-typescript",
    "PublishingTokens",
    "get",
    tokenID,
  ];
}
