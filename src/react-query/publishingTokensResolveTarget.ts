/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { publishingTokensResolveTarget } from "../funcs/publishingTokensResolveTarget.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import { unwrapAsync } from "../sdk/types/fp.js";
import { useSpeakeasyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type PublishingTokensResolveTargetQueryData =
  operations.GetPublishingTokenTargetByIDResponseBody;

/**
 * Get a specific publishing token target
 *
 * @remarks
 * Get information about a particular publishing token target.
 */
export function usePublishingTokensResolveTarget(
  request: operations.GetPublishingTokenTargetByIDRequest,
  options?: QueryHookOptions<PublishingTokensResolveTargetQueryData>,
): UseQueryResult<PublishingTokensResolveTargetQueryData, Error> {
  const client = useSpeakeasyContext();
  return useQuery({
    ...buildPublishingTokensResolveTargetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get a specific publishing token target
 *
 * @remarks
 * Get information about a particular publishing token target.
 */
export function usePublishingTokensResolveTargetSuspense(
  request: operations.GetPublishingTokenTargetByIDRequest,
  options?: SuspenseQueryHookOptions<PublishingTokensResolveTargetQueryData>,
): UseSuspenseQueryResult<PublishingTokensResolveTargetQueryData, Error> {
  const client = useSpeakeasyContext();
  return useSuspenseQuery({
    ...buildPublishingTokensResolveTargetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchPublishingTokensResolveTarget(
  queryClient: QueryClient,
  client$: SpeakeasyCore,
  request: operations.GetPublishingTokenTargetByIDRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildPublishingTokensResolveTargetQuery(
      client$,
      request,
    ),
  });
}

export function setPublishingTokensResolveTargetData(
  client: QueryClient,
  queryKeyBase: [tokenID: string],
  data: PublishingTokensResolveTargetQueryData,
): PublishingTokensResolveTargetQueryData | undefined {
  const key = queryKeyPublishingTokensResolveTarget(...queryKeyBase);

  return client.setQueryData<PublishingTokensResolveTargetQueryData>(key, data);
}

export function invalidatePublishingTokensResolveTarget(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[tokenID: string]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/speakeasy-client-sdk-typescript",
      "PublishingTokens",
      "resolveTarget",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllPublishingTokensResolveTarget(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/speakeasy-client-sdk-typescript",
      "PublishingTokens",
      "resolveTarget",
    ],
  });
}

export function buildPublishingTokensResolveTargetQuery(
  client$: SpeakeasyCore,
  request: operations.GetPublishingTokenTargetByIDRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<PublishingTokensResolveTargetQueryData>;
} {
  return {
    queryKey: queryKeyPublishingTokensResolveTarget(request.tokenID),
    queryFn: async function publishingTokensResolveTargetQueryFn(
      ctx,
    ): Promise<PublishingTokensResolveTargetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(publishingTokensResolveTarget(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyPublishingTokensResolveTarget(
  tokenID: string,
): QueryKey {
  return [
    "@speakeasy-api/speakeasy-client-sdk-typescript",
    "PublishingTokens",
    "resolveTarget",
    tokenID,
  ];
}
