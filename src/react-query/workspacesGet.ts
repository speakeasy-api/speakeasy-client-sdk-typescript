/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { workspacesGet } from "../funcs/workspacesGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as shared from "../sdk/models/shared/index.js";
import { unwrapAsync } from "../sdk/types/fp.js";
import { useSpeakeasyContext } from "./_context.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";

export type WorkspacesGetQueryData = shared.WorkspaceAndOrganization;

/**
 * Get workspace by context
 *
 * @remarks
 * Get information about a particular workspace by context.
 */
export function useWorkspacesGet(
  options?: QueryHookOptions<WorkspacesGetQueryData>,
): UseQueryResult<WorkspacesGetQueryData, Error> {
  const client = useSpeakeasyContext();
  return useQuery({
    ...buildWorkspacesGetQuery(
      client,
      options,
    ),
    ...options,
  });
}

/**
 * Get workspace by context
 *
 * @remarks
 * Get information about a particular workspace by context.
 */
export function useWorkspacesGetSuspense(
  options?: SuspenseQueryHookOptions<WorkspacesGetQueryData>,
): UseSuspenseQueryResult<WorkspacesGetQueryData, Error> {
  const client = useSpeakeasyContext();
  return useSuspenseQuery({
    ...buildWorkspacesGetQuery(
      client,
      options,
    ),
    ...options,
  });
}

export function prefetchWorkspacesGet(
  queryClient: QueryClient,
  client$: SpeakeasyCore,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildWorkspacesGetQuery(
      client$,
    ),
  });
}

export function setWorkspacesGetData(
  client: QueryClient,
  data: WorkspacesGetQueryData,
): WorkspacesGetQueryData | undefined {
  const key = queryKeyWorkspacesGet();

  return client.setQueryData<WorkspacesGetQueryData>(key, data);
}

export function invalidateAllWorkspacesGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/speakeasy-client-sdk-typescript",
      "Workspaces",
      "get",
    ],
  });
}

export function buildWorkspacesGetQuery(
  client$: SpeakeasyCore,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<WorkspacesGetQueryData>;
} {
  return {
    queryKey: queryKeyWorkspacesGet(),
    queryFn: async function workspacesGetQueryFn(
      ctx,
    ): Promise<WorkspacesGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(workspacesGet(
        client$,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyWorkspacesGet(): QueryKey {
  return [
    "@speakeasy-api/speakeasy-client-sdk-typescript",
    "Workspaces",
    "get",
  ];
}
