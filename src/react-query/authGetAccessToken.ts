/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { authGetAccessToken } from "../funcs/authGetAccessToken.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { unwrapAsync } from "../sdk/types/fp.js";
import { useSpeakeasyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type AuthGetAccessTokenQueryData = shared.AccessToken;

/**
 * Get or refresh an access token for the current workspace.
 */
export function useAuthGetAccessToken(
  request: operations.GetAccessTokenRequest,
  options?: QueryHookOptions<AuthGetAccessTokenQueryData>,
): UseQueryResult<AuthGetAccessTokenQueryData, Error> {
  const client = useSpeakeasyContext();
  return useQuery({
    ...buildAuthGetAccessTokenQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get or refresh an access token for the current workspace.
 */
export function useAuthGetAccessTokenSuspense(
  request: operations.GetAccessTokenRequest,
  options?: SuspenseQueryHookOptions<AuthGetAccessTokenQueryData>,
): UseSuspenseQueryResult<AuthGetAccessTokenQueryData, Error> {
  const client = useSpeakeasyContext();
  return useSuspenseQuery({
    ...buildAuthGetAccessTokenQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchAuthGetAccessToken(
  queryClient: QueryClient,
  client$: SpeakeasyCore,
  request: operations.GetAccessTokenRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildAuthGetAccessTokenQuery(
      client$,
      request,
    ),
  });
}

export function setAuthGetAccessTokenData(
  client: QueryClient,
  queryKeyBase: [parameters: { workspaceId: string }],
  data: AuthGetAccessTokenQueryData,
): AuthGetAccessTokenQueryData | undefined {
  const key = queryKeyAuthGetAccessToken(...queryKeyBase);

  return client.setQueryData<AuthGetAccessTokenQueryData>(key, data);
}

export function invalidateAuthGetAccessToken(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { workspaceId: string }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/speakeasy-client-sdk-typescript",
      "Auth",
      "getAccessToken",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllAuthGetAccessToken(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/speakeasy-client-sdk-typescript",
      "Auth",
      "getAccessToken",
    ],
  });
}

export function buildAuthGetAccessTokenQuery(
  client$: SpeakeasyCore,
  request: operations.GetAccessTokenRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<AuthGetAccessTokenQueryData>;
} {
  return {
    queryKey: queryKeyAuthGetAccessToken({ workspaceId: request.workspaceId }),
    queryFn: async function authGetAccessTokenQueryFn(
      ctx,
    ): Promise<AuthGetAccessTokenQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(authGetAccessToken(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyAuthGetAccessToken(
  parameters: { workspaceId: string },
): QueryKey {
  return [
    "@speakeasy-api/speakeasy-client-sdk-typescript",
    "Auth",
    "getAccessToken",
    parameters,
  ];
}
