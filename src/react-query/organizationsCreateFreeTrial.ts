/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { organizationsCreateFreeTrial } from "../funcs/organizationsCreateFreeTrial.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { unwrapAsync } from "../sdk/types/fp.js";
import { useSpeakeasyContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type OrganizationsCreateFreeTrialMutationVariables = {
  options?: RequestOptions;
};

export type OrganizationsCreateFreeTrialMutationData = void;

/**
 * Create a free trial for an organization
 *
 * @remarks
 * Creates a free trial for an organization
 */
export function useOrganizationsCreateFreeTrialMutation(
  options?: MutationHookOptions<
    OrganizationsCreateFreeTrialMutationData,
    Error,
    OrganizationsCreateFreeTrialMutationVariables
  >,
): UseMutationResult<
  OrganizationsCreateFreeTrialMutationData,
  Error,
  OrganizationsCreateFreeTrialMutationVariables
> {
  const client = useSpeakeasyContext();
  return useMutation({
    ...buildOrganizationsCreateFreeTrialMutation(client, options),
    ...options,
  });
}

export function mutationKeyOrganizationsCreateFreeTrial(): MutationKey {
  return [
    "@speakeasy-api/speakeasy-client-sdk-typescript",
    "Organizations",
    "createFreeTrial",
  ];
}

export function buildOrganizationsCreateFreeTrialMutation(
  client$: SpeakeasyCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: OrganizationsCreateFreeTrialMutationVariables,
  ) => Promise<OrganizationsCreateFreeTrialMutationData>;
} {
  return {
    mutationKey: mutationKeyOrganizationsCreateFreeTrial(),
    mutationFn: function organizationsCreateFreeTrialMutationFn({
      options,
    }): Promise<OrganizationsCreateFreeTrialMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(organizationsCreateFreeTrial(
        client$,
        mergedOptions,
      ));
    },
  };
}
