/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { workspacesUpdate } from "../funcs/workspacesUpdate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import { unwrapAsync } from "../sdk/types/fp.js";
import { useSpeakeasyContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type WorkspacesUpdateMutationVariables = {
  request: operations.UpdateWorkspaceDetailsRequest;
  options?: RequestOptions;
};

export type WorkspacesUpdateMutationData = void;

/**
 * Update workspace details
 *
 * @remarks
 * Update information about a particular workspace.
 */
export function useWorkspacesUpdateMutation(
  options?: MutationHookOptions<
    WorkspacesUpdateMutationData,
    Error,
    WorkspacesUpdateMutationVariables
  >,
): UseMutationResult<
  WorkspacesUpdateMutationData,
  Error,
  WorkspacesUpdateMutationVariables
> {
  const client = useSpeakeasyContext();
  return useMutation({
    ...buildWorkspacesUpdateMutation(client, options),
    ...options,
  });
}

export function mutationKeyWorkspacesUpdate(): MutationKey {
  return [
    "@speakeasy-api/speakeasy-client-sdk-typescript",
    "Workspaces",
    "update",
  ];
}

export function buildWorkspacesUpdateMutation(
  client$: SpeakeasyCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: WorkspacesUpdateMutationVariables,
  ) => Promise<WorkspacesUpdateMutationData>;
} {
  return {
    mutationKey: mutationKeyWorkspacesUpdate(),
    mutationFn: function workspacesUpdateMutationFn({
      request,
      options,
    }): Promise<WorkspacesUpdateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(workspacesUpdate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
