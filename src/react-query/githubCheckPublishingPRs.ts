/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { githubCheckPublishingPRs } from "../funcs/githubCheckPublishingPRs.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { unwrapAsync } from "../sdk/types/fp.js";
import { useSpeakeasyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type GithubCheckPublishingPRsQueryData =
  shared.GithubPublishingPRResponse;

export function useGithubCheckPublishingPRs(
  request: operations.GithubCheckPublishingPRsRequest,
  options?: QueryHookOptions<GithubCheckPublishingPRsQueryData>,
): UseQueryResult<GithubCheckPublishingPRsQueryData, Error> {
  const client = useSpeakeasyContext();
  return useQuery({
    ...buildGithubCheckPublishingPRsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function useGithubCheckPublishingPRsSuspense(
  request: operations.GithubCheckPublishingPRsRequest,
  options?: SuspenseQueryHookOptions<GithubCheckPublishingPRsQueryData>,
): UseSuspenseQueryResult<GithubCheckPublishingPRsQueryData, Error> {
  const client = useSpeakeasyContext();
  return useSuspenseQuery({
    ...buildGithubCheckPublishingPRsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchGithubCheckPublishingPRs(
  queryClient: QueryClient,
  client$: SpeakeasyCore,
  request: operations.GithubCheckPublishingPRsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildGithubCheckPublishingPRsQuery(
      client$,
      request,
    ),
  });
}

export function setGithubCheckPublishingPRsData(
  client: QueryClient,
  queryKeyBase: [
    parameters: { generateGenLockId: string; org: string; repo: string },
  ],
  data: GithubCheckPublishingPRsQueryData,
): GithubCheckPublishingPRsQueryData | undefined {
  const key = queryKeyGithubCheckPublishingPRs(...queryKeyBase);

  return client.setQueryData<GithubCheckPublishingPRsQueryData>(key, data);
}

export function invalidateGithubCheckPublishingPRs(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: { generateGenLockId: string; org: string; repo: string }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/speakeasy-client-sdk-typescript",
      "Github",
      "checkPublishingPRs",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllGithubCheckPublishingPRs(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/speakeasy-client-sdk-typescript",
      "Github",
      "checkPublishingPRs",
    ],
  });
}

export function buildGithubCheckPublishingPRsQuery(
  client$: SpeakeasyCore,
  request: operations.GithubCheckPublishingPRsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<GithubCheckPublishingPRsQueryData>;
} {
  return {
    queryKey: queryKeyGithubCheckPublishingPRs({
      generateGenLockId: request.generateGenLockId,
      org: request.org,
      repo: request.repo,
    }),
    queryFn: async function githubCheckPublishingPRsQueryFn(
      ctx,
    ): Promise<GithubCheckPublishingPRsQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(githubCheckPublishingPRs(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyGithubCheckPublishingPRs(
  parameters: { generateGenLockId: string; org: string; repo: string },
): QueryKey {
  return [
    "@speakeasy-api/speakeasy-client-sdk-typescript",
    "Github",
    "checkPublishingPRs",
    parameters,
  ];
}
