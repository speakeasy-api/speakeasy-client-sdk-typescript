/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { reportsGetLintingReportSignedUrl } from "../funcs/reportsGetLintingReportSignedUrl.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import { unwrapAsync } from "../sdk/types/fp.js";
import { useSpeakeasyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ReportsGetLintingReportSignedUrlQueryData =
  operations.GetLintingReportSignedUrlSignedAccess;

/**
 * Get the signed access url for the linting reports for a particular document.
 */
export function useReportsGetLintingReportSignedUrl(
  request: operations.GetLintingReportSignedUrlRequest,
  options?: QueryHookOptions<ReportsGetLintingReportSignedUrlQueryData>,
): UseQueryResult<ReportsGetLintingReportSignedUrlQueryData, Error> {
  const client = useSpeakeasyContext();
  return useQuery({
    ...buildReportsGetLintingReportSignedUrlQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get the signed access url for the linting reports for a particular document.
 */
export function useReportsGetLintingReportSignedUrlSuspense(
  request: operations.GetLintingReportSignedUrlRequest,
  options?: SuspenseQueryHookOptions<ReportsGetLintingReportSignedUrlQueryData>,
): UseSuspenseQueryResult<ReportsGetLintingReportSignedUrlQueryData, Error> {
  const client = useSpeakeasyContext();
  return useSuspenseQuery({
    ...buildReportsGetLintingReportSignedUrlQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchReportsGetLintingReportSignedUrl(
  queryClient: QueryClient,
  client$: SpeakeasyCore,
  request: operations.GetLintingReportSignedUrlRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildReportsGetLintingReportSignedUrlQuery(
      client$,
      request,
    ),
  });
}

export function setReportsGetLintingReportSignedUrlData(
  client: QueryClient,
  queryKeyBase: [documentChecksum: string],
  data: ReportsGetLintingReportSignedUrlQueryData,
): ReportsGetLintingReportSignedUrlQueryData | undefined {
  const key = queryKeyReportsGetLintingReportSignedUrl(...queryKeyBase);

  return client.setQueryData<ReportsGetLintingReportSignedUrlQueryData>(
    key,
    data,
  );
}

export function invalidateReportsGetLintingReportSignedUrl(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[documentChecksum: string]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/speakeasy-client-sdk-typescript",
      "Reports",
      "getLintingReportSignedUrl",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllReportsGetLintingReportSignedUrl(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/speakeasy-client-sdk-typescript",
      "Reports",
      "getLintingReportSignedUrl",
    ],
  });
}

export function buildReportsGetLintingReportSignedUrlQuery(
  client$: SpeakeasyCore,
  request: operations.GetLintingReportSignedUrlRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ReportsGetLintingReportSignedUrlQueryData>;
} {
  return {
    queryKey: queryKeyReportsGetLintingReportSignedUrl(
      request.documentChecksum,
    ),
    queryFn: async function reportsGetLintingReportSignedUrlQueryFn(
      ctx,
    ): Promise<ReportsGetLintingReportSignedUrlQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(reportsGetLintingReportSignedUrl(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyReportsGetLintingReportSignedUrl(
  documentChecksum: string,
): QueryKey {
  return [
    "@speakeasy-api/speakeasy-client-sdk-typescript",
    "Reports",
    "getLintingReportSignedUrl",
    documentChecksum,
  ];
}
