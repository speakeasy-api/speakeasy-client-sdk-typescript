/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { organizationsGetUsage } from "../funcs/organizationsGetUsage.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as shared from "../sdk/models/shared/index.js";
import { unwrapAsync } from "../sdk/types/fp.js";
import { useSpeakeasyContext } from "./_context.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";

export type OrganizationsGetUsageQueryData = shared.OrganizationUsageResponse;

/**
 * Get billing usage summary for a particular organization
 *
 * @remarks
 * Returns a billing usage summary by target languages for a particular organization
 */
export function useOrganizationsGetUsage(
  options?: QueryHookOptions<OrganizationsGetUsageQueryData>,
): UseQueryResult<OrganizationsGetUsageQueryData, Error> {
  const client = useSpeakeasyContext();
  return useQuery({
    ...buildOrganizationsGetUsageQuery(
      client,
      options,
    ),
    ...options,
  });
}

/**
 * Get billing usage summary for a particular organization
 *
 * @remarks
 * Returns a billing usage summary by target languages for a particular organization
 */
export function useOrganizationsGetUsageSuspense(
  options?: SuspenseQueryHookOptions<OrganizationsGetUsageQueryData>,
): UseSuspenseQueryResult<OrganizationsGetUsageQueryData, Error> {
  const client = useSpeakeasyContext();
  return useSuspenseQuery({
    ...buildOrganizationsGetUsageQuery(
      client,
      options,
    ),
    ...options,
  });
}

export function prefetchOrganizationsGetUsage(
  queryClient: QueryClient,
  client$: SpeakeasyCore,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildOrganizationsGetUsageQuery(
      client$,
    ),
  });
}

export function setOrganizationsGetUsageData(
  client: QueryClient,
  data: OrganizationsGetUsageQueryData,
): OrganizationsGetUsageQueryData | undefined {
  const key = queryKeyOrganizationsGetUsage();

  return client.setQueryData<OrganizationsGetUsageQueryData>(key, data);
}

export function invalidateAllOrganizationsGetUsage(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/speakeasy-client-sdk-typescript",
      "Organizations",
      "getUsage",
    ],
  });
}

export function buildOrganizationsGetUsageQuery(
  client$: SpeakeasyCore,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<OrganizationsGetUsageQueryData>;
} {
  return {
    queryKey: queryKeyOrganizationsGetUsage(),
    queryFn: async function organizationsGetUsageQueryFn(
      ctx,
    ): Promise<OrganizationsGetUsageQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(organizationsGetUsage(
        client$,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyOrganizationsGetUsage(): QueryKey {
  return [
    "@speakeasy-api/speakeasy-client-sdk-typescript",
    "Organizations",
    "getUsage",
  ];
}
