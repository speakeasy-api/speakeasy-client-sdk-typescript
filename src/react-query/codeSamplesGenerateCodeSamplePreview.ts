/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { codeSamplesGenerateCodeSamplePreview } from "../funcs/codeSamplesGenerateCodeSamplePreview.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as shared from "../sdk/models/shared/index.js";
import { unwrapAsync } from "../sdk/types/fp.js";
import { useSpeakeasyContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type CodeSamplesGenerateCodeSamplePreviewMutationVariables = {
  request: shared.CodeSampleSchemaInput;
  options?: RequestOptions;
};

export type CodeSamplesGenerateCodeSamplePreviewMutationData =
  shared.UsageSnippets;

/**
 * Generate Code Sample previews from a file and configuration parameters.
 *
 * @remarks
 * This endpoint generates Code Sample previews from a file and configuration parameters.
 */
export function useCodeSamplesGenerateCodeSamplePreviewMutation(
  options?: MutationHookOptions<
    CodeSamplesGenerateCodeSamplePreviewMutationData,
    Error,
    CodeSamplesGenerateCodeSamplePreviewMutationVariables
  >,
): UseMutationResult<
  CodeSamplesGenerateCodeSamplePreviewMutationData,
  Error,
  CodeSamplesGenerateCodeSamplePreviewMutationVariables
> {
  const client = useSpeakeasyContext();
  return useMutation({
    ...buildCodeSamplesGenerateCodeSamplePreviewMutation(client, options),
    ...options,
  });
}

export function mutationKeyCodeSamplesGenerateCodeSamplePreview(): MutationKey {
  return [
    "@speakeasy-api/speakeasy-client-sdk-typescript",
    "CodeSamples",
    "generateCodeSamplePreview",
  ];
}

export function buildCodeSamplesGenerateCodeSamplePreviewMutation(
  client$: SpeakeasyCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: CodeSamplesGenerateCodeSamplePreviewMutationVariables,
  ) => Promise<CodeSamplesGenerateCodeSamplePreviewMutationData>;
} {
  return {
    mutationKey: mutationKeyCodeSamplesGenerateCodeSamplePreview(),
    mutationFn: function codeSamplesGenerateCodeSamplePreviewMutationFn({
      request,
      options,
    }): Promise<CodeSamplesGenerateCodeSamplePreviewMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(codeSamplesGenerateCodeSamplePreview(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
