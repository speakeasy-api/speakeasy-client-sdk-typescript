/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { githubCheckAccess } from "../funcs/githubCheckAccess.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import { unwrapAsync } from "../sdk/types/fp.js";
import { useSpeakeasyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type GithubCheckAccessQueryData = void;

export function useGithubCheckAccess(
  request: operations.CheckGithubAccessRequest,
  options?: QueryHookOptions<GithubCheckAccessQueryData>,
): UseQueryResult<GithubCheckAccessQueryData, Error> {
  const client = useSpeakeasyContext();
  return useQuery({
    ...buildGithubCheckAccessQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function useGithubCheckAccessSuspense(
  request: operations.CheckGithubAccessRequest,
  options?: SuspenseQueryHookOptions<GithubCheckAccessQueryData>,
): UseSuspenseQueryResult<GithubCheckAccessQueryData, Error> {
  const client = useSpeakeasyContext();
  return useSuspenseQuery({
    ...buildGithubCheckAccessQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchGithubCheckAccess(
  queryClient: QueryClient,
  client$: SpeakeasyCore,
  request: operations.CheckGithubAccessRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildGithubCheckAccessQuery(
      client$,
      request,
    ),
  });
}

export function setGithubCheckAccessData(
  client: QueryClient,
  queryKeyBase: [parameters: { org: string; repo: string }],
  data: GithubCheckAccessQueryData,
): GithubCheckAccessQueryData | undefined {
  const key = queryKeyGithubCheckAccess(...queryKeyBase);

  return client.setQueryData<GithubCheckAccessQueryData>(key, data);
}

export function invalidateGithubCheckAccess(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { org: string; repo: string }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/speakeasy-client-sdk-typescript",
      "Github",
      "checkAccess",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllGithubCheckAccess(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/speakeasy-client-sdk-typescript",
      "Github",
      "checkAccess",
    ],
  });
}

export function buildGithubCheckAccessQuery(
  client$: SpeakeasyCore,
  request: operations.CheckGithubAccessRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<GithubCheckAccessQueryData>;
} {
  return {
    queryKey: queryKeyGithubCheckAccess({
      org: request.org,
      repo: request.repo,
    }),
    queryFn: async function githubCheckAccessQueryFn(
      ctx,
    ): Promise<GithubCheckAccessQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(githubCheckAccess(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyGithubCheckAccess(
  parameters: { org: string; repo: string },
): QueryKey {
  return [
    "@speakeasy-api/speakeasy-client-sdk-typescript",
    "Github",
    "checkAccess",
    parameters,
  ];
}
