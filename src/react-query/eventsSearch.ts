/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { SpeakeasyCore } from "../core.js";
import { eventsSearch } from "../funcs/eventsSearch.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../sdk/models/operations/index.js";
import * as shared from "../sdk/models/shared/index.js";
import { unwrapAsync } from "../sdk/types/fp.js";
import { useSpeakeasyContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type EventsSearchQueryData = Array<shared.CliEvent>;

/**
 * Search events for a particular workspace by any field
 */
export function useEventsSearch(
  request: operations.SearchWorkspaceEventsRequest,
  options?: QueryHookOptions<EventsSearchQueryData>,
): UseQueryResult<EventsSearchQueryData, Error> {
  const client = useSpeakeasyContext();
  return useQuery({
    ...buildEventsSearchQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Search events for a particular workspace by any field
 */
export function useEventsSearchSuspense(
  request: operations.SearchWorkspaceEventsRequest,
  options?: SuspenseQueryHookOptions<EventsSearchQueryData>,
): UseSuspenseQueryResult<EventsSearchQueryData, Error> {
  const client = useSpeakeasyContext();
  return useSuspenseQuery({
    ...buildEventsSearchQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchEventsSearch(
  queryClient: QueryClient,
  client$: SpeakeasyCore,
  request: operations.SearchWorkspaceEventsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildEventsSearchQuery(
      client$,
      request,
    ),
  });
}

export function setEventsSearchData(
  client: QueryClient,
  queryKeyBase: [
    workspaceId: string | undefined,
    parameters: {
      sourceRevisionDigest?: string | undefined;
      lintReportDigest?: string | undefined;
      openapiDiffReportDigest?: string | undefined;
      interactionType?: shared.InteractionType | undefined;
      generateGenLockId?: string | undefined;
      executionId?: string | undefined;
      success?: boolean | undefined;
      limit?: number | undefined;
    },
  ],
  data: EventsSearchQueryData,
): EventsSearchQueryData | undefined {
  const key = queryKeyEventsSearch(...queryKeyBase);

  return client.setQueryData<EventsSearchQueryData>(key, data);
}

export function invalidateEventsSearch(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      workspaceId: string | undefined,
      parameters: {
        sourceRevisionDigest?: string | undefined;
        lintReportDigest?: string | undefined;
        openapiDiffReportDigest?: string | undefined;
        interactionType?: shared.InteractionType | undefined;
        generateGenLockId?: string | undefined;
        executionId?: string | undefined;
        success?: boolean | undefined;
        limit?: number | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/speakeasy-client-sdk-typescript",
      "Events",
      "search",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllEventsSearch(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasy-api/speakeasy-client-sdk-typescript",
      "Events",
      "search",
    ],
  });
}

export function buildEventsSearchQuery(
  client$: SpeakeasyCore,
  request: operations.SearchWorkspaceEventsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<EventsSearchQueryData>;
} {
  return {
    queryKey: queryKeyEventsSearch(request.workspaceId, {
      sourceRevisionDigest: request.sourceRevisionDigest,
      lintReportDigest: request.lintReportDigest,
      openapiDiffReportDigest: request.openapiDiffReportDigest,
      interactionType: request.interactionType,
      generateGenLockId: request.generateGenLockId,
      executionId: request.executionId,
      success: request.success,
      limit: request.limit,
    }),
    queryFn: async function eventsSearchQueryFn(
      ctx,
    ): Promise<EventsSearchQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(eventsSearch(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyEventsSearch(
  workspaceId: string | undefined,
  parameters: {
    sourceRevisionDigest?: string | undefined;
    lintReportDigest?: string | undefined;
    openapiDiffReportDigest?: string | undefined;
    interactionType?: shared.InteractionType | undefined;
    generateGenLockId?: string | undefined;
    executionId?: string | undefined;
    success?: boolean | undefined;
    limit?: number | undefined;
  },
): QueryKey {
  return [
    "@speakeasy-api/speakeasy-client-sdk-typescript",
    "Events",
    "search",
    workspaceId,
    parameters,
  ];
}
