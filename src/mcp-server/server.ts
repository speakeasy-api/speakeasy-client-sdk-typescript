/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { SpeakeasyCore } from "../core.js";
import { SDKOptions } from "../lib/config.js";
import type { ConsoleLogger } from "./console-logger.js";
import { createRegisterPrompt } from "./prompts.js";
import {
  createRegisterResource,
  createRegisterResourceTemplate,
} from "./resources.js";
import { MCPScope } from "./scopes.js";
import { createRegisterTool } from "./tools.js";
import { tool$artifactsCreateRemoteSource } from "./tools/artifactsCreateRemoteSource.js";
import { tool$artifactsGetBlob } from "./tools/artifactsGetBlob.js";
import { tool$artifactsGetManifest } from "./tools/artifactsGetManifest.js";
import { tool$artifactsGetNamespaces } from "./tools/artifactsGetNamespaces.js";
import { tool$artifactsGetRevisions } from "./tools/artifactsGetRevisions.js";
import { tool$artifactsGetTags } from "./tools/artifactsGetTags.js";
import { tool$artifactsListRemoteSources } from "./tools/artifactsListRemoteSources.js";
import { tool$artifactsPostTags } from "./tools/artifactsPostTags.js";
import { tool$artifactsPreflight } from "./tools/artifactsPreflight.js";
import { tool$artifactsSetArchived } from "./tools/artifactsSetArchived.js";
import { tool$artifactsSetVisibility } from "./tools/artifactsSetVisibility.js";
import { tool$authGetAccess } from "./tools/authGetAccess.js";
import { tool$authGetAccessToken } from "./tools/authGetAccessToken.js";
import { tool$authGetUser } from "./tools/authGetUser.js";
import { tool$authValidateApiKey } from "./tools/authValidateApiKey.js";
import { tool$codeSamplesGenerateCodeSamplePreview } from "./tools/codeSamplesGenerateCodeSamplePreview.js";
import { tool$codeSamplesGenerateCodeSamplePreviewAsync } from "./tools/codeSamplesGenerateCodeSamplePreviewAsync.js";
import { tool$codeSamplesGet } from "./tools/codeSamplesGet.js";
import { tool$codeSamplesGetCodeSamplePreviewAsync } from "./tools/codeSamplesGetCodeSamplePreviewAsync.js";
import { tool$eventsGetEventsByTarget } from "./tools/eventsGetEventsByTarget.js";
import { tool$eventsGetTargets } from "./tools/eventsGetTargets.js";
import { tool$eventsGetTargetsDeprecated } from "./tools/eventsGetTargetsDeprecated.js";
import { tool$eventsPost } from "./tools/eventsPost.js";
import { tool$eventsSearch } from "./tools/eventsSearch.js";
import { tool$githubCheckAccess } from "./tools/githubCheckAccess.js";
import { tool$githubCheckPublishingPRs } from "./tools/githubCheckPublishingPRs.js";
import { tool$githubCheckPublishingSecrets } from "./tools/githubCheckPublishingSecrets.js";
import { tool$githubConfigureCodeSamples } from "./tools/githubConfigureCodeSamples.js";
import { tool$githubConfigureMintlifyRepo } from "./tools/githubConfigureMintlifyRepo.js";
import { tool$githubConfigureTarget } from "./tools/githubConfigureTarget.js";
import { tool$githubGetAction } from "./tools/githubGetAction.js";
import { tool$githubGetSetup } from "./tools/githubGetSetup.js";
import { tool$githubLinkGithub } from "./tools/githubLinkGithub.js";
import { tool$githubStorePublishingSecrets } from "./tools/githubStorePublishingSecrets.js";
import { tool$githubTriggerAction } from "./tools/githubTriggerAction.js";
import { tool$organizationsCreate } from "./tools/organizationsCreate.js";
import { tool$organizationsCreateBillingAddOns } from "./tools/organizationsCreateBillingAddOns.js";
import { tool$organizationsCreateFreeTrial } from "./tools/organizationsCreateFreeTrial.js";
import { tool$organizationsDeleteBillingAddOn } from "./tools/organizationsDeleteBillingAddOn.js";
import { tool$organizationsGet } from "./tools/organizationsGet.js";
import { tool$organizationsGetAll } from "./tools/organizationsGetAll.js";
import { tool$organizationsGetBillingAddOns } from "./tools/organizationsGetBillingAddOns.js";
import { tool$organizationsGetUsage } from "./tools/organizationsGetUsage.js";
import { tool$publishingTokensCreate } from "./tools/publishingTokensCreate.js";
import { tool$publishingTokensDelete } from "./tools/publishingTokensDelete.js";
import { tool$publishingTokensGet } from "./tools/publishingTokensGet.js";
import { tool$publishingTokensList } from "./tools/publishingTokensList.js";
import { tool$publishingTokensResolveMetadata } from "./tools/publishingTokensResolveMetadata.js";
import { tool$publishingTokensResolveTarget } from "./tools/publishingTokensResolveTarget.js";
import { tool$publishingTokensUpdate } from "./tools/publishingTokensUpdate.js";
import { tool$reportsGetChangesReportSignedUrl } from "./tools/reportsGetChangesReportSignedUrl.js";
import { tool$reportsGetLintingReportSignedUrl } from "./tools/reportsGetLintingReportSignedUrl.js";
import { tool$reportsUploadReport } from "./tools/reportsUploadReport.js";
import { tool$schemaStoreCreateSchemaStoreItem } from "./tools/schemaStoreCreateSchemaStoreItem.js";
import { tool$shortURLsCreate } from "./tools/shortURLsCreate.js";
import { tool$subscriptionsActivateSubscriptionNamespace } from "./tools/subscriptionsActivateSubscriptionNamespace.js";
import { tool$subscriptionsIgnoreSubscriptionNamespace } from "./tools/subscriptionsIgnoreSubscriptionNamespace.js";
import { tool$suggestSuggest } from "./tools/suggestSuggest.js";
import { tool$suggestSuggestItems } from "./tools/suggestSuggestItems.js";
import { tool$suggestSuggestOpenAPI } from "./tools/suggestSuggestOpenAPI.js";
import { tool$suggestSuggestOpenAPIRegistry } from "./tools/suggestSuggestOpenAPIRegistry.js";
import { tool$workspacesCreate } from "./tools/workspacesCreate.js";
import { tool$workspacesCreateToken } from "./tools/workspacesCreateToken.js";
import { tool$workspacesDeleteToken } from "./tools/workspacesDeleteToken.js";
import { tool$workspacesGet } from "./tools/workspacesGet.js";
import { tool$workspacesGetAll } from "./tools/workspacesGetAll.js";
import { tool$workspacesGetByID } from "./tools/workspacesGetByID.js";
import { tool$workspacesGetFeatureFlags } from "./tools/workspacesGetFeatureFlags.js";
import { tool$workspacesGetSettings } from "./tools/workspacesGetSettings.js";
import { tool$workspacesGetTeam } from "./tools/workspacesGetTeam.js";
import { tool$workspacesGetTokens } from "./tools/workspacesGetTokens.js";
import { tool$workspacesGrantAccess } from "./tools/workspacesGrantAccess.js";
import { tool$workspacesRevokeAccess } from "./tools/workspacesRevokeAccess.js";
import { tool$workspacesSetFeatureFlags } from "./tools/workspacesSetFeatureFlags.js";
import { tool$workspacesUpdate } from "./tools/workspacesUpdate.js";
import { tool$workspacesUpdateSettings } from "./tools/workspacesUpdateSettings.js";

export function createMCPServer(deps: {
  logger: ConsoleLogger;
  allowedTools?: string[] | undefined;
  scopes?: MCPScope[] | undefined;
  serverURL?: string | undefined;
  security?: SDKOptions["security"] | undefined;
  workspaceId?: SDKOptions["workspaceId"] | undefined;
  server?: SDKOptions["server"] | undefined;
}) {
  const server = new McpServer({
    name: "Speakeasy",
    version: "5.0.0-rc.3",
  });

  const client = new SpeakeasyCore({
    security: deps.security,
    workspaceId: deps.workspaceId,
    serverURL: deps.serverURL,
    server: deps.server,
  });

  const scopes = new Set(deps.scopes);

  const allowedTools = deps.allowedTools && new Set(deps.allowedTools);
  const tool = createRegisterTool(
    deps.logger,
    server,
    client,
    scopes,
    allowedTools,
  );
  const resource = createRegisterResource(deps.logger, server, client, scopes);
  const resourceTemplate = createRegisterResourceTemplate(
    deps.logger,
    server,
    client,
    scopes,
  );
  const prompt = createRegisterPrompt(deps.logger, server, client, scopes);
  const register = { tool, resource, resourceTemplate, prompt };
  void register; // suppress unused warnings

  tool(tool$artifactsCreateRemoteSource);
  tool(tool$artifactsGetBlob);
  tool(tool$artifactsGetManifest);
  tool(tool$artifactsGetNamespaces);
  tool(tool$artifactsGetRevisions);
  tool(tool$artifactsGetTags);
  tool(tool$artifactsListRemoteSources);
  tool(tool$artifactsPostTags);
  tool(tool$artifactsPreflight);
  tool(tool$artifactsSetArchived);
  tool(tool$artifactsSetVisibility);
  tool(tool$authGetAccess);
  tool(tool$authGetAccessToken);
  tool(tool$authGetUser);
  tool(tool$authValidateApiKey);
  tool(tool$codeSamplesGenerateCodeSamplePreview);
  tool(tool$codeSamplesGenerateCodeSamplePreviewAsync);
  tool(tool$codeSamplesGet);
  tool(tool$codeSamplesGetCodeSamplePreviewAsync);
  tool(tool$githubCheckAccess);
  tool(tool$githubCheckPublishingPRs);
  tool(tool$githubCheckPublishingSecrets);
  tool(tool$githubConfigureCodeSamples);
  tool(tool$githubConfigureMintlifyRepo);
  tool(tool$githubConfigureTarget);
  tool(tool$githubGetAction);
  tool(tool$githubGetSetup);
  tool(tool$githubLinkGithub);
  tool(tool$githubStorePublishingSecrets);
  tool(tool$githubTriggerAction);
  tool(tool$organizationsCreate);
  tool(tool$organizationsCreateBillingAddOns);
  tool(tool$organizationsCreateFreeTrial);
  tool(tool$organizationsDeleteBillingAddOn);
  tool(tool$organizationsGet);
  tool(tool$organizationsGetAll);
  tool(tool$organizationsGetBillingAddOns);
  tool(tool$organizationsGetUsage);
  tool(tool$publishingTokensCreate);
  tool(tool$publishingTokensDelete);
  tool(tool$publishingTokensGet);
  tool(tool$publishingTokensList);
  tool(tool$publishingTokensResolveMetadata);
  tool(tool$publishingTokensResolveTarget);
  tool(tool$publishingTokensUpdate);
  tool(tool$reportsGetChangesReportSignedUrl);
  tool(tool$reportsGetLintingReportSignedUrl);
  tool(tool$reportsUploadReport);
  tool(tool$schemaStoreCreateSchemaStoreItem);
  tool(tool$shortURLsCreate);
  tool(tool$subscriptionsActivateSubscriptionNamespace);
  tool(tool$subscriptionsIgnoreSubscriptionNamespace);
  tool(tool$suggestSuggest);
  tool(tool$suggestSuggestItems);
  tool(tool$suggestSuggestOpenAPI);
  tool(tool$suggestSuggestOpenAPIRegistry);
  tool(tool$workspacesCreate);
  tool(tool$workspacesCreateToken);
  tool(tool$workspacesDeleteToken);
  tool(tool$workspacesGet);
  tool(tool$workspacesGetAll);
  tool(tool$workspacesGetByID);
  tool(tool$workspacesGetFeatureFlags);
  tool(tool$workspacesGetSettings);
  tool(tool$workspacesGetTeam);
  tool(tool$workspacesGetTokens);
  tool(tool$workspacesGrantAccess);
  tool(tool$workspacesRevokeAccess);
  tool(tool$workspacesSetFeatureFlags);
  tool(tool$workspacesUpdate);
  tool(tool$workspacesUpdateSettings);
  tool(tool$eventsGetEventsByTarget);
  tool(tool$eventsGetTargets);
  tool(tool$eventsGetTargetsDeprecated);
  tool(tool$eventsPost);
  tool(tool$eventsSearch);

  return server;
}
