/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { encodeJSON as encodeJSON$, encodeSimple as encodeSimple$ } from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { extractSecurity } from "../lib/security.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";

export class Metadata extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Delete metadata for a particular apiID and versionID.
     */
    async deleteVersionMetadata(
        request: operations.DeleteVersionMetadataRequest,
        options?: RequestOptions
    ): Promise<shared.ErrorT | undefined> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DeleteVersionMetadataRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            apiID: encodeSimple$("apiID", payload$.apiID, {
                explode: false,
                charEncoding: "percent",
            }),
            metaKey: encodeSimple$("metaKey", payload$.metaKey, {
                explode: false,
                charEncoding: "percent",
            }),
            metaValue: encodeSimple$("metaValue", payload$.metaValue, {
                explode: false,
                charEncoding: "percent",
            }),
            versionID: encodeSimple$("versionID", payload$.versionID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/v1/apis/{apiID}/version/{versionID}/metadata/{metaKey}/{metaValue}"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "deleteVersionMetadata",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<shared.ErrorT | undefined>()
            .void(200, shared.ErrorT$inboundSchema.optional())
            .json("default", shared.ErrorT$inboundSchema.optional())
            .match(response);

        return result$;
    }

    /**
     * Get all metadata for a particular apiID and versionID.
     */
    async getVersionMetadata(
        request: operations.GetVersionMetadataRequest,
        options?: RequestOptions
    ): Promise<operations.GetVersionMetadataResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetVersionMetadataRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            apiID: encodeSimple$("apiID", payload$.apiID, {
                explode: false,
                charEncoding: "percent",
            }),
            versionID: encodeSimple$("versionID", payload$.versionID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v1/apis/{apiID}/version/{versionID}/metadata")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "getVersionMetadata",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.GetVersionMetadataResponse>()
            .json(200, operations.GetVersionMetadataResponse$inboundSchema)
            .json("default", operations.GetVersionMetadataResponse$inboundSchema)
            .match(response);

        return result$;
    }

    /**
     * Insert metadata for a particular apiID and versionID.
     */
    async insertVersionMetadata(
        request: operations.InsertVersionMetadataRequest,
        options?: RequestOptions
    ): Promise<operations.InsertVersionMetadataResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.InsertVersionMetadataRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.VersionMetadata, { explode: true });

        const pathParams$ = {
            apiID: encodeSimple$("apiID", payload$.apiID, {
                explode: false,
                charEncoding: "percent",
            }),
            versionID: encodeSimple$("versionID", payload$.versionID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v1/apis/{apiID}/version/{versionID}/metadata")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "insertVersionMetadata",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.InsertVersionMetadataResponse>()
            .json(200, operations.InsertVersionMetadataResponse$inboundSchema)
            .json("default", operations.InsertVersionMetadataResponse$inboundSchema)
            .match(response);

        return result$;
    }
}
