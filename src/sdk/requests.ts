/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  GenerateRequestPostmanCollectionAcceptEnum,
  requestsGenerateRequestPostmanCollection,
} from "../funcs/requestsGenerateRequestPostmanCollection.js";
import { requestsGetRequestFromEventLog } from "../funcs/requestsGetRequestFromEventLog.js";
import { requestsQueryEventLog } from "../funcs/requestsQueryEventLog.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import { unwrapAsync } from "./types/fp.js";

export { GenerateRequestPostmanCollectionAcceptEnum } from "../funcs/requestsGenerateRequestPostmanCollection.js";

export class Requests extends ClientSDK {
  /**
   * Generate a Postman collection for a particular request.
   *
   * @remarks
   * Generates a Postman collection for a particular request.
   * Allowing it to be replayed with the same inputs that were captured by the SDK.
   */
  async generateRequestPostmanCollection(
    request: operations.GenerateRequestPostmanCollectionRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: GenerateRequestPostmanCollectionAcceptEnum;
    },
  ): Promise<operations.GenerateRequestPostmanCollectionResponse> {
    return unwrapAsync(requestsGenerateRequestPostmanCollection(
      this,
      request,
      options,
    ));
  }

  /**
   * Get information about a particular request.
   */
  async getRequestFromEventLog(
    request: operations.GetRequestFromEventLogRequest,
    options?: RequestOptions,
  ): Promise<operations.GetRequestFromEventLogResponse> {
    return unwrapAsync(requestsGetRequestFromEventLog(
      this,
      request,
      options,
    ));
  }

  /**
   * Query the event log to retrieve a list of requests.
   *
   * @remarks
   * Supports retrieving a list of request captured by the SDK for this workspace.
   * Allows the filtering of requests on a number of criteria such as ApiID, VersionID, Path, Method, etc.
   */
  async queryEventLog(
    request: operations.QueryEventLogRequest,
    options?: RequestOptions,
  ): Promise<operations.QueryEventLogResponse> {
    return unwrapAsync(requestsQueryEventLog(
      this,
      request,
      options,
    ));
  }
}
