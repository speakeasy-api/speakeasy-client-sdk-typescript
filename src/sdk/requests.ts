/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeJSONQuery as encodeJSONQuery$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";

export enum GenerateRequestPostmanCollectionAcceptEnum {
    applicationJson = "application/json",
    applicationOctetStream = "application/octet-stream",
}

export class Requests extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Generate a Postman collection for a particular request.
     *
     * @remarks
     * Generates a Postman collection for a particular request.
     * Allowing it to be replayed with the same inputs that were captured by the SDK.
     */
    async generateRequestPostmanCollection(
        request: operations.GenerateRequestPostmanCollectionRequest,
        options?: RequestOptions & {
            acceptHeaderOverride?: GenerateRequestPostmanCollectionAcceptEnum;
        }
    ): Promise<operations.GenerateRequestPostmanCollectionResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                operations.GenerateRequestPostmanCollectionRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            requestID: encodeSimple$("requestID", payload$.requestID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v1/eventlog/{requestID}/generate/postman")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            Accept:
                options?.acceptHeaderOverride ||
                "application/json;q=1, application/octet-stream;q=0",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "generateRequestPostmanCollection",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.GenerateRequestPostmanCollectionResponse>()
            .stream(200, operations.GenerateRequestPostmanCollectionResponse$inboundSchema)
            .json("default", operations.GenerateRequestPostmanCollectionResponse$inboundSchema)
            .match(response);

        return result$;
    }

    /**
     * Get information about a particular request.
     */
    async getRequestFromEventLog(
        request: operations.GetRequestFromEventLogRequest,
        options?: RequestOptions
    ): Promise<operations.GetRequestFromEventLogResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetRequestFromEventLogRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            requestID: encodeSimple$("requestID", payload$.requestID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v1/eventlog/{requestID}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "getRequestFromEventLog",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.GetRequestFromEventLogResponse>()
            .json(200, operations.GetRequestFromEventLogResponse$inboundSchema)
            .json("default", operations.GetRequestFromEventLogResponse$inboundSchema)
            .match(response);

        return result$;
    }

    /**
     * Query the event log to retrieve a list of requests.
     *
     * @remarks
     * Supports retrieving a list of request captured by the SDK for this workspace.
     * Allows the filtering of requests on a number of criteria such as ApiID, VersionID, Path, Method, etc.
     */
    async queryEventLog(
        request: operations.QueryEventLogRequest,
        options?: RequestOptions
    ): Promise<operations.QueryEventLogResponse> {
        const input$ = typeof request === "undefined" ? {} : request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.QueryEventLogRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/v1/eventlog/query")();

        const query$ = encodeJSONQuery$(
            {
                filters: payload$.filters,
            },
            { explode: false }
        );

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "queryEventLog",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.QueryEventLogResponse>()
            .json(200, operations.QueryEventLogResponse$inboundSchema)
            .json("default", operations.QueryEventLogResponse$inboundSchema)
            .match(response);

        return result$;
    }
}
