/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { organizationsCreate } from "../funcs/organizationsCreate.js";
import { organizationsCreateFreeTrial } from "../funcs/organizationsCreateFreeTrial.js";
import { organizationsGet } from "../funcs/organizationsGet.js";
import { organizationsGetAll } from "../funcs/organizationsGetAll.js";
import { organizationsGetUsage } from "../funcs/organizationsGetUsage.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Organizations extends ClientSDK {
  /**
   * Create an organization
   *
   * @remarks
   * Creates an organization
   */
  async create(
    request: shared.Organization,
    options?: RequestOptions,
  ): Promise<operations.CreateOrganizationResponse> {
    return unwrapAsync(organizationsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a free trial for an organization
   *
   * @remarks
   * Creates a free trial for an organization
   */
  async createFreeTrial(
    options?: RequestOptions,
  ): Promise<shared.ErrorT | undefined> {
    return unwrapAsync(organizationsCreateFreeTrial(
      this,
      options,
    ));
  }

  /**
   * Get organization
   *
   * @remarks
   * Get information about a particular organization.
   */
  async get(
    request: operations.GetOrganizationRequest,
    options?: RequestOptions,
  ): Promise<operations.GetOrganizationResponse> {
    return unwrapAsync(organizationsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Get organizations for a user
   *
   * @remarks
   * Returns a list of organizations a user has access too
   */
  async getAll(
    options?: RequestOptions,
  ): Promise<operations.GetOrganizationsResponse> {
    return unwrapAsync(organizationsGetAll(
      this,
      options,
    ));
  }

  /**
   * Get billing usage summary for a particular organization
   *
   * @remarks
   * Returns a billing usage summary by target languages for a particular organization
   */
  async getUsage(
    options?: RequestOptions,
  ): Promise<operations.GetOrganizationUsageResponse> {
    return unwrapAsync(organizationsGetUsage(
      this,
      options,
    ));
  }
}
