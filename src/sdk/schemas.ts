/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { encodeSimple as encodeSimple$ } from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { isBlobLike } from "./types/blobs.js";

export enum DownloadSchemaAcceptEnum {
    applicationJson = "application/json",
    applicationXYaml = "application/x-yaml",
}

export enum DownloadSchemaRevisionAcceptEnum {
    applicationJson = "application/json",
    applicationXYaml = "application/x-yaml",
}

export class Schemas extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Delete a particular schema revision for an Api.
     */
    async deleteSchema(
        request: operations.DeleteSchemaRequest,
        options?: RequestOptions
    ): Promise<shared.ErrorT | undefined> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DeleteSchemaRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            apiID: encodeSimple$("apiID", payload$.apiID, {
                explode: false,
                charEncoding: "percent",
            }),
            revisionID: encodeSimple$("revisionID", payload$.revisionID, {
                explode: false,
                charEncoding: "percent",
            }),
            versionID: encodeSimple$("versionID", payload$.versionID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/v1/apis/{apiID}/version/{versionID}/schema/{revisionID}"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "deleteSchema",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<shared.ErrorT | undefined>()
            .void(200, shared.ErrorT$inboundSchema.optional())
            .json("default", shared.ErrorT$inboundSchema.optional())
            .match(response);

        return result$;
    }

    /**
     * Download the latest schema for a particular apiID.
     */
    async downloadSchema(
        request: operations.DownloadSchemaRequest,
        options?: RequestOptions & { acceptHeaderOverride?: DownloadSchemaAcceptEnum }
    ): Promise<operations.DownloadSchemaResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DownloadSchemaRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            apiID: encodeSimple$("apiID", payload$.apiID, {
                explode: false,
                charEncoding: "percent",
            }),
            versionID: encodeSimple$("versionID", payload$.versionID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/v1/apis/{apiID}/version/{versionID}/schema/download"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: options?.acceptHeaderOverride || "application/json;q=1, application/x-yaml;q=0",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "downloadSchema",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.DownloadSchemaResponse>()
            .stream(200, operations.DownloadSchemaResponse$inboundSchema, {
                ctype: "application/json",
            })
            .stream(200, operations.DownloadSchemaResponse$inboundSchema, {
                ctype: "application/x-yaml",
            })
            .json("default", operations.DownloadSchemaResponse$inboundSchema)
            .match(response);

        return result$;
    }

    /**
     * Download a particular schema revision for an Api.
     */
    async downloadSchemaRevision(
        request: operations.DownloadSchemaRevisionRequest,
        options?: RequestOptions & { acceptHeaderOverride?: DownloadSchemaRevisionAcceptEnum }
    ): Promise<operations.DownloadSchemaRevisionResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DownloadSchemaRevisionRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            apiID: encodeSimple$("apiID", payload$.apiID, {
                explode: false,
                charEncoding: "percent",
            }),
            revisionID: encodeSimple$("revisionID", payload$.revisionID, {
                explode: false,
                charEncoding: "percent",
            }),
            versionID: encodeSimple$("versionID", payload$.versionID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/v1/apis/{apiID}/version/{versionID}/schema/{revisionID}/download"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: options?.acceptHeaderOverride || "application/json;q=1, application/x-yaml;q=0",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "downloadSchemaRevision",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.DownloadSchemaRevisionResponse>()
            .stream(200, operations.DownloadSchemaRevisionResponse$inboundSchema, {
                ctype: "application/json",
            })
            .stream(200, operations.DownloadSchemaRevisionResponse$inboundSchema, {
                ctype: "application/x-yaml",
            })
            .json("default", operations.DownloadSchemaRevisionResponse$inboundSchema)
            .match(response);

        return result$;
    }

    /**
     * Get information about the latest schema.
     *
     * @remarks
     * Returns information about the last uploaded schema for a particular API version.
     * This won't include the schema itself, that can be retrieved via the downloadSchema operation.
     */
    async getSchema(
        request: operations.GetSchemaRequest,
        options?: RequestOptions
    ): Promise<operations.GetSchemaResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetSchemaRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            apiID: encodeSimple$("apiID", payload$.apiID, {
                explode: false,
                charEncoding: "percent",
            }),
            versionID: encodeSimple$("versionID", payload$.versionID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v1/apis/{apiID}/version/{versionID}/schema")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "getSchema",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.GetSchemaResponse>()
            .json(200, operations.GetSchemaResponse$inboundSchema)
            .json("default", operations.GetSchemaResponse$inboundSchema)
            .match(response);

        return result$;
    }

    /**
     * Get a diff of two schema revisions for an Api.
     */
    async getSchemaDiff(
        request: operations.GetSchemaDiffRequest,
        options?: RequestOptions
    ): Promise<operations.GetSchemaDiffResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetSchemaDiffRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            apiID: encodeSimple$("apiID", payload$.apiID, {
                explode: false,
                charEncoding: "percent",
            }),
            baseRevisionID: encodeSimple$("baseRevisionID", payload$.baseRevisionID, {
                explode: false,
                charEncoding: "percent",
            }),
            targetRevisionID: encodeSimple$("targetRevisionID", payload$.targetRevisionID, {
                explode: false,
                charEncoding: "percent",
            }),
            versionID: encodeSimple$("versionID", payload$.versionID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/v1/apis/{apiID}/version/{versionID}/schema/{baseRevisionID}/diff/{targetRevisionID}"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "getSchemaDiff",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.GetSchemaDiffResponse>()
            .json(200, operations.GetSchemaDiffResponse$inboundSchema)
            .json("default", operations.GetSchemaDiffResponse$inboundSchema)
            .match(response);

        return result$;
    }

    /**
     * Get information about a particular schema revision for an Api.
     *
     * @remarks
     * Returns information about the last uploaded schema for a particular schema revision.
     * This won't include the schema itself, that can be retrieved via the downloadSchema operation.
     */
    async getSchemaRevision(
        request: operations.GetSchemaRevisionRequest,
        options?: RequestOptions
    ): Promise<operations.GetSchemaRevisionResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetSchemaRevisionRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            apiID: encodeSimple$("apiID", payload$.apiID, {
                explode: false,
                charEncoding: "percent",
            }),
            revisionID: encodeSimple$("revisionID", payload$.revisionID, {
                explode: false,
                charEncoding: "percent",
            }),
            versionID: encodeSimple$("versionID", payload$.versionID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/v1/apis/{apiID}/version/{versionID}/schema/{revisionID}"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "getSchemaRevision",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.GetSchemaRevisionResponse>()
            .json(200, operations.GetSchemaRevisionResponse$inboundSchema)
            .json("default", operations.GetSchemaRevisionResponse$inboundSchema)
            .match(response);

        return result$;
    }

    /**
     * Get information about all schemas associated with a particular apiID.
     *
     * @remarks
     * Returns information the schemas associated with a particular apiID.
     * This won't include the schemas themselves, they can be retrieved via the downloadSchema operation.
     */
    async getSchemas(
        request: operations.GetSchemasRequest,
        options?: RequestOptions
    ): Promise<operations.GetSchemasResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetSchemasRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            apiID: encodeSimple$("apiID", payload$.apiID, {
                explode: false,
                charEncoding: "percent",
            }),
            versionID: encodeSimple$("versionID", payload$.versionID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v1/apis/{apiID}/version/{versionID}/schemas")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "getSchemas",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.GetSchemasResponse>()
            .json(200, operations.GetSchemasResponse$inboundSchema)
            .json("default", operations.GetSchemasResponse$inboundSchema)
            .match(response);

        return result$;
    }

    /**
     * Register a schema.
     *
     * @remarks
     * Allows uploading a schema for a particular API version.
     * This will be used to populate ApiEndpoints and used as a base for any schema generation if present.
     */
    async registerSchema(
        request: operations.RegisterSchemaRequest,
        options?: RequestOptions
    ): Promise<shared.ErrorT | undefined> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.RegisterSchemaRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = new FormData();

        if (isBlobLike(payload$.RequestBody.file)) {
            body$.append("file", payload$.RequestBody.file);
        } else {
            body$.append(
                "file",
                new Blob([payload$.RequestBody.file.content], { type: "application/octet-stream" }),
                payload$.RequestBody.file.fileName
            );
        }

        const pathParams$ = {
            apiID: encodeSimple$("apiID", payload$.apiID, {
                explode: false,
                charEncoding: "percent",
            }),
            versionID: encodeSimple$("versionID", payload$.versionID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v1/apis/{apiID}/version/{versionID}/schema")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "registerSchema",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<shared.ErrorT | undefined>()
            .void(200, shared.ErrorT$inboundSchema.optional())
            .json("default", shared.ErrorT$inboundSchema.optional())
            .match(response);

        return result$;
    }
}
