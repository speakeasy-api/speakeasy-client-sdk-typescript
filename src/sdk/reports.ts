/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { encodeJSON as encodeJSON$, encodeSimple as encodeSimple$ } from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import { isBlobLike } from "./types/blobs.js";

export class Reports extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Get the signed access url for the change reports for a particular document.
     */
    async getChangesReportSignedUrl(
        request: operations.GetChangesReportSignedUrlRequest,
        options?: RequestOptions
    ): Promise<operations.GetChangesReportSignedUrlSignedAccess> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetChangesReportSignedUrlRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            documentChecksum: encodeSimple$("documentChecksum", payload$.documentChecksum, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v1/reports/changes/{documentChecksum}")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "getChangesReportSignedUrl",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.GetChangesReportSignedUrlSignedAccess>()
            .json(200, operations.GetChangesReportSignedUrlSignedAccess$inboundSchema)
            .match(response);

        return result$;
    }

    /**
     * Get the signed access url for the linting reports for a particular document.
     */
    async getLintingReportSignedUrl(
        request: operations.GetLintingReportSignedUrlRequest,
        options?: RequestOptions
    ): Promise<operations.GetLintingReportSignedUrlSignedAccess> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetLintingReportSignedUrlRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            documentChecksum: encodeSimple$("documentChecksum", payload$.documentChecksum, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v1/reports/linting/{documentChecksum}")(
            pathParams$
        );

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "getLintingReportSignedUrl",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.GetLintingReportSignedUrlSignedAccess>()
            .json(200, operations.GetLintingReportSignedUrlSignedAccess$inboundSchema)
            .match(response);

        return result$;
    }

    /**
     * Upload a report.
     */
    async uploadReport(
        request: operations.UploadReportRequestBody,
        options?: RequestOptions
    ): Promise<operations.UploadReportUploadedReport> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.UploadReportRequestBody$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = new FormData();

        body$.append("data", encodeJSON$("data", payload$.data, { explode: true }));
        if (isBlobLike(payload$.file)) {
            body$.append("file", payload$.file);
        } else {
            body$.append(
                "file",
                new Blob([payload$.file.content], { type: "application/octet-stream" }),
                payload$.file.fileName
            );
        }

        const path$ = this.templateURLComponent("/v1/reports")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "uploadReport",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.UploadReportUploadedReport>()
            .json(200, operations.UploadReportUploadedReport$inboundSchema)
            .match(response);

        return result$;
    }
}
