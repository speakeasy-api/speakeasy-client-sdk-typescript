/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { eventsGetEventsByTarget } from "../funcs/eventsGetEventsByTarget.js";
import { eventsGetTargets } from "../funcs/eventsGetTargets.js";
import { eventsGetTargetsDeprecated } from "../funcs/eventsGetTargetsDeprecated.js";
import { eventsPost } from "../funcs/eventsPost.js";
import { eventsSearch } from "../funcs/eventsSearch.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export class Events extends ClientSDK {
  /**
   * Load recent events for a particular workspace
   */
  async getEventsByTarget(
    request: operations.GetWorkspaceEventsByTargetRequest,
    options?: RequestOptions,
  ): Promise<operations.GetWorkspaceEventsByTargetResponse> {
    return unwrapAsync(eventsGetEventsByTarget(
      this,
      request,
      options,
    ));
  }

  /**
   * Load targets for a particular workspace
   */
  async getTargets(
    request: operations.GetWorkspaceTargetsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetWorkspaceTargetsResponse> {
    return unwrapAsync(eventsGetTargets(
      this,
      request,
      options,
    ));
  }

  /**
   * Load targets for a particular workspace
   */
  async getTargetsDeprecated(
    request: operations.GetWorkspaceTargetsDeprecatedRequest,
    options?: RequestOptions,
  ): Promise<operations.GetWorkspaceTargetsDeprecatedResponse> {
    return unwrapAsync(eventsGetTargetsDeprecated(
      this,
      request,
      options,
    ));
  }

  /**
   * Post events for a specific workspace
   *
   * @remarks
   * Sends an array of events to be stored for a particular workspace.
   */
  async post(
    request: operations.PostWorkspaceEventsRequest,
    options?: RequestOptions,
  ): Promise<shared.ErrorT | undefined> {
    return unwrapAsync(eventsPost(
      this,
      request,
      options,
    ));
  }

  /**
   * Search events for a particular workspace by any field
   */
  async search(
    request: operations.SearchWorkspaceEventsRequest,
    options?: RequestOptions,
  ): Promise<operations.SearchWorkspaceEventsResponse> {
    return unwrapAsync(eventsSearch(
      this,
      request,
      options,
    ));
  }
}
