/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";

export class Events extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Load recent events for a particular workspace
     */
    async getWorkspaceEventsByTarget(
        request: operations.GetWorkspaceEventsByTargetRequest,
        options?: RequestOptions
    ): Promise<operations.GetWorkspaceEventsByTargetResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetWorkspaceEventsByTargetRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            targetID: encodeSimple$("targetID", payload$.targetID, {
                explode: false,
                charEncoding: "percent",
            }),
            workspaceID: encodeSimple$(
                "workspaceID",
                payload$.workspaceID ?? this.options$.workspaceID,
                { explode: false, charEncoding: "percent" }
            ),
        };
        const path$ = this.templateURLComponent(
            "/v1/workspace/{workspaceID}/events/targets/{targetID}/events"
        )(pathParams$);

        const query$ = encodeFormQuery$({
            after_created_at: payload$.after_created_at,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "getWorkspaceEventsByTarget",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.GetWorkspaceEventsByTargetResponse>()
            .json(200, operations.GetWorkspaceEventsByTargetResponse$inboundSchema)
            .json("5XX", operations.GetWorkspaceEventsByTargetResponse$inboundSchema)
            .match(response);

        return result$;
    }

    /**
     * Load targets for a particular workspace
     */
    async getWorkspaceTargets(
        request: operations.GetWorkspaceTargetsRequest,
        options?: RequestOptions
    ): Promise<operations.GetWorkspaceTargetsResponse> {
        const input$ = typeof request === "undefined" ? {} : request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetWorkspaceTargetsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            workspaceID: encodeSimple$(
                "workspaceID",
                payload$.workspaceID ?? this.options$.workspaceID,
                { explode: false, charEncoding: "percent" }
            ),
        };
        const path$ = this.templateURLComponent("/v1/workspace/{workspaceID}/events/targets")(
            pathParams$
        );

        const query$ = encodeFormQuery$({
            after_last_event_created_at: payload$.after_last_event_created_at,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "getWorkspaceTargets",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.GetWorkspaceTargetsResponse>()
            .json(200, operations.GetWorkspaceTargetsResponse$inboundSchema)
            .json("5XX", operations.GetWorkspaceTargetsResponse$inboundSchema)
            .match(response);

        return result$;
    }

    /**
     * Post events for a specific workspace
     *
     * @remarks
     * Sends an array of events to be stored for a particular workspace.
     */
    async postWorkspaceEvents(
        request: operations.PostWorkspaceEventsRequest,
        options?: RequestOptions
    ): Promise<shared.ErrorT | undefined> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.PostWorkspaceEventsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            workspaceID: encodeSimple$(
                "workspaceID",
                payload$.workspaceID ?? this.options$.workspaceID,
                { explode: false, charEncoding: "percent" }
            ),
        };
        const path$ = this.templateURLComponent("/v1/workspace/{workspaceID}/events")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "postWorkspaceEvents",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries ||
                this.options$.retryConfig || {
                    strategy: "backoff",
                    backoff: {
                        initialInterval: 100,
                        maxInterval: 2000,
                        exponent: 1.5,
                        maxElapsedTime: 60000,
                    },
                    retryConnectionErrors: true,
                },
            retryCodes: options?.retryCodes || ["408", "500", "502", "503"],
        });

        const [result$] = await this.matcher<shared.ErrorT | undefined>()
            .void("2XX", shared.ErrorT$inboundSchema.optional())
            .json("5XX", shared.ErrorT$inboundSchema.optional())
            .match(response);

        return result$;
    }

    /**
     * Search events for a particular workspace by any field
     */
    async searchWorkspaceEvents(
        request: operations.SearchWorkspaceEventsRequest,
        options?: RequestOptions
    ): Promise<operations.SearchWorkspaceEventsResponse> {
        const input$ = typeof request === "undefined" ? {} : request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.SearchWorkspaceEventsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            workspaceID: encodeSimple$(
                "workspaceID",
                payload$.workspaceID ?? this.options$.workspaceID,
                { explode: false, charEncoding: "percent" }
            ),
        };
        const path$ = this.templateURLComponent("/v1/workspace/{workspaceID}/events")(pathParams$);

        const query$ = encodeFormQuery$({
            generate_gen_lock_id: payload$.generate_gen_lock_id,
            interaction_type: payload$.interaction_type,
            lint_report_digest: payload$.lint_report_digest,
            openapi_diff_report_digest: payload$.openapi_diff_report_digest,
            source_revision_digest: payload$.source_revision_digest,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "searchWorkspaceEvents",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.SearchWorkspaceEventsResponse>()
            .json(200, operations.SearchWorkspaceEventsResponse$inboundSchema)
            .json("5XX", operations.SearchWorkspaceEventsResponse$inboundSchema)
            .match(response);

        return result$;
    }
}
