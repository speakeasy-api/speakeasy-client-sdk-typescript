/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  artifactsGetBlob,
  GetBlobAcceptEnum,
} from "../funcs/artifactsGetBlob.js";
import {
  artifactsGetManifest,
  GetManifestAcceptEnum,
} from "../funcs/artifactsGetManifest.js";
import { artifactsGetNamespaces } from "../funcs/artifactsGetNamespaces.js";
import { artifactsGetRevisions } from "../funcs/artifactsGetRevisions.js";
import { artifactsGetTags } from "../funcs/artifactsGetTags.js";
import { artifactsPostTags } from "../funcs/artifactsPostTags.js";
import { artifactsPreflight } from "../funcs/artifactsPreflight.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrapAsync } from "./types/fp.js";

export { GetBlobAcceptEnum } from "../funcs/artifactsGetBlob.js";

export { GetManifestAcceptEnum } from "../funcs/artifactsGetManifest.js";

export class Artifacts extends ClientSDK {
  /**
   * Get blob for a particular digest
   */
  async getBlob(
    request: operations.GetBlobRequest,
    options?: RequestOptions & { acceptHeaderOverride?: GetBlobAcceptEnum },
  ): Promise<operations.GetBlobResponse> {
    return unwrapAsync(artifactsGetBlob(
      this,
      request,
      options,
    ));
  }

  /**
   * Get manifest for a particular reference
   */
  async getManifest(
    request: operations.GetManifestRequest,
    options?: RequestOptions & { acceptHeaderOverride?: GetManifestAcceptEnum },
  ): Promise<operations.GetManifestResponse> {
    return unwrapAsync(artifactsGetManifest(
      this,
      request,
      options,
    ));
  }

  /**
   * Each namespace contains many revisions.
   */
  async getNamespaces(
    options?: RequestOptions,
  ): Promise<operations.GetNamespacesResponse> {
    return unwrapAsync(artifactsGetNamespaces(
      this,
      options,
    ));
  }

  async getRevisions(
    request: operations.GetRevisionsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetRevisionsResponse> {
    return unwrapAsync(artifactsGetRevisions(
      this,
      request,
      options,
    ));
  }

  async getTags(
    request: operations.GetTagsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetTagsResponse> {
    return unwrapAsync(artifactsGetTags(
      this,
      request,
      options,
    ));
  }

  /**
   * Add tags to an existing revision
   */
  async postTags(
    request: operations.PostTagsRequest,
    options?: RequestOptions,
  ): Promise<shared.ErrorT | undefined> {
    return unwrapAsync(artifactsPostTags(
      this,
      request,
      options,
    ));
  }

  /**
   * Get access token for communicating with OCI distribution endpoints
   */
  async preflight(
    request?: shared.PreflightRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.PreflightResponse> {
    return unwrapAsync(artifactsPreflight(
      this,
      request,
      options,
    ));
  }
}
