/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

/**
 * A document hosted in the registry
 */
export type RemoteDocument = {
  registryUrl: string;
};

/** @internal */
export const RemoteDocument$inboundSchema: z.ZodType<
  RemoteDocument,
  z.ZodTypeDef,
  unknown
> = z.object({
  registry_url: z.string(),
}).transform((v) => {
  return remap$(v, {
    "registry_url": "registryUrl",
  });
});

/** @internal */
export type RemoteDocument$Outbound = {
  registry_url: string;
};

/** @internal */
export const RemoteDocument$outboundSchema: z.ZodType<
  RemoteDocument$Outbound,
  z.ZodTypeDef,
  RemoteDocument
> = z.object({
  registryUrl: z.string(),
}).transform((v) => {
  return remap$(v, {
    registryUrl: "registry_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoteDocument$ {
  /** @deprecated use `RemoteDocument$inboundSchema` instead. */
  export const inboundSchema = RemoteDocument$inboundSchema;
  /** @deprecated use `RemoteDocument$outboundSchema` instead. */
  export const outboundSchema = RemoteDocument$outboundSchema;
  /** @deprecated use `RemoteDocument$Outbound` instead. */
  export type Outbound = RemoteDocument$Outbound;
}
