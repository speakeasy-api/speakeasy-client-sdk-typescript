/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  Filter,
  Filter$inboundSchema,
  Filter$Outbound,
  Filter$outboundSchema,
} from "./filter.js";

/**
 * Filters are used to query requests.
 */
export type Filters = {
  /**
   * A list of filters to apply to the query.
   */
  filters: Array<Filter>;
  /**
   * The maximum number of results to return.
   */
  limit: number;
  /**
   * The offset to start the query from.
   */
  offset: number;
  /**
   * The operator to use when combining filters.
   */
  operator: string;
};

/** @internal */
export const Filters$inboundSchema: z.ZodType<Filters, z.ZodTypeDef, unknown> =
  z.object({
    filters: z.array(Filter$inboundSchema),
    limit: z.number().int(),
    offset: z.number().int(),
    operator: z.string(),
  });

/** @internal */
export type Filters$Outbound = {
  filters: Array<Filter$Outbound>;
  limit: number;
  offset: number;
  operator: string;
};

/** @internal */
export const Filters$outboundSchema: z.ZodType<
  Filters$Outbound,
  z.ZodTypeDef,
  Filters
> = z.object({
  filters: z.array(Filter$outboundSchema),
  limit: z.number().int(),
  offset: z.number().int(),
  operator: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filters$ {
  /** @deprecated use `Filters$inboundSchema` instead. */
  export const inboundSchema = Filters$inboundSchema;
  /** @deprecated use `Filters$outboundSchema` instead. */
  export const outboundSchema = Filters$outboundSchema;
  /** @deprecated use `Filters$Outbound` instead. */
  export type Outbound = Filters$Outbound;
}
