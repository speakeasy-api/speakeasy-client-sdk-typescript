/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Diagnostic,
  Diagnostic$inboundSchema,
  Diagnostic$Outbound,
  Diagnostic$outboundSchema,
} from "./diagnostic.js";
import {
  OASSummary,
  OASSummary$inboundSchema,
  OASSummary$Outbound,
  OASSummary$outboundSchema,
} from "./oassummary.js";

export const SuggestRequestBodySuggestionType = {
  MethodNames: "method-names",
  DiagnosticsOnly: "diagnostics-only",
} as const;
export type SuggestRequestBodySuggestionType = ClosedEnum<
  typeof SuggestRequestBodySuggestionType
>;

export type SuggestRequestBody = {
  diagnostics: Array<Diagnostic>;
  oasSummary: OASSummary;
  suggestionType: SuggestRequestBodySuggestionType;
};

/** @internal */
export const SuggestRequestBodySuggestionType$inboundSchema: z.ZodNativeEnum<
  typeof SuggestRequestBodySuggestionType
> = z.nativeEnum(SuggestRequestBodySuggestionType);

/** @internal */
export const SuggestRequestBodySuggestionType$outboundSchema: z.ZodNativeEnum<
  typeof SuggestRequestBodySuggestionType
> = SuggestRequestBodySuggestionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SuggestRequestBodySuggestionType$ {
  /** @deprecated use `SuggestRequestBodySuggestionType$inboundSchema` instead. */
  export const inboundSchema = SuggestRequestBodySuggestionType$inboundSchema;
  /** @deprecated use `SuggestRequestBodySuggestionType$outboundSchema` instead. */
  export const outboundSchema = SuggestRequestBodySuggestionType$outboundSchema;
}

/** @internal */
export const SuggestRequestBody$inboundSchema: z.ZodType<
  SuggestRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  diagnostics: z.array(Diagnostic$inboundSchema),
  oas_summary: OASSummary$inboundSchema,
  suggestion_type: SuggestRequestBodySuggestionType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "oas_summary": "oasSummary",
    "suggestion_type": "suggestionType",
  });
});

/** @internal */
export type SuggestRequestBody$Outbound = {
  diagnostics: Array<Diagnostic$Outbound>;
  oas_summary: OASSummary$Outbound;
  suggestion_type: string;
};

/** @internal */
export const SuggestRequestBody$outboundSchema: z.ZodType<
  SuggestRequestBody$Outbound,
  z.ZodTypeDef,
  SuggestRequestBody
> = z.object({
  diagnostics: z.array(Diagnostic$outboundSchema),
  oasSummary: OASSummary$outboundSchema,
  suggestionType: SuggestRequestBodySuggestionType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    oasSummary: "oas_summary",
    suggestionType: "suggestion_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SuggestRequestBody$ {
  /** @deprecated use `SuggestRequestBody$inboundSchema` instead. */
  export const inboundSchema = SuggestRequestBody$inboundSchema;
  /** @deprecated use `SuggestRequestBody$outboundSchema` instead. */
  export const outboundSchema = SuggestRequestBody$outboundSchema;
  /** @deprecated use `SuggestRequestBody$Outbound` instead. */
  export type Outbound = SuggestRequestBody$Outbound;
}

export function suggestRequestBodyToJSON(
  suggestRequestBody: SuggestRequestBody,
): string {
  return JSON.stringify(
    SuggestRequestBody$outboundSchema.parse(suggestRequestBody),
  );
}

export function suggestRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<SuggestRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SuggestRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SuggestRequestBody' from JSON`,
  );
}
