/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FeatureFlag,
  FeatureFlag$inboundSchema,
  FeatureFlag$Outbound,
  FeatureFlag$outboundSchema,
} from "./featureflag.js";

/**
 * Workspace feature flag response
 */
export type WorkspaceFeatureFlagResponse = {
  featureFlags?: Array<FeatureFlag> | undefined;
};

/** @internal */
export const WorkspaceFeatureFlagResponse$inboundSchema: z.ZodType<
  WorkspaceFeatureFlagResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  feature_flags: z.array(FeatureFlag$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "feature_flags": "featureFlags",
  });
});

/** @internal */
export type WorkspaceFeatureFlagResponse$Outbound = {
  feature_flags?: Array<FeatureFlag$Outbound> | undefined;
};

/** @internal */
export const WorkspaceFeatureFlagResponse$outboundSchema: z.ZodType<
  WorkspaceFeatureFlagResponse$Outbound,
  z.ZodTypeDef,
  WorkspaceFeatureFlagResponse
> = z.object({
  featureFlags: z.array(FeatureFlag$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    featureFlags: "feature_flags",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkspaceFeatureFlagResponse$ {
  /** @deprecated use `WorkspaceFeatureFlagResponse$inboundSchema` instead. */
  export const inboundSchema = WorkspaceFeatureFlagResponse$inboundSchema;
  /** @deprecated use `WorkspaceFeatureFlagResponse$outboundSchema` instead. */
  export const outboundSchema = WorkspaceFeatureFlagResponse$outboundSchema;
  /** @deprecated use `WorkspaceFeatureFlagResponse$Outbound` instead. */
  export type Outbound = WorkspaceFeatureFlagResponse$Outbound;
}

export function workspaceFeatureFlagResponseToJSON(
  workspaceFeatureFlagResponse: WorkspaceFeatureFlagResponse,
): string {
  return JSON.stringify(
    WorkspaceFeatureFlagResponse$outboundSchema.parse(
      workspaceFeatureFlagResponse,
    ),
  );
}

export function workspaceFeatureFlagResponseFromJSON(
  jsonString: string,
): SafeParseResult<WorkspaceFeatureFlagResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkspaceFeatureFlagResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkspaceFeatureFlagResponse' from JSON`,
  );
}
