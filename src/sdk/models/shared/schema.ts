/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

/**
 * A Schema represents an API schema for a particular Api and Version.
 */
export type Schema = {
  /**
   * The ID of the Api this Schema belongs to.
   */
  apiId: string;
  /**
   * Creation timestamp.
   */
  createdAt: Date;
  /**
   * A detailed description of the Schema.
   */
  description: string;
  /**
   * An ID referencing this particular revision of the Schema.
   */
  revisionId: string;
  /**
   * The version ID of the Api this Schema belongs to.
   */
  versionId: string;
  /**
   * The workspace ID this Schema belongs to.
   */
  workspaceId: string;
};

/** @internal */
export const Schema$inboundSchema: z.ZodType<Schema, z.ZodTypeDef, unknown> = z
  .object({
    api_id: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    description: z.string(),
    revision_id: z.string(),
    version_id: z.string(),
    workspace_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "api_id": "apiId",
      "created_at": "createdAt",
      "revision_id": "revisionId",
      "version_id": "versionId",
      "workspace_id": "workspaceId",
    });
  });

/** @internal */
export type Schema$Outbound = {
  api_id: string;
  created_at: string;
  description: string;
  revision_id: string;
  version_id: string;
  workspace_id: string;
};

/** @internal */
export const Schema$outboundSchema: z.ZodType<
  Schema$Outbound,
  z.ZodTypeDef,
  Schema
> = z.object({
  apiId: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  description: z.string(),
  revisionId: z.string(),
  versionId: z.string(),
  workspaceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    apiId: "api_id",
    createdAt: "created_at",
    revisionId: "revision_id",
    versionId: "version_id",
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Schema$ {
  /** @deprecated use `Schema$inboundSchema` instead. */
  export const inboundSchema = Schema$inboundSchema;
  /** @deprecated use `Schema$outboundSchema` instead. */
  export const outboundSchema = Schema$outboundSchema;
  /** @deprecated use `Schema$Outbound` instead. */
  export type Outbound = Schema$Outbound;
}
