/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Relationship = {
  userId: string;
  workspaceId: string;
};

/**
 * A response for workspace user invite
 */
export type WorkspaceInviteResponse = {
  inviteLink?: string | null | undefined;
  relationship: Relationship;
};

/** @internal */
export const Relationship$inboundSchema: z.ZodType<
  Relationship,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string(),
  workspace_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type Relationship$Outbound = {
  user_id: string;
  workspace_id: string;
};

/** @internal */
export const Relationship$outboundSchema: z.ZodType<
  Relationship$Outbound,
  z.ZodTypeDef,
  Relationship
> = z.object({
  userId: z.string(),
  workspaceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Relationship$ {
  /** @deprecated use `Relationship$inboundSchema` instead. */
  export const inboundSchema = Relationship$inboundSchema;
  /** @deprecated use `Relationship$outboundSchema` instead. */
  export const outboundSchema = Relationship$outboundSchema;
  /** @deprecated use `Relationship$Outbound` instead. */
  export type Outbound = Relationship$Outbound;
}

export function relationshipToJSON(relationship: Relationship): string {
  return JSON.stringify(Relationship$outboundSchema.parse(relationship));
}

export function relationshipFromJSON(
  jsonString: string,
): SafeParseResult<Relationship, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Relationship$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Relationship' from JSON`,
  );
}

/** @internal */
export const WorkspaceInviteResponse$inboundSchema: z.ZodType<
  WorkspaceInviteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  invite_link: z.nullable(z.string()).optional(),
  relationship: z.lazy(() => Relationship$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "invite_link": "inviteLink",
  });
});

/** @internal */
export type WorkspaceInviteResponse$Outbound = {
  invite_link?: string | null | undefined;
  relationship: Relationship$Outbound;
};

/** @internal */
export const WorkspaceInviteResponse$outboundSchema: z.ZodType<
  WorkspaceInviteResponse$Outbound,
  z.ZodTypeDef,
  WorkspaceInviteResponse
> = z.object({
  inviteLink: z.nullable(z.string()).optional(),
  relationship: z.lazy(() => Relationship$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    inviteLink: "invite_link",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkspaceInviteResponse$ {
  /** @deprecated use `WorkspaceInviteResponse$inboundSchema` instead. */
  export const inboundSchema = WorkspaceInviteResponse$inboundSchema;
  /** @deprecated use `WorkspaceInviteResponse$outboundSchema` instead. */
  export const outboundSchema = WorkspaceInviteResponse$outboundSchema;
  /** @deprecated use `WorkspaceInviteResponse$Outbound` instead. */
  export type Outbound = WorkspaceInviteResponse$Outbound;
}

export function workspaceInviteResponseToJSON(
  workspaceInviteResponse: WorkspaceInviteResponse,
): string {
  return JSON.stringify(
    WorkspaceInviteResponse$outboundSchema.parse(workspaceInviteResponse),
  );
}

export function workspaceInviteResponseFromJSON(
  jsonString: string,
): SafeParseResult<WorkspaceInviteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkspaceInviteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkspaceInviteResponse' from JSON`,
  );
}
