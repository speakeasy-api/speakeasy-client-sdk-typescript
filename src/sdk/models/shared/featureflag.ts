/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

/**
 * A feature flag is a key-value pair that can be used to enable or disable features.
 */
export type FeatureFlag = {
  featureFlag: string;
  trialEndsAt?: Date | null | undefined;
};

/** @internal */
export const FeatureFlag$inboundSchema: z.ZodType<
  FeatureFlag,
  z.ZodTypeDef,
  unknown
> = z.object({
  feature_flag: z.string(),
  trial_ends_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "feature_flag": "featureFlag",
    "trial_ends_at": "trialEndsAt",
  });
});

/** @internal */
export type FeatureFlag$Outbound = {
  feature_flag: string;
  trial_ends_at?: string | null | undefined;
};

/** @internal */
export const FeatureFlag$outboundSchema: z.ZodType<
  FeatureFlag$Outbound,
  z.ZodTypeDef,
  FeatureFlag
> = z.object({
  featureFlag: z.string(),
  trialEndsAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    featureFlag: "feature_flag",
    trialEndsAt: "trial_ends_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeatureFlag$ {
  /** @deprecated use `FeatureFlag$inboundSchema` instead. */
  export const inboundSchema = FeatureFlag$inboundSchema;
  /** @deprecated use `FeatureFlag$outboundSchema` instead. */
  export const outboundSchema = FeatureFlag$outboundSchema;
  /** @deprecated use `FeatureFlag$Outbound` instead. */
  export type Outbound = FeatureFlag$Outbound;
}
