/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

/**
 * A representation of an embed token granted for working with Speakeasy components.
 */
export type EmbedToken = {
  /**
   * Creation timestamp.
   */
  createdAt: Date;
  /**
   * The ID of the user that created this token.
   */
  createdBy: string;
  /**
   * A detailed description of the EmbedToken.
   */
  description: string;
  /**
   * The time this token expires.
   */
  expiresAt: Date;
  /**
   * The filters applied to this token.
   */
  filters: string;
  /**
   * The ID of this EmbedToken.
   */
  id: string;
  /**
   * The last time this token was used.
   */
  lastUsed?: Date | undefined;
  /**
   * The time this token was revoked.
   */
  revokedAt?: Date | undefined;
  /**
   * The ID of the user that revoked this token.
   */
  revokedBy?: string | undefined;
  /**
   * The workspace ID this token belongs to.
   */
  workspaceId: string;
};

/** @internal */
export const EmbedToken$inboundSchema: z.ZodType<
  EmbedToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  created_by: z.string(),
  description: z.string(),
  expires_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  filters: z.string(),
  id: z.string(),
  last_used: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  revoked_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  revoked_by: z.string().optional(),
  workspace_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "created_by": "createdBy",
    "expires_at": "expiresAt",
    "last_used": "lastUsed",
    "revoked_at": "revokedAt",
    "revoked_by": "revokedBy",
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type EmbedToken$Outbound = {
  created_at: string;
  created_by: string;
  description: string;
  expires_at: string;
  filters: string;
  id: string;
  last_used?: string | undefined;
  revoked_at?: string | undefined;
  revoked_by?: string | undefined;
  workspace_id: string;
};

/** @internal */
export const EmbedToken$outboundSchema: z.ZodType<
  EmbedToken$Outbound,
  z.ZodTypeDef,
  EmbedToken
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  createdBy: z.string(),
  description: z.string(),
  expiresAt: z.date().transform(v => v.toISOString()),
  filters: z.string(),
  id: z.string(),
  lastUsed: z.date().transform(v => v.toISOString()).optional(),
  revokedAt: z.date().transform(v => v.toISOString()).optional(),
  revokedBy: z.string().optional(),
  workspaceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    createdBy: "created_by",
    expiresAt: "expires_at",
    lastUsed: "last_used",
    revokedAt: "revoked_at",
    revokedBy: "revoked_by",
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmbedToken$ {
  /** @deprecated use `EmbedToken$inboundSchema` instead. */
  export const inboundSchema = EmbedToken$inboundSchema;
  /** @deprecated use `EmbedToken$outboundSchema` instead. */
  export const outboundSchema = EmbedToken$outboundSchema;
  /** @deprecated use `EmbedToken$Outbound` instead. */
  export type Outbound = EmbedToken$Outbound;
}
