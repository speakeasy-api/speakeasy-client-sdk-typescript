/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const TargetResource = {
  Document: "document",
} as const;
export type TargetResource = ClosedEnum<typeof TargetResource>;

/**
 * A token used to publish to a target
 */
export type PublishingToken = {
  createdAt: Date;
  createdBy: string;
  id: string;
  organizationId: string;
  targetId: string;
  targetResource: TargetResource;
  token: string;
  tokenName: string;
  updatedAt?: Date | undefined;
  updatedBy?: string | undefined;
  validUntil: Date;
  workspaceId: string;
};

/** @internal */
export const TargetResource$inboundSchema: z.ZodNativeEnum<
  typeof TargetResource
> = z.nativeEnum(TargetResource);

/** @internal */
export const TargetResource$outboundSchema: z.ZodNativeEnum<
  typeof TargetResource
> = TargetResource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TargetResource$ {
  /** @deprecated use `TargetResource$inboundSchema` instead. */
  export const inboundSchema = TargetResource$inboundSchema;
  /** @deprecated use `TargetResource$outboundSchema` instead. */
  export const outboundSchema = TargetResource$outboundSchema;
}

/** @internal */
export const PublishingToken$inboundSchema: z.ZodType<
  PublishingToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  created_by: z.string(),
  id: z.string(),
  organization_id: z.string(),
  target_id: z.string(),
  target_resource: TargetResource$inboundSchema,
  token: z.string(),
  token_name: z.string(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_by: z.string().optional(),
  valid_until: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  workspace_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "created_by": "createdBy",
    "organization_id": "organizationId",
    "target_id": "targetId",
    "target_resource": "targetResource",
    "token_name": "tokenName",
    "updated_at": "updatedAt",
    "updated_by": "updatedBy",
    "valid_until": "validUntil",
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type PublishingToken$Outbound = {
  created_at: string;
  created_by: string;
  id: string;
  organization_id: string;
  target_id: string;
  target_resource: string;
  token: string;
  token_name: string;
  updated_at?: string | undefined;
  updated_by?: string | undefined;
  valid_until: string;
  workspace_id: string;
};

/** @internal */
export const PublishingToken$outboundSchema: z.ZodType<
  PublishingToken$Outbound,
  z.ZodTypeDef,
  PublishingToken
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  createdBy: z.string(),
  id: z.string(),
  organizationId: z.string(),
  targetId: z.string(),
  targetResource: TargetResource$outboundSchema,
  token: z.string(),
  tokenName: z.string(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  updatedBy: z.string().optional(),
  validUntil: z.date().transform(v => v.toISOString()),
  workspaceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    createdBy: "created_by",
    organizationId: "organization_id",
    targetId: "target_id",
    targetResource: "target_resource",
    tokenName: "token_name",
    updatedAt: "updated_at",
    updatedBy: "updated_by",
    validUntil: "valid_until",
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublishingToken$ {
  /** @deprecated use `PublishingToken$inboundSchema` instead. */
  export const inboundSchema = PublishingToken$inboundSchema;
  /** @deprecated use `PublishingToken$outboundSchema` instead. */
  export const outboundSchema = PublishingToken$outboundSchema;
  /** @deprecated use `PublishingToken$Outbound` instead. */
  export type Outbound = PublishingToken$Outbound;
}

export function publishingTokenToJSON(
  publishingToken: PublishingToken,
): string {
  return JSON.stringify(PublishingToken$outboundSchema.parse(publishingToken));
}

export function publishingTokenFromJSON(
  jsonString: string,
): SafeParseResult<PublishingToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublishingToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublishingToken' from JSON`,
  );
}
