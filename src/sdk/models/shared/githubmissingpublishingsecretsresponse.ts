/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A valid response containing MISSING publishing secret keys for a github target
 */
export type GithubMissingPublishingSecretsResponse = {
  missingSecrets?: Array<string> | undefined;
};

/** @internal */
export const GithubMissingPublishingSecretsResponse$inboundSchema: z.ZodType<
  GithubMissingPublishingSecretsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  missing_secrets: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "missing_secrets": "missingSecrets",
  });
});

/** @internal */
export type GithubMissingPublishingSecretsResponse$Outbound = {
  missing_secrets?: Array<string> | undefined;
};

/** @internal */
export const GithubMissingPublishingSecretsResponse$outboundSchema: z.ZodType<
  GithubMissingPublishingSecretsResponse$Outbound,
  z.ZodTypeDef,
  GithubMissingPublishingSecretsResponse
> = z.object({
  missingSecrets: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    missingSecrets: "missing_secrets",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubMissingPublishingSecretsResponse$ {
  /** @deprecated use `GithubMissingPublishingSecretsResponse$inboundSchema` instead. */
  export const inboundSchema =
    GithubMissingPublishingSecretsResponse$inboundSchema;
  /** @deprecated use `GithubMissingPublishingSecretsResponse$outboundSchema` instead. */
  export const outboundSchema =
    GithubMissingPublishingSecretsResponse$outboundSchema;
  /** @deprecated use `GithubMissingPublishingSecretsResponse$Outbound` instead. */
  export type Outbound = GithubMissingPublishingSecretsResponse$Outbound;
}

export function githubMissingPublishingSecretsResponseToJSON(
  githubMissingPublishingSecretsResponse:
    GithubMissingPublishingSecretsResponse,
): string {
  return JSON.stringify(
    GithubMissingPublishingSecretsResponse$outboundSchema.parse(
      githubMissingPublishingSecretsResponse,
    ),
  );
}

export function githubMissingPublishingSecretsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GithubMissingPublishingSecretsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GithubMissingPublishingSecretsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GithubMissingPublishingSecretsResponse' from JSON`,
  );
}
