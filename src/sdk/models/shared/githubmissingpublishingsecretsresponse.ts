/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

/**
 * A valid response containing MISSING publishing secret keys for a github target
 */
export type GithubMissingPublishingSecretsResponse = {
    missingSecrets?: Array<string> | undefined;
};

/** @internal */
export const GithubMissingPublishingSecretsResponse$inboundSchema: z.ZodType<
    GithubMissingPublishingSecretsResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        missing_secrets: z.array(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            missing_secrets: "missingSecrets",
        });
    });

/** @internal */
export type GithubMissingPublishingSecretsResponse$Outbound = {
    missing_secrets?: Array<string> | undefined;
};

/** @internal */
export const GithubMissingPublishingSecretsResponse$outboundSchema: z.ZodType<
    GithubMissingPublishingSecretsResponse$Outbound,
    z.ZodTypeDef,
    GithubMissingPublishingSecretsResponse
> = z
    .object({
        missingSecrets: z.array(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            missingSecrets: "missing_secrets",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubMissingPublishingSecretsResponse$ {
    /** @deprecated use `GithubMissingPublishingSecretsResponse$inboundSchema` instead. */
    export const inboundSchema = GithubMissingPublishingSecretsResponse$inboundSchema;
    /** @deprecated use `GithubMissingPublishingSecretsResponse$outboundSchema` instead. */
    export const outboundSchema = GithubMissingPublishingSecretsResponse$outboundSchema;
    /** @deprecated use `GithubMissingPublishingSecretsResponse$Outbound` instead. */
    export type Outbound = GithubMissingPublishingSecretsResponse$Outbound;
}
