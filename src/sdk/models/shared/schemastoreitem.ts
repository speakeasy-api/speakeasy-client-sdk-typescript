/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Format = {
  Json: "json",
  Yaml: "yaml",
} as const;
export type Format = ClosedEnum<typeof Format>;

export type SchemaStoreItem = {
  createdAt: Date;
  format: Format;
  id: string;
  packageName: string;
  sdkClassname: string;
  spec: string;
};

/** @internal */
export const Format$inboundSchema: z.ZodNativeEnum<typeof Format> = z
  .nativeEnum(Format);

/** @internal */
export const Format$outboundSchema: z.ZodNativeEnum<typeof Format> =
  Format$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Format$ {
  /** @deprecated use `Format$inboundSchema` instead. */
  export const inboundSchema = Format$inboundSchema;
  /** @deprecated use `Format$outboundSchema` instead. */
  export const outboundSchema = Format$outboundSchema;
}

/** @internal */
export const SchemaStoreItem$inboundSchema: z.ZodType<
  SchemaStoreItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  format: Format$inboundSchema,
  id: z.string(),
  packageName: z.string(),
  sdkClassname: z.string(),
  spec: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
  });
});

/** @internal */
export type SchemaStoreItem$Outbound = {
  created_at: string;
  format: string;
  id: string;
  packageName: string;
  sdkClassname: string;
  spec: string;
};

/** @internal */
export const SchemaStoreItem$outboundSchema: z.ZodType<
  SchemaStoreItem$Outbound,
  z.ZodTypeDef,
  SchemaStoreItem
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  format: Format$outboundSchema,
  id: z.string(),
  packageName: z.string(),
  sdkClassname: z.string(),
  spec: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemaStoreItem$ {
  /** @deprecated use `SchemaStoreItem$inboundSchema` instead. */
  export const inboundSchema = SchemaStoreItem$inboundSchema;
  /** @deprecated use `SchemaStoreItem$outboundSchema` instead. */
  export const outboundSchema = SchemaStoreItem$outboundSchema;
  /** @deprecated use `SchemaStoreItem$Outbound` instead. */
  export type Outbound = SchemaStoreItem$Outbound;
}

export function schemaStoreItemToJSON(
  schemaStoreItem: SchemaStoreItem,
): string {
  return JSON.stringify(SchemaStoreItem$outboundSchema.parse(schemaStoreItem));
}

export function schemaStoreItemFromJSON(
  jsonString: string,
): SafeParseResult<SchemaStoreItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SchemaStoreItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SchemaStoreItem' from JSON`,
  );
}
