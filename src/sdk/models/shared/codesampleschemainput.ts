/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { blobLikeSchema } from "../../types/blobs.js";

export type SchemaFile = {
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
  fileName: string;
};

export type CodeSampleSchemaInput = {
  /**
   * A list of languages to generate code samples for
   */
  languages: Array<string>;
  /**
   * The OpenAPI file to be uploaded
   */
  schemaFile: SchemaFile | Blob;
  /**
   * The name of the package
   */
  packageName?: string | undefined;
  /**
   * The SDK class name
   */
  sdkClassName?: string | undefined;
};

/** @internal */
export const SchemaFile$inboundSchema: z.ZodType<
  SchemaFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
  fileName: z.string(),
});

/** @internal */
export type SchemaFile$Outbound = {
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
  fileName: string;
};

/** @internal */
export const SchemaFile$outboundSchema: z.ZodType<
  SchemaFile$Outbound,
  z.ZodTypeDef,
  SchemaFile
> = z.object({
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
  fileName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemaFile$ {
  /** @deprecated use `SchemaFile$inboundSchema` instead. */
  export const inboundSchema = SchemaFile$inboundSchema;
  /** @deprecated use `SchemaFile$outboundSchema` instead. */
  export const outboundSchema = SchemaFile$outboundSchema;
  /** @deprecated use `SchemaFile$Outbound` instead. */
  export type Outbound = SchemaFile$Outbound;
}

/** @internal */
export const CodeSampleSchemaInput$inboundSchema: z.ZodType<
  CodeSampleSchemaInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  languages: z.array(z.string()),
  schema_file: z.lazy(() => SchemaFile$inboundSchema),
  package_name: z.string().optional(),
  sdk_class_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "schema_file": "schemaFile",
    "package_name": "packageName",
    "sdk_class_name": "sdkClassName",
  });
});

/** @internal */
export type CodeSampleSchemaInput$Outbound = {
  languages: Array<string>;
  schema_file: SchemaFile$Outbound | Blob;
  package_name?: string | undefined;
  sdk_class_name?: string | undefined;
};

/** @internal */
export const CodeSampleSchemaInput$outboundSchema: z.ZodType<
  CodeSampleSchemaInput$Outbound,
  z.ZodTypeDef,
  CodeSampleSchemaInput
> = z.object({
  languages: z.array(z.string()),
  schemaFile: z.lazy(() => SchemaFile$outboundSchema).or(blobLikeSchema),
  packageName: z.string().optional(),
  sdkClassName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    schemaFile: "schema_file",
    packageName: "package_name",
    sdkClassName: "sdk_class_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CodeSampleSchemaInput$ {
  /** @deprecated use `CodeSampleSchemaInput$inboundSchema` instead. */
  export const inboundSchema = CodeSampleSchemaInput$inboundSchema;
  /** @deprecated use `CodeSampleSchemaInput$outboundSchema` instead. */
  export const outboundSchema = CodeSampleSchemaInput$outboundSchema;
  /** @deprecated use `CodeSampleSchemaInput$Outbound` instead. */
  export type Outbound = CodeSampleSchemaInput$Outbound;
}
