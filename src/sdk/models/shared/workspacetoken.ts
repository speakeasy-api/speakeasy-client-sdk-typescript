/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

/**
 * A workspace token
 */
export type WorkspaceToken = {
  alg: string;
  createdAt: Date;
  createdBy?: string | null | undefined;
  email?: string | null | undefined;
  id: string;
  key: string;
  lastUsed?: Date | null | undefined;
  name: string;
  workspaceId: string;
};

/** @internal */
export const WorkspaceToken$inboundSchema: z.ZodType<
  WorkspaceToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  alg: z.string(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  created_by: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  id: z.string(),
  key: z.string(),
  last_used: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  name: z.string(),
  workspace_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "created_by": "createdBy",
    "last_used": "lastUsed",
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type WorkspaceToken$Outbound = {
  alg: string;
  created_at: string;
  created_by?: string | null | undefined;
  email?: string | null | undefined;
  id: string;
  key: string;
  last_used?: string | null | undefined;
  name: string;
  workspace_id: string;
};

/** @internal */
export const WorkspaceToken$outboundSchema: z.ZodType<
  WorkspaceToken$Outbound,
  z.ZodTypeDef,
  WorkspaceToken
> = z.object({
  alg: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  createdBy: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  id: z.string(),
  key: z.string(),
  lastUsed: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  name: z.string(),
  workspaceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    createdBy: "created_by",
    lastUsed: "last_used",
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkspaceToken$ {
  /** @deprecated use `WorkspaceToken$inboundSchema` instead. */
  export const inboundSchema = WorkspaceToken$inboundSchema;
  /** @deprecated use `WorkspaceToken$outboundSchema` instead. */
  export const outboundSchema = WorkspaceToken$outboundSchema;
  /** @deprecated use `WorkspaceToken$Outbound` instead. */
  export type Outbound = WorkspaceToken$Outbound;
}
