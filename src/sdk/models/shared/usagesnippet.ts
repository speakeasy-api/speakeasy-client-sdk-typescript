/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UsageSnippet = {
  /**
   * The code snippet
   */
  code: string;
  /**
   * The language of the snippet
   */
  language: string;
  /**
   * The HTTP method of the operation
   */
  method?: any | undefined;
  /**
   * The operation ID for the snippet
   */
  operationId: string;
  /**
   * The path of the operation
   */
  path: string;
};

/** @internal */
export const UsageSnippet$inboundSchema: z.ZodType<
  UsageSnippet,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  language: z.string(),
  method: z.any().optional(),
  operationId: z.string(),
  path: z.string(),
});

/** @internal */
export type UsageSnippet$Outbound = {
  code: string;
  language: string;
  method?: any | undefined;
  operationId: string;
  path: string;
};

/** @internal */
export const UsageSnippet$outboundSchema: z.ZodType<
  UsageSnippet$Outbound,
  z.ZodTypeDef,
  UsageSnippet
> = z.object({
  code: z.string(),
  language: z.string(),
  method: z.any().optional(),
  operationId: z.string(),
  path: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsageSnippet$ {
  /** @deprecated use `UsageSnippet$inboundSchema` instead. */
  export const inboundSchema = UsageSnippet$inboundSchema;
  /** @deprecated use `UsageSnippet$outboundSchema` instead. */
  export const outboundSchema = UsageSnippet$outboundSchema;
  /** @deprecated use `UsageSnippet$Outbound` instead. */
  export type Outbound = UsageSnippet$Outbound;
}

export function usageSnippetToJSON(usageSnippet: UsageSnippet): string {
  return JSON.stringify(UsageSnippet$outboundSchema.parse(usageSnippet));
}

export function usageSnippetFromJSON(
  jsonString: string,
): SafeParseResult<UsageSnippet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsageSnippet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsageSnippet' from JSON`,
  );
}
