/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

export const Type = {
  Linting: "linting",
  Changes: "changes",
} as const;
export type Type = ClosedEnum<typeof Type>;

export type Report = {
  type?: Type | undefined;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const Report$inboundSchema: z.ZodType<Report, z.ZodTypeDef, unknown> = z
  .object({
    type: Type$inboundSchema.optional(),
  });

/** @internal */
export type Report$Outbound = {
  type?: string | undefined;
};

/** @internal */
export const Report$outboundSchema: z.ZodType<
  Report$Outbound,
  z.ZodTypeDef,
  Report
> = z.object({
  type: Type$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Report$ {
  /** @deprecated use `Report$inboundSchema` instead. */
  export const inboundSchema = Report$inboundSchema;
  /** @deprecated use `Report$outboundSchema` instead. */
  export const outboundSchema = Report$outboundSchema;
  /** @deprecated use `Report$Outbound` instead. */
  export type Outbound = Report$Outbound;
}
