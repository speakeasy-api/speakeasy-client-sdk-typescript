/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import {
    InteractionType,
    InteractionType$inboundSchema,
    InteractionType$outboundSchema,
} from "./interactiontype.js";
import * as z from "zod";

export type TargetSDK = {
    /**
     * Remote commit ID.
     */
    commitHead?: string | undefined;
    /**
     * Name of the CI environment.
     */
    continuousIntegrationEnvironment?: string | undefined;
    /**
     * Error message if the last event was not successful.
     */
    error?: string | undefined;
    /**
     * Version of the generated target (post generation)
     */
    generateConfigPostVersion?: string | undefined;
    /**
     * Eligible feature set during generation
     */
    generateEligibleFeatures?: string | undefined;
    /**
     * gen.lock ID (expected to be a uuid). The same as `id`. A unique identifier for the target.
     */
    generateGenLockId: string;
    /**
     * Features prior to generation
     */
    generateGenLockPreFeatures?: string | undefined;
    /**
     * Artifact version for the Previous Generation
     */
    generateGenLockPreVersion?: string | undefined;
    /**
     * The number of operations ignored in generation.
     */
    generateNumberOfOperationsIgnored?: number | undefined;
    /**
     * The number of operations used in generation.
     */
    generateNumberOfOperationsUsed?: number | undefined;
    /**
     * Indicates whether the target was considered published.
     */
    generatePublished?: boolean | undefined;
    /**
     * eg `typescript`, `terraform`, `python`
     */
    generateTarget: string;
    /**
     * The workflow name of the target.
     */
    generateTargetName?: string | undefined;
    /**
     * The version of the Speakeasy generator for this target eg v2 of the typescript generator.
     */
    generateTargetVersion?: string | undefined;
    /**
     * GitHub organization of the action.
     */
    ghActionOrganization?: string | undefined;
    /**
     * GitHub Action ref value.
     */
    ghActionRef?: string | undefined;
    /**
     * GitHub repository of the action.
     */
    ghActionRepository?: string | undefined;
    /**
     * Link to the GitHub action run.
     */
    ghActionRunLink?: string | undefined;
    /**
     * Version of the GitHub action.
     */
    ghActionVersion?: string | undefined;
    /**
     * Current working directory relative to the git root.
     */
    gitRelativeCwd?: string | undefined;
    /**
     * Default owner for git remote.
     */
    gitRemoteDefaultOwner?: string | undefined;
    /**
     * Default repository name for git remote.
     */
    gitRemoteDefaultRepo?: string | undefined;
    /**
     * User email from git configuration.
     */
    gitUserEmail?: string | undefined;
    /**
     * User's name from git configuration. (not GitHub username)
     */
    gitUserName?: string | undefined;
    /**
     * Remote hostname.
     */
    hostname?: string | undefined;
    /**
     * Unique identifier of the target the same as `generate_gen_lock_id`
     */
    id: string;
    /**
     * Timestamp when the event was created in the database.
     */
    lastEventCreatedAt: Date;
    /**
     * Unique identifier of the last event for the target
     */
    lastEventId: string;
    /**
     * Type of interaction.
     */
    lastEventInteractionType: InteractionType;
    /**
     * Label of the git repository.
     */
    repoLabel?: string | undefined;
    /**
     * The blob digest of the source.
     */
    sourceBlobDigest?: string | undefined;
    /**
     * The namespace name of the source.
     */
    sourceNamespaceName?: string | undefined;
    /**
     * The revision digest of the source.
     */
    sourceRevisionDigest?: string | undefined;
    /**
     * Indicates whether the event was successful.
     */
    success?: boolean | undefined;
    /**
     * Workflow file (post execution)
     */
    workflowPostRaw?: string | undefined;
    /**
     * Workflow file (prior to execution)
     */
    workflowPreRaw?: string | undefined;
};

/** @internal */
export const TargetSDK$inboundSchema: z.ZodType<TargetSDK, z.ZodTypeDef, unknown> = z
    .object({
        commit_head: z.string().optional(),
        continuous_integration_environment: z.string().optional(),
        error: z.string().optional(),
        generate_config_post_version: z.string().optional(),
        generate_eligible_features: z.string().optional(),
        generate_gen_lock_id: z.string(),
        generate_gen_lock_pre_features: z.string().optional(),
        generate_gen_lock_pre_version: z.string().optional(),
        generate_number_of_operations_ignored: z.number().int().optional(),
        generate_number_of_operations_used: z.number().int().optional(),
        generate_published: z.boolean().optional(),
        generate_target: z.string(),
        generate_target_name: z.string().optional(),
        generate_target_version: z.string().optional(),
        gh_action_organization: z.string().optional(),
        gh_action_ref: z.string().optional(),
        gh_action_repository: z.string().optional(),
        gh_action_run_link: z.string().optional(),
        gh_action_version: z.string().optional(),
        git_relative_cwd: z.string().optional(),
        git_remote_default_owner: z.string().optional(),
        git_remote_default_repo: z.string().optional(),
        git_user_email: z.string().optional(),
        git_user_name: z.string().optional(),
        hostname: z.string().optional(),
        id: z.string(),
        last_event_created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        last_event_id: z.string(),
        last_event_interaction_type: InteractionType$inboundSchema,
        repo_label: z.string().optional(),
        source_blob_digest: z.string().optional(),
        source_namespace_name: z.string().optional(),
        source_revision_digest: z.string().optional(),
        success: z.boolean().optional(),
        workflow_post_raw: z.string().optional(),
        workflow_pre_raw: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            commit_head: "commitHead",
            continuous_integration_environment: "continuousIntegrationEnvironment",
            generate_config_post_version: "generateConfigPostVersion",
            generate_eligible_features: "generateEligibleFeatures",
            generate_gen_lock_id: "generateGenLockId",
            generate_gen_lock_pre_features: "generateGenLockPreFeatures",
            generate_gen_lock_pre_version: "generateGenLockPreVersion",
            generate_number_of_operations_ignored: "generateNumberOfOperationsIgnored",
            generate_number_of_operations_used: "generateNumberOfOperationsUsed",
            generate_published: "generatePublished",
            generate_target: "generateTarget",
            generate_target_name: "generateTargetName",
            generate_target_version: "generateTargetVersion",
            gh_action_organization: "ghActionOrganization",
            gh_action_ref: "ghActionRef",
            gh_action_repository: "ghActionRepository",
            gh_action_run_link: "ghActionRunLink",
            gh_action_version: "ghActionVersion",
            git_relative_cwd: "gitRelativeCwd",
            git_remote_default_owner: "gitRemoteDefaultOwner",
            git_remote_default_repo: "gitRemoteDefaultRepo",
            git_user_email: "gitUserEmail",
            git_user_name: "gitUserName",
            last_event_created_at: "lastEventCreatedAt",
            last_event_id: "lastEventId",
            last_event_interaction_type: "lastEventInteractionType",
            repo_label: "repoLabel",
            source_blob_digest: "sourceBlobDigest",
            source_namespace_name: "sourceNamespaceName",
            source_revision_digest: "sourceRevisionDigest",
            workflow_post_raw: "workflowPostRaw",
            workflow_pre_raw: "workflowPreRaw",
        });
    });

/** @internal */
export type TargetSDK$Outbound = {
    commit_head?: string | undefined;
    continuous_integration_environment?: string | undefined;
    error?: string | undefined;
    generate_config_post_version?: string | undefined;
    generate_eligible_features?: string | undefined;
    generate_gen_lock_id: string;
    generate_gen_lock_pre_features?: string | undefined;
    generate_gen_lock_pre_version?: string | undefined;
    generate_number_of_operations_ignored?: number | undefined;
    generate_number_of_operations_used?: number | undefined;
    generate_published?: boolean | undefined;
    generate_target: string;
    generate_target_name?: string | undefined;
    generate_target_version?: string | undefined;
    gh_action_organization?: string | undefined;
    gh_action_ref?: string | undefined;
    gh_action_repository?: string | undefined;
    gh_action_run_link?: string | undefined;
    gh_action_version?: string | undefined;
    git_relative_cwd?: string | undefined;
    git_remote_default_owner?: string | undefined;
    git_remote_default_repo?: string | undefined;
    git_user_email?: string | undefined;
    git_user_name?: string | undefined;
    hostname?: string | undefined;
    id: string;
    last_event_created_at: string;
    last_event_id: string;
    last_event_interaction_type: string;
    repo_label?: string | undefined;
    source_blob_digest?: string | undefined;
    source_namespace_name?: string | undefined;
    source_revision_digest?: string | undefined;
    success?: boolean | undefined;
    workflow_post_raw?: string | undefined;
    workflow_pre_raw?: string | undefined;
};

/** @internal */
export const TargetSDK$outboundSchema: z.ZodType<TargetSDK$Outbound, z.ZodTypeDef, TargetSDK> = z
    .object({
        commitHead: z.string().optional(),
        continuousIntegrationEnvironment: z.string().optional(),
        error: z.string().optional(),
        generateConfigPostVersion: z.string().optional(),
        generateEligibleFeatures: z.string().optional(),
        generateGenLockId: z.string(),
        generateGenLockPreFeatures: z.string().optional(),
        generateGenLockPreVersion: z.string().optional(),
        generateNumberOfOperationsIgnored: z.number().int().optional(),
        generateNumberOfOperationsUsed: z.number().int().optional(),
        generatePublished: z.boolean().optional(),
        generateTarget: z.string(),
        generateTargetName: z.string().optional(),
        generateTargetVersion: z.string().optional(),
        ghActionOrganization: z.string().optional(),
        ghActionRef: z.string().optional(),
        ghActionRepository: z.string().optional(),
        ghActionRunLink: z.string().optional(),
        ghActionVersion: z.string().optional(),
        gitRelativeCwd: z.string().optional(),
        gitRemoteDefaultOwner: z.string().optional(),
        gitRemoteDefaultRepo: z.string().optional(),
        gitUserEmail: z.string().optional(),
        gitUserName: z.string().optional(),
        hostname: z.string().optional(),
        id: z.string(),
        lastEventCreatedAt: z.date().transform((v) => v.toISOString()),
        lastEventId: z.string(),
        lastEventInteractionType: InteractionType$outboundSchema,
        repoLabel: z.string().optional(),
        sourceBlobDigest: z.string().optional(),
        sourceNamespaceName: z.string().optional(),
        sourceRevisionDigest: z.string().optional(),
        success: z.boolean().optional(),
        workflowPostRaw: z.string().optional(),
        workflowPreRaw: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            commitHead: "commit_head",
            continuousIntegrationEnvironment: "continuous_integration_environment",
            generateConfigPostVersion: "generate_config_post_version",
            generateEligibleFeatures: "generate_eligible_features",
            generateGenLockId: "generate_gen_lock_id",
            generateGenLockPreFeatures: "generate_gen_lock_pre_features",
            generateGenLockPreVersion: "generate_gen_lock_pre_version",
            generateNumberOfOperationsIgnored: "generate_number_of_operations_ignored",
            generateNumberOfOperationsUsed: "generate_number_of_operations_used",
            generatePublished: "generate_published",
            generateTarget: "generate_target",
            generateTargetName: "generate_target_name",
            generateTargetVersion: "generate_target_version",
            ghActionOrganization: "gh_action_organization",
            ghActionRef: "gh_action_ref",
            ghActionRepository: "gh_action_repository",
            ghActionRunLink: "gh_action_run_link",
            ghActionVersion: "gh_action_version",
            gitRelativeCwd: "git_relative_cwd",
            gitRemoteDefaultOwner: "git_remote_default_owner",
            gitRemoteDefaultRepo: "git_remote_default_repo",
            gitUserEmail: "git_user_email",
            gitUserName: "git_user_name",
            lastEventCreatedAt: "last_event_created_at",
            lastEventId: "last_event_id",
            lastEventInteractionType: "last_event_interaction_type",
            repoLabel: "repo_label",
            sourceBlobDigest: "source_blob_digest",
            sourceNamespaceName: "source_namespace_name",
            sourceRevisionDigest: "source_revision_digest",
            workflowPostRaw: "workflow_post_raw",
            workflowPreRaw: "workflow_pre_raw",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TargetSDK$ {
    /** @deprecated use `TargetSDK$inboundSchema` instead. */
    export const inboundSchema = TargetSDK$inboundSchema;
    /** @deprecated use `TargetSDK$outboundSchema` instead. */
    export const outboundSchema = TargetSDK$outboundSchema;
    /** @deprecated use `TargetSDK$Outbound` instead. */
    export type Outbound = TargetSDK$Outbound;
}
