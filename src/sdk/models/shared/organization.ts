/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const OrganizationAccountType = {
    Free: "free",
    ScaleUp: "scale-up",
    Enterprise: "enterprise",
} as const;
export type OrganizationAccountType = ClosedEnum<typeof OrganizationAccountType>;

/**
 * A speakeasy organization
 */
export type Organization = {
    accountType: OrganizationAccountType;
    createdAt?: Date | undefined;
    freeTrialExpiry?: Date | undefined;
    id: string;
    name: string;
    slug?: string | undefined;
    telemetryDisabled: boolean;
    updatedAt?: Date | undefined;
};

/** @internal */
export const OrganizationAccountType$inboundSchema: z.ZodNativeEnum<
    typeof OrganizationAccountType
> = z.nativeEnum(OrganizationAccountType);

/** @internal */
export const OrganizationAccountType$outboundSchema: z.ZodNativeEnum<
    typeof OrganizationAccountType
> = OrganizationAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationAccountType$ {
    /** @deprecated use `OrganizationAccountType$inboundSchema` instead. */
    export const inboundSchema = OrganizationAccountType$inboundSchema;
    /** @deprecated use `OrganizationAccountType$outboundSchema` instead. */
    export const outboundSchema = OrganizationAccountType$outboundSchema;
}

/** @internal */
export const Organization$inboundSchema: z.ZodType<Organization, z.ZodTypeDef, unknown> = z
    .object({
        account_type: OrganizationAccountType$inboundSchema,
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        free_trial_expiry: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        id: z.string(),
        name: z.string(),
        slug: z.string().optional(),
        telemetry_disabled: z.boolean(),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            account_type: "accountType",
            created_at: "createdAt",
            free_trial_expiry: "freeTrialExpiry",
            telemetry_disabled: "telemetryDisabled",
            updated_at: "updatedAt",
        });
    });

/** @internal */
export type Organization$Outbound = {
    account_type: string;
    created_at?: string | undefined;
    free_trial_expiry?: string | undefined;
    id: string;
    name: string;
    slug?: string | undefined;
    telemetry_disabled: boolean;
    updated_at?: string | undefined;
};

/** @internal */
export const Organization$outboundSchema: z.ZodType<
    Organization$Outbound,
    z.ZodTypeDef,
    Organization
> = z
    .object({
        accountType: OrganizationAccountType$outboundSchema,
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        freeTrialExpiry: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        id: z.string(),
        name: z.string(),
        slug: z.string().optional(),
        telemetryDisabled: z.boolean(),
        updatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            accountType: "account_type",
            createdAt: "created_at",
            freeTrialExpiry: "free_trial_expiry",
            telemetryDisabled: "telemetry_disabled",
            updatedAt: "updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Organization$ {
    /** @deprecated use `Organization$inboundSchema` instead. */
    export const inboundSchema = Organization$inboundSchema;
    /** @deprecated use `Organization$outboundSchema` instead. */
    export const outboundSchema = Organization$outboundSchema;
    /** @deprecated use `Organization$Outbound` instead. */
    export type Outbound = Organization$Outbound;
}
