/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import {
  AccountType,
  AccountType$inboundSchema,
  AccountType$outboundSchema,
} from "./accounttype.js";

/**
 * A speakeasy organization
 */
export type Organization = {
  accountType: AccountType;
  createdAt: Date;
  freeTrialExpiry?: Date | null | undefined;
  id: string;
  name: string;
  slug: string;
  telemetryDisabled: boolean;
  updatedAt: Date;
};

/** @internal */
export const Organization$inboundSchema: z.ZodType<
  Organization,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_type: AccountType$inboundSchema,
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  free_trial_expiry: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  telemetry_disabled: z.boolean(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "account_type": "accountType",
    "created_at": "createdAt",
    "free_trial_expiry": "freeTrialExpiry",
    "telemetry_disabled": "telemetryDisabled",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type Organization$Outbound = {
  account_type: string;
  created_at: string;
  free_trial_expiry?: string | null | undefined;
  id: string;
  name: string;
  slug: string;
  telemetry_disabled: boolean;
  updated_at: string;
};

/** @internal */
export const Organization$outboundSchema: z.ZodType<
  Organization$Outbound,
  z.ZodTypeDef,
  Organization
> = z.object({
  accountType: AccountType$outboundSchema,
  createdAt: z.date().transform(v => v.toISOString()),
  freeTrialExpiry: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  telemetryDisabled: z.boolean(),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    accountType: "account_type",
    createdAt: "created_at",
    freeTrialExpiry: "free_trial_expiry",
    telemetryDisabled: "telemetry_disabled",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Organization$ {
  /** @deprecated use `Organization$inboundSchema` instead. */
  export const inboundSchema = Organization$inboundSchema;
  /** @deprecated use `Organization$outboundSchema` instead. */
  export const outboundSchema = Organization$outboundSchema;
  /** @deprecated use `Organization$Outbound` instead. */
  export type Outbound = Organization$Outbound;
}
