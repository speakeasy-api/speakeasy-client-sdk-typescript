/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

/**
 * An Api is representation of a API (a collection of API Endpoints) within the Speakeasy Platform.
 */
export type Api = {
  /**
   * The ID of this Api. This is a human-readable name (subject to change).
   */
  apiId: string;
  /**
   * Creation timestamp.
   */
  createdAt: Date;
  /**
   * A detailed description of the Api.
   */
  description: string;
  /**
   * Determines if all the endpoints within the Api are found in the OpenAPI spec associated with the Api.
   */
  matched?: boolean | undefined;
  /**
   * A set of values associated with a meta_data key. This field is only set on get requests.
   */
  metaData?: { [k: string]: Array<string> } | undefined;
  /**
   * Last update timestamp.
   */
  updatedAt: Date;
  /**
   * The version ID of this Api. This is semantic version identifier.
   */
  versionId: string;
  /**
   * The workspace ID this Api belongs to.
   */
  workspaceId: string;
};

/** @internal */
export const Api$inboundSchema: z.ZodType<Api, z.ZodTypeDef, unknown> = z
  .object({
    api_id: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    description: z.string(),
    matched: z.boolean().optional(),
    meta_data: z.record(z.array(z.string())).optional(),
    updated_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    version_id: z.string(),
    workspace_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "api_id": "apiId",
      "created_at": "createdAt",
      "meta_data": "metaData",
      "updated_at": "updatedAt",
      "version_id": "versionId",
      "workspace_id": "workspaceId",
    });
  });

/** @internal */
export type Api$Outbound = {
  api_id: string;
  created_at: string;
  description: string;
  matched?: boolean | undefined;
  meta_data?: { [k: string]: Array<string> } | undefined;
  updated_at: string;
  version_id: string;
  workspace_id: string;
};

/** @internal */
export const Api$outboundSchema: z.ZodType<Api$Outbound, z.ZodTypeDef, Api> = z
  .object({
    apiId: z.string(),
    createdAt: z.date().transform(v => v.toISOString()),
    description: z.string(),
    matched: z.boolean().optional(),
    metaData: z.record(z.array(z.string())).optional(),
    updatedAt: z.date().transform(v => v.toISOString()),
    versionId: z.string(),
    workspaceId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      apiId: "api_id",
      createdAt: "created_at",
      metaData: "meta_data",
      updatedAt: "updated_at",
      versionId: "version_id",
      workspaceId: "workspace_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Api$ {
  /** @deprecated use `Api$inboundSchema` instead. */
  export const inboundSchema = Api$inboundSchema;
  /** @deprecated use `Api$outboundSchema` instead. */
  export const outboundSchema = Api$outboundSchema;
  /** @deprecated use `Api$Outbound` instead. */
  export type Outbound = Api$Outbound;
}
