/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A relative diff between the current revision and the previous revision.
 */
export type RelativeDiff = {
  /**
   * The number of lines added against the previous revision
   */
  addedLines?: number | undefined;
  /**
   * The number of lines removed against the previous revision
   */
  removedLines?: number | undefined;
};

/** @internal */
export const RelativeDiff$inboundSchema: z.ZodType<
  RelativeDiff,
  z.ZodTypeDef,
  unknown
> = z.object({
  added_lines: z.number().int().optional(),
  removed_lines: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "added_lines": "addedLines",
    "removed_lines": "removedLines",
  });
});

/** @internal */
export type RelativeDiff$Outbound = {
  added_lines?: number | undefined;
  removed_lines?: number | undefined;
};

/** @internal */
export const RelativeDiff$outboundSchema: z.ZodType<
  RelativeDiff$Outbound,
  z.ZodTypeDef,
  RelativeDiff
> = z.object({
  addedLines: z.number().int().optional(),
  removedLines: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    addedLines: "added_lines",
    removedLines: "removed_lines",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RelativeDiff$ {
  /** @deprecated use `RelativeDiff$inboundSchema` instead. */
  export const inboundSchema = RelativeDiff$inboundSchema;
  /** @deprecated use `RelativeDiff$outboundSchema` instead. */
  export const outboundSchema = RelativeDiff$outboundSchema;
  /** @deprecated use `RelativeDiff$Outbound` instead. */
  export type Outbound = RelativeDiff$Outbound;
}

export function relativeDiffToJSON(relativeDiff: RelativeDiff): string {
  return JSON.stringify(RelativeDiff$outboundSchema.parse(relativeDiff));
}

export function relativeDiffFromJSON(
  jsonString: string,
): SafeParseResult<RelativeDiff, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RelativeDiff$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RelativeDiff' from JSON`,
  );
}
