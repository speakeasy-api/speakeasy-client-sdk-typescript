/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
    FeatureFlag,
    FeatureFlag$inboundSchema,
    FeatureFlag$Outbound,
    FeatureFlag$outboundSchema,
} from "./featureflag.js";
import * as z from "zod";

export type Claims = {};

export type AccessTokenUser = {
    admin?: boolean | undefined;
    createdAt?: Date | undefined;
    displayName?: string | undefined;
    email?: string | undefined;
    emailVerified?: boolean | undefined;
    id?: string | undefined;
};

export const AccessTokenAccountType = {
    Free: "free",
    ScaleUp: "scale-up",
    Enterprise: "enterprise",
} as const;
export type AccessTokenAccountType = ClosedEnum<typeof AccessTokenAccountType>;

export type Workspaces = {
    accountType?: AccessTokenAccountType | undefined;
    id?: string | undefined;
    name?: string | undefined;
    updatedAt?: Date | undefined;
};

/**
 * An AccessToken is a token that can be used to authenticate with the Speakeasy API.
 */
export type AccessToken = {
    accessToken: string;
    claims: Claims;
    featureFlags?: Array<FeatureFlag> | undefined;
    user: AccessTokenUser;
    workspaces?: Array<Workspaces> | undefined;
};

/** @internal */
export const Claims$inboundSchema: z.ZodType<Claims, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type Claims$Outbound = {};

/** @internal */
export const Claims$outboundSchema: z.ZodType<Claims$Outbound, z.ZodTypeDef, Claims> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Claims$ {
    /** @deprecated use `Claims$inboundSchema` instead. */
    export const inboundSchema = Claims$inboundSchema;
    /** @deprecated use `Claims$outboundSchema` instead. */
    export const outboundSchema = Claims$outboundSchema;
    /** @deprecated use `Claims$Outbound` instead. */
    export type Outbound = Claims$Outbound;
}

/** @internal */
export const AccessTokenUser$inboundSchema: z.ZodType<AccessTokenUser, z.ZodTypeDef, unknown> = z
    .object({
        admin: z.boolean().optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        display_name: z.string().optional(),
        email: z.string().optional(),
        email_verified: z.boolean().optional(),
        id: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
            display_name: "displayName",
            email_verified: "emailVerified",
        });
    });

/** @internal */
export type AccessTokenUser$Outbound = {
    admin?: boolean | undefined;
    created_at?: string | undefined;
    display_name?: string | undefined;
    email?: string | undefined;
    email_verified?: boolean | undefined;
    id?: string | undefined;
};

/** @internal */
export const AccessTokenUser$outboundSchema: z.ZodType<
    AccessTokenUser$Outbound,
    z.ZodTypeDef,
    AccessTokenUser
> = z
    .object({
        admin: z.boolean().optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        displayName: z.string().optional(),
        email: z.string().optional(),
        emailVerified: z.boolean().optional(),
        id: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
            displayName: "display_name",
            emailVerified: "email_verified",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessTokenUser$ {
    /** @deprecated use `AccessTokenUser$inboundSchema` instead. */
    export const inboundSchema = AccessTokenUser$inboundSchema;
    /** @deprecated use `AccessTokenUser$outboundSchema` instead. */
    export const outboundSchema = AccessTokenUser$outboundSchema;
    /** @deprecated use `AccessTokenUser$Outbound` instead. */
    export type Outbound = AccessTokenUser$Outbound;
}

/** @internal */
export const AccessTokenAccountType$inboundSchema: z.ZodNativeEnum<typeof AccessTokenAccountType> =
    z.nativeEnum(AccessTokenAccountType);

/** @internal */
export const AccessTokenAccountType$outboundSchema: z.ZodNativeEnum<typeof AccessTokenAccountType> =
    AccessTokenAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessTokenAccountType$ {
    /** @deprecated use `AccessTokenAccountType$inboundSchema` instead. */
    export const inboundSchema = AccessTokenAccountType$inboundSchema;
    /** @deprecated use `AccessTokenAccountType$outboundSchema` instead. */
    export const outboundSchema = AccessTokenAccountType$outboundSchema;
}

/** @internal */
export const Workspaces$inboundSchema: z.ZodType<Workspaces, z.ZodTypeDef, unknown> = z
    .object({
        account_type: AccessTokenAccountType$inboundSchema.optional(),
        id: z.string().optional(),
        name: z.string().optional(),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            account_type: "accountType",
            updated_at: "updatedAt",
        });
    });

/** @internal */
export type Workspaces$Outbound = {
    account_type?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    updated_at?: string | undefined;
};

/** @internal */
export const Workspaces$outboundSchema: z.ZodType<Workspaces$Outbound, z.ZodTypeDef, Workspaces> = z
    .object({
        accountType: AccessTokenAccountType$outboundSchema.optional(),
        id: z.string().optional(),
        name: z.string().optional(),
        updatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            accountType: "account_type",
            updatedAt: "updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Workspaces$ {
    /** @deprecated use `Workspaces$inboundSchema` instead. */
    export const inboundSchema = Workspaces$inboundSchema;
    /** @deprecated use `Workspaces$outboundSchema` instead. */
    export const outboundSchema = Workspaces$outboundSchema;
    /** @deprecated use `Workspaces$Outbound` instead. */
    export type Outbound = Workspaces$Outbound;
}

/** @internal */
export const AccessToken$inboundSchema: z.ZodType<AccessToken, z.ZodTypeDef, unknown> = z
    .object({
        access_token: z.string(),
        claims: z.lazy(() => Claims$inboundSchema),
        feature_flags: z.array(FeatureFlag$inboundSchema).optional(),
        user: z.lazy(() => AccessTokenUser$inboundSchema),
        workspaces: z.array(z.lazy(() => Workspaces$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            access_token: "accessToken",
            feature_flags: "featureFlags",
        });
    });

/** @internal */
export type AccessToken$Outbound = {
    access_token: string;
    claims: Claims$Outbound;
    feature_flags?: Array<FeatureFlag$Outbound> | undefined;
    user: AccessTokenUser$Outbound;
    workspaces?: Array<Workspaces$Outbound> | undefined;
};

/** @internal */
export const AccessToken$outboundSchema: z.ZodType<
    AccessToken$Outbound,
    z.ZodTypeDef,
    AccessToken
> = z
    .object({
        accessToken: z.string(),
        claims: z.lazy(() => Claims$outboundSchema),
        featureFlags: z.array(FeatureFlag$outboundSchema).optional(),
        user: z.lazy(() => AccessTokenUser$outboundSchema),
        workspaces: z.array(z.lazy(() => Workspaces$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            accessToken: "access_token",
            featureFlags: "feature_flags",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessToken$ {
    /** @deprecated use `AccessToken$inboundSchema` instead. */
    export const inboundSchema = AccessToken$inboundSchema;
    /** @deprecated use `AccessToken$outboundSchema` instead. */
    export const outboundSchema = AccessToken$outboundSchema;
    /** @deprecated use `AccessToken$Outbound` instead. */
    export type Outbound = AccessToken$Outbound;
}
