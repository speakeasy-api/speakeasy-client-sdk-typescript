/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

/**
 * An ApiEndpoint is a description of an Endpoint for an API.
 */
export type ApiEndpoint = {
  /**
   * The ID of this ApiEndpoint. This is a hash of the method and path.
   */
  apiEndpointId: string;
  /**
   * The ID of the Api this ApiEndpoint belongs to.
   */
  apiId: string;
  /**
   * Creation timestamp.
   */
  createdAt: Date;
  /**
   * A detailed description of the ApiEndpoint.
   */
  description: string;
  /**
   * A human-readable name for the ApiEndpoint.
   */
  displayName: string;
  /**
   * Determines if the endpoint was found in the OpenAPI spec associated with the parent Api.
   */
  matched?: boolean | undefined;
  /**
   * HTTP verb.
   */
  method: string;
  /**
   * Path that handles this Api.
   */
  path: string;
  /**
   * Last update timestamp.
   */
  updatedAt: Date;
  /**
   * The version ID of the Api this ApiEndpoint belongs to.
   */
  versionId: string;
  /**
   * The workspace ID this ApiEndpoint belongs to.
   */
  workspaceId: string;
};

/** @internal */
export const ApiEndpoint$inboundSchema: z.ZodType<
  ApiEndpoint,
  z.ZodTypeDef,
  unknown
> = z.object({
  api_endpoint_id: z.string(),
  api_id: z.string(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  description: z.string(),
  display_name: z.string(),
  matched: z.boolean().optional(),
  method: z.string(),
  path: z.string(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  version_id: z.string(),
  workspace_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "api_endpoint_id": "apiEndpointId",
    "api_id": "apiId",
    "created_at": "createdAt",
    "display_name": "displayName",
    "updated_at": "updatedAt",
    "version_id": "versionId",
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type ApiEndpoint$Outbound = {
  api_endpoint_id: string;
  api_id: string;
  created_at: string;
  description: string;
  display_name: string;
  matched?: boolean | undefined;
  method: string;
  path: string;
  updated_at: string;
  version_id: string;
  workspace_id: string;
};

/** @internal */
export const ApiEndpoint$outboundSchema: z.ZodType<
  ApiEndpoint$Outbound,
  z.ZodTypeDef,
  ApiEndpoint
> = z.object({
  apiEndpointId: z.string(),
  apiId: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  description: z.string(),
  displayName: z.string(),
  matched: z.boolean().optional(),
  method: z.string(),
  path: z.string(),
  updatedAt: z.date().transform(v => v.toISOString()),
  versionId: z.string(),
  workspaceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    apiEndpointId: "api_endpoint_id",
    apiId: "api_id",
    createdAt: "created_at",
    displayName: "display_name",
    updatedAt: "updated_at",
    versionId: "version_id",
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiEndpoint$ {
  /** @deprecated use `ApiEndpoint$inboundSchema` instead. */
  export const inboundSchema = ApiEndpoint$inboundSchema;
  /** @deprecated use `ApiEndpoint$outboundSchema` instead. */
  export const outboundSchema = ApiEndpoint$outboundSchema;
  /** @deprecated use `ApiEndpoint$Outbound` instead. */
  export type Outbound = ApiEndpoint$Outbound;
}
