/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

/**
 * A speakeasy workspace
 */
export type Workspace = {
    createdAt: Date;
    id: string;
    name: string;
    ociRepo?: string | undefined;
    ociRepoCreatedAt?: Date | undefined;
    organizationId: string;
    slug: string;
    telemetryDisabled: boolean;
    updatedAt: Date;
    verified: boolean;
};

/** @internal */
export const Workspace$inboundSchema: z.ZodType<Workspace, z.ZodTypeDef, unknown> = z
    .object({
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        id: z.string(),
        name: z.string(),
        oci_repo: z.string().optional(),
        oci_repo_created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        organization_id: z.string(),
        slug: z.string(),
        telemetry_disabled: z.boolean(),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        verified: z.boolean(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
            oci_repo: "ociRepo",
            oci_repo_created_at: "ociRepoCreatedAt",
            organization_id: "organizationId",
            telemetry_disabled: "telemetryDisabled",
            updated_at: "updatedAt",
        });
    });

/** @internal */
export type Workspace$Outbound = {
    created_at: string;
    id: string;
    name: string;
    oci_repo?: string | undefined;
    oci_repo_created_at?: string | undefined;
    organization_id: string;
    slug: string;
    telemetry_disabled: boolean;
    updated_at: string;
    verified: boolean;
};

/** @internal */
export const Workspace$outboundSchema: z.ZodType<Workspace$Outbound, z.ZodTypeDef, Workspace> = z
    .object({
        createdAt: z.date().transform((v) => v.toISOString()),
        id: z.string(),
        name: z.string(),
        ociRepo: z.string().optional(),
        ociRepoCreatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        organizationId: z.string(),
        slug: z.string(),
        telemetryDisabled: z.boolean(),
        updatedAt: z.date().transform((v) => v.toISOString()),
        verified: z.boolean(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
            ociRepo: "oci_repo",
            ociRepoCreatedAt: "oci_repo_created_at",
            organizationId: "organization_id",
            telemetryDisabled: "telemetry_disabled",
            updatedAt: "updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Workspace$ {
    /** @deprecated use `Workspace$inboundSchema` instead. */
    export const inboundSchema = Workspace$inboundSchema;
    /** @deprecated use `Workspace$outboundSchema` instead. */
    export const outboundSchema = Workspace$outboundSchema;
    /** @deprecated use `Workspace$Outbound` instead. */
    export type Outbound = Workspace$Outbound;
}
