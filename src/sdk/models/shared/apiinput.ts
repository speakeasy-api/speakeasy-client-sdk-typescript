/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

/**
 * An Api is representation of a API (a collection of API Endpoints) within the Speakeasy Platform.
 */
export type ApiInput = {
  /**
   * The ID of this Api. This is a human-readable name (subject to change).
   */
  apiId: string;
  /**
   * A detailed description of the Api.
   */
  description: string;
  /**
   * A set of values associated with a meta_data key. This field is only set on get requests.
   */
  metaData?: { [k: string]: Array<string> } | undefined;
  /**
   * The version ID of this Api. This is semantic version identifier.
   */
  versionId: string;
};

/** @internal */
export const ApiInput$inboundSchema: z.ZodType<
  ApiInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  api_id: z.string(),
  description: z.string(),
  meta_data: z.record(z.array(z.string())).optional(),
  version_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "api_id": "apiId",
    "meta_data": "metaData",
    "version_id": "versionId",
  });
});

/** @internal */
export type ApiInput$Outbound = {
  api_id: string;
  description: string;
  meta_data?: { [k: string]: Array<string> } | undefined;
  version_id: string;
};

/** @internal */
export const ApiInput$outboundSchema: z.ZodType<
  ApiInput$Outbound,
  z.ZodTypeDef,
  ApiInput
> = z.object({
  apiId: z.string(),
  description: z.string(),
  metaData: z.record(z.array(z.string())).optional(),
  versionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    apiId: "api_id",
    metaData: "meta_data",
    versionId: "version_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiInput$ {
  /** @deprecated use `ApiInput$inboundSchema` instead. */
  export const inboundSchema = ApiInput$inboundSchema;
  /** @deprecated use `ApiInput$outboundSchema` instead. */
  export const outboundSchema = ApiInput$outboundSchema;
  /** @deprecated use `ApiInput$Outbound` instead. */
  export type Outbound = ApiInput$Outbound;
}
