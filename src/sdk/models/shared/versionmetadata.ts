/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

/**
 * A set of keys and associated values, attached to a particular version of an Api.
 */
export type VersionMetadata = {
  /**
   * The ID of the Api this Metadata belongs to.
   */
  apiId: string;
  /**
   * Creation timestamp.
   */
  createdAt: Date;
  /**
   * The key for this metadata.
   */
  metaKey: string;
  /**
   * One of the values for this metadata.
   */
  metaValue: string;
  /**
   * The version ID of the Api this Metadata belongs to.
   */
  versionId: string;
  /**
   * The workspace ID this Metadata belongs to.
   */
  workspaceId: string;
};

/** @internal */
export const VersionMetadata$inboundSchema: z.ZodType<
  VersionMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  api_id: z.string(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  meta_key: z.string(),
  meta_value: z.string(),
  version_id: z.string(),
  workspace_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "api_id": "apiId",
    "created_at": "createdAt",
    "meta_key": "metaKey",
    "meta_value": "metaValue",
    "version_id": "versionId",
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type VersionMetadata$Outbound = {
  api_id: string;
  created_at: string;
  meta_key: string;
  meta_value: string;
  version_id: string;
  workspace_id: string;
};

/** @internal */
export const VersionMetadata$outboundSchema: z.ZodType<
  VersionMetadata$Outbound,
  z.ZodTypeDef,
  VersionMetadata
> = z.object({
  apiId: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  metaKey: z.string(),
  metaValue: z.string(),
  versionId: z.string(),
  workspaceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    apiId: "api_id",
    createdAt: "created_at",
    metaKey: "meta_key",
    metaValue: "meta_value",
    versionId: "version_id",
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VersionMetadata$ {
  /** @deprecated use `VersionMetadata$inboundSchema` instead. */
  export const inboundSchema = VersionMetadata$inboundSchema;
  /** @deprecated use `VersionMetadata$outboundSchema` instead. */
  export const outboundSchema = VersionMetadata$outboundSchema;
  /** @deprecated use `VersionMetadata$Outbound` instead. */
  export type Outbound = VersionMetadata$Outbound;
}
