/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type ValueChange = {
  /**
   * Represents the previous value of the element.
   */
  from: string;
  /**
   * Represents the current value of the element.
   */
  to: string;
};

/**
 * A SchemaDiff represents a diff of two Schemas.
 */
export type SchemaDiff = {
  /**
   * Holds every addition change in the diff.
   */
  additions: Array<string>;
  /**
   * Holds every deletion change in the diff.
   */
  deletions: Array<string>;
  /**
   * Holds every modification change in the diff.
   */
  modifications: { [k: string]: ValueChange };
};

/** @internal */
export const ValueChange$inboundSchema: z.ZodType<
  ValueChange,
  z.ZodTypeDef,
  unknown
> = z.object({
  From: z.string(),
  To: z.string(),
}).transform((v) => {
  return remap$(v, {
    "From": "from",
    "To": "to",
  });
});

/** @internal */
export type ValueChange$Outbound = {
  From: string;
  To: string;
};

/** @internal */
export const ValueChange$outboundSchema: z.ZodType<
  ValueChange$Outbound,
  z.ZodTypeDef,
  ValueChange
> = z.object({
  from: z.string(),
  to: z.string(),
}).transform((v) => {
  return remap$(v, {
    from: "From",
    to: "To",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValueChange$ {
  /** @deprecated use `ValueChange$inboundSchema` instead. */
  export const inboundSchema = ValueChange$inboundSchema;
  /** @deprecated use `ValueChange$outboundSchema` instead. */
  export const outboundSchema = ValueChange$outboundSchema;
  /** @deprecated use `ValueChange$Outbound` instead. */
  export type Outbound = ValueChange$Outbound;
}

/** @internal */
export const SchemaDiff$inboundSchema: z.ZodType<
  SchemaDiff,
  z.ZodTypeDef,
  unknown
> = z.object({
  additions: z.array(z.string()),
  deletions: z.array(z.string()),
  modifications: z.record(z.lazy(() => ValueChange$inboundSchema)),
});

/** @internal */
export type SchemaDiff$Outbound = {
  additions: Array<string>;
  deletions: Array<string>;
  modifications: { [k: string]: ValueChange$Outbound };
};

/** @internal */
export const SchemaDiff$outboundSchema: z.ZodType<
  SchemaDiff$Outbound,
  z.ZodTypeDef,
  SchemaDiff
> = z.object({
  additions: z.array(z.string()),
  deletions: z.array(z.string()),
  modifications: z.record(z.lazy(() => ValueChange$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemaDiff$ {
  /** @deprecated use `SchemaDiff$inboundSchema` instead. */
  export const inboundSchema = SchemaDiff$inboundSchema;
  /** @deprecated use `SchemaDiff$outboundSchema` instead. */
  export const outboundSchema = SchemaDiff$outboundSchema;
  /** @deprecated use `SchemaDiff$Outbound` instead. */
  export type Outbound = SchemaDiff$Outbound;
}
