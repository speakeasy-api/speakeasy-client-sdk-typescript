/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

/**
 * An UnboundedRequest represents the HAR content capture by Speakeasy when logging a request.
 */
export type UnboundedRequest = {
  /**
   * Creation timestamp.
   */
  createdAt: Date;
  /**
   * The HAR content of the request.
   */
  har: string;
  /**
   * The size of the HAR content in bytes.
   */
  harSizeBytes: number;
  /**
   * The ID of this request.
   */
  requestId: string;
  /**
   * The workspace ID this request was made to.
   */
  workspaceId: string;
};

/** @internal */
export const UnboundedRequest$inboundSchema: z.ZodType<
  UnboundedRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  har: z.string(),
  har_size_bytes: z.number().int(),
  request_id: z.string(),
  workspace_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "har_size_bytes": "harSizeBytes",
    "request_id": "requestId",
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type UnboundedRequest$Outbound = {
  created_at: string;
  har: string;
  har_size_bytes: number;
  request_id: string;
  workspace_id: string;
};

/** @internal */
export const UnboundedRequest$outboundSchema: z.ZodType<
  UnboundedRequest$Outbound,
  z.ZodTypeDef,
  UnboundedRequest
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  har: z.string(),
  harSizeBytes: z.number().int(),
  requestId: z.string(),
  workspaceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    harSizeBytes: "har_size_bytes",
    requestId: "request_id",
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnboundedRequest$ {
  /** @deprecated use `UnboundedRequest$inboundSchema` instead. */
  export const inboundSchema = UnboundedRequest$inboundSchema;
  /** @deprecated use `UnboundedRequest$outboundSchema` instead. */
  export const outboundSchema = UnboundedRequest$outboundSchema;
  /** @deprecated use `UnboundedRequest$Outbound` instead. */
  export type Outbound = UnboundedRequest$Outbound;
}
