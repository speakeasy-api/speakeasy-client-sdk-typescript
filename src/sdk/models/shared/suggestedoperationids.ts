/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type SuggestedOperationIDs = {
    operationIds: { [k: string]: Array<string> };
};

/** @internal */
export const SuggestedOperationIDs$inboundSchema: z.ZodType<
    SuggestedOperationIDs,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        operation_ids: z.record(z.array(z.string())),
    })
    .transform((v) => {
        return remap$(v, {
            operation_ids: "operationIds",
        });
    });

/** @internal */
export type SuggestedOperationIDs$Outbound = {
    operation_ids: { [k: string]: Array<string> };
};

/** @internal */
export const SuggestedOperationIDs$outboundSchema: z.ZodType<
    SuggestedOperationIDs$Outbound,
    z.ZodTypeDef,
    SuggestedOperationIDs
> = z
    .object({
        operationIds: z.record(z.array(z.string())),
    })
    .transform((v) => {
        return remap$(v, {
            operationIds: "operation_ids",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SuggestedOperationIDs$ {
    /** @deprecated use `SuggestedOperationIDs$inboundSchema` instead. */
    export const inboundSchema = SuggestedOperationIDs$inboundSchema;
    /** @deprecated use `SuggestedOperationIDs$outboundSchema` instead. */
    export const outboundSchema = SuggestedOperationIDs$outboundSchema;
    /** @deprecated use `SuggestedOperationIDs$Outbound` instead. */
    export type Outbound = SuggestedOperationIDs$Outbound;
}
