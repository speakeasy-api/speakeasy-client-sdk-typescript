/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type RemoteSourceSubscriptionSettings = {
  baseSpecNamespaces: Array<string>;
  ignoredNamespaces?: Array<string> | undefined;
  outputNamespace: string;
  overlayNamespaces: Array<string>;
};

/** @internal */
export const RemoteSourceSubscriptionSettings$inboundSchema: z.ZodType<
  RemoteSourceSubscriptionSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  base_spec_namespaces: z.array(z.string()),
  ignored_namespaces: z.array(z.string()).optional(),
  output_namespace: z.string(),
  overlay_namespaces: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "base_spec_namespaces": "baseSpecNamespaces",
    "ignored_namespaces": "ignoredNamespaces",
    "output_namespace": "outputNamespace",
    "overlay_namespaces": "overlayNamespaces",
  });
});

/** @internal */
export type RemoteSourceSubscriptionSettings$Outbound = {
  base_spec_namespaces: Array<string>;
  ignored_namespaces?: Array<string> | undefined;
  output_namespace: string;
  overlay_namespaces: Array<string>;
};

/** @internal */
export const RemoteSourceSubscriptionSettings$outboundSchema: z.ZodType<
  RemoteSourceSubscriptionSettings$Outbound,
  z.ZodTypeDef,
  RemoteSourceSubscriptionSettings
> = z.object({
  baseSpecNamespaces: z.array(z.string()),
  ignoredNamespaces: z.array(z.string()).optional(),
  outputNamespace: z.string(),
  overlayNamespaces: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    baseSpecNamespaces: "base_spec_namespaces",
    ignoredNamespaces: "ignored_namespaces",
    outputNamespace: "output_namespace",
    overlayNamespaces: "overlay_namespaces",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoteSourceSubscriptionSettings$ {
  /** @deprecated use `RemoteSourceSubscriptionSettings$inboundSchema` instead. */
  export const inboundSchema = RemoteSourceSubscriptionSettings$inboundSchema;
  /** @deprecated use `RemoteSourceSubscriptionSettings$outboundSchema` instead. */
  export const outboundSchema = RemoteSourceSubscriptionSettings$outboundSchema;
  /** @deprecated use `RemoteSourceSubscriptionSettings$Outbound` instead. */
  export type Outbound = RemoteSourceSubscriptionSettings$Outbound;
}
