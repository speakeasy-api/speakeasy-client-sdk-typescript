/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../../lib/base64.js";
import { remap as remap$ } from "../../../lib/primitives.js";
import { blobLikeSchema } from "../../types/blobs.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type Schema = {
    content: Uint8Array | string;
    fileName: string;
};

/**
 * The schema file to upload provided as a multipart/form-data file segment.
 */
export type SuggestOperationIDsRequestBody = {
    schema: Schema | Blob;
    opts?: shared.SuggestOperationIDsOpts | undefined;
};

export type SuggestOperationIDsRequest = {
    xSessionId: string;
    /**
     * Max number of suggestions to request
     */
    limit?: number | undefined;
    /**
     * The schema file to upload provided as a multipart/form-data file segment.
     */
    requestBody: SuggestOperationIDsRequestBody;
};

/** @internal */
export const Schema$inboundSchema: z.ZodType<Schema, z.ZodTypeDef, unknown> = z.object({
    content: b64$.zodInbound,
    fileName: z.string(),
});

/** @internal */
export type Schema$Outbound = {
    content: Uint8Array;
    fileName: string;
};

/** @internal */
export const Schema$outboundSchema: z.ZodType<Schema$Outbound, z.ZodTypeDef, Schema> = z.object({
    content: b64$.zodOutbound,
    fileName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Schema$ {
    /** @deprecated use `Schema$inboundSchema` instead. */
    export const inboundSchema = Schema$inboundSchema;
    /** @deprecated use `Schema$outboundSchema` instead. */
    export const outboundSchema = Schema$outboundSchema;
    /** @deprecated use `Schema$Outbound` instead. */
    export type Outbound = Schema$Outbound;
}

/** @internal */
export const SuggestOperationIDsRequestBody$inboundSchema: z.ZodType<
    SuggestOperationIDsRequestBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    schema: z.lazy(() => Schema$inboundSchema),
    opts: shared.SuggestOperationIDsOpts$inboundSchema.optional(),
});

/** @internal */
export type SuggestOperationIDsRequestBody$Outbound = {
    schema: Schema$Outbound | Blob;
    opts?: shared.SuggestOperationIDsOpts$Outbound | undefined;
};

/** @internal */
export const SuggestOperationIDsRequestBody$outboundSchema: z.ZodType<
    SuggestOperationIDsRequestBody$Outbound,
    z.ZodTypeDef,
    SuggestOperationIDsRequestBody
> = z.object({
    schema: z.lazy(() => Schema$outboundSchema).or(blobLikeSchema),
    opts: shared.SuggestOperationIDsOpts$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SuggestOperationIDsRequestBody$ {
    /** @deprecated use `SuggestOperationIDsRequestBody$inboundSchema` instead. */
    export const inboundSchema = SuggestOperationIDsRequestBody$inboundSchema;
    /** @deprecated use `SuggestOperationIDsRequestBody$outboundSchema` instead. */
    export const outboundSchema = SuggestOperationIDsRequestBody$outboundSchema;
    /** @deprecated use `SuggestOperationIDsRequestBody$Outbound` instead. */
    export type Outbound = SuggestOperationIDsRequestBody$Outbound;
}

/** @internal */
export const SuggestOperationIDsRequest$inboundSchema: z.ZodType<
    SuggestOperationIDsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "x-session-id": z.string(),
        limit: z.number().optional(),
        RequestBody: z.lazy(() => SuggestOperationIDsRequestBody$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            "x-session-id": "xSessionId",
            RequestBody: "requestBody",
        });
    });

/** @internal */
export type SuggestOperationIDsRequest$Outbound = {
    "x-session-id": string;
    limit?: number | undefined;
    RequestBody: SuggestOperationIDsRequestBody$Outbound;
};

/** @internal */
export const SuggestOperationIDsRequest$outboundSchema: z.ZodType<
    SuggestOperationIDsRequest$Outbound,
    z.ZodTypeDef,
    SuggestOperationIDsRequest
> = z
    .object({
        xSessionId: z.string(),
        limit: z.number().optional(),
        requestBody: z.lazy(() => SuggestOperationIDsRequestBody$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            xSessionId: "x-session-id",
            requestBody: "RequestBody",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SuggestOperationIDsRequest$ {
    /** @deprecated use `SuggestOperationIDsRequest$inboundSchema` instead. */
    export const inboundSchema = SuggestOperationIDsRequest$inboundSchema;
    /** @deprecated use `SuggestOperationIDsRequest$outboundSchema` instead. */
    export const outboundSchema = SuggestOperationIDsRequest$outboundSchema;
    /** @deprecated use `SuggestOperationIDsRequest$Outbound` instead. */
    export type Outbound = SuggestOperationIDsRequest$Outbound;
}
