/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as shared from "../shared/index.js";

export type DownloadSchemaRevisionRequest = {
  /**
   * The ID of the Api to retrieve schemas for.
   */
  apiID: string;
  /**
   * The version ID of the Api to delete metadata for.
   */
  versionID: string;
  /**
   * The revision ID of the schema to retrieve.
   */
  revisionID: string;
};

export type DownloadSchemaRevisionResponse =
  | shared.ErrorT
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>;

/** @internal */
export const DownloadSchemaRevisionRequest$inboundSchema: z.ZodType<
  DownloadSchemaRevisionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiID: z.string(),
  versionID: z.string(),
  revisionID: z.string(),
});

/** @internal */
export type DownloadSchemaRevisionRequest$Outbound = {
  apiID: string;
  versionID: string;
  revisionID: string;
};

/** @internal */
export const DownloadSchemaRevisionRequest$outboundSchema: z.ZodType<
  DownloadSchemaRevisionRequest$Outbound,
  z.ZodTypeDef,
  DownloadSchemaRevisionRequest
> = z.object({
  apiID: z.string(),
  versionID: z.string(),
  revisionID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DownloadSchemaRevisionRequest$ {
  /** @deprecated use `DownloadSchemaRevisionRequest$inboundSchema` instead. */
  export const inboundSchema = DownloadSchemaRevisionRequest$inboundSchema;
  /** @deprecated use `DownloadSchemaRevisionRequest$outboundSchema` instead. */
  export const outboundSchema = DownloadSchemaRevisionRequest$outboundSchema;
  /** @deprecated use `DownloadSchemaRevisionRequest$Outbound` instead. */
  export type Outbound = DownloadSchemaRevisionRequest$Outbound;
}

/** @internal */
export const DownloadSchemaRevisionResponse$inboundSchema: z.ZodType<
  DownloadSchemaRevisionResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  shared.ErrorT$inboundSchema,
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
]);

/** @internal */
export type DownloadSchemaRevisionResponse$Outbound =
  | shared.ErrorT$Outbound
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>;

/** @internal */
export const DownloadSchemaRevisionResponse$outboundSchema: z.ZodType<
  DownloadSchemaRevisionResponse$Outbound,
  z.ZodTypeDef,
  DownloadSchemaRevisionResponse
> = z.union([
  shared.ErrorT$outboundSchema,
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DownloadSchemaRevisionResponse$ {
  /** @deprecated use `DownloadSchemaRevisionResponse$inboundSchema` instead. */
  export const inboundSchema = DownloadSchemaRevisionResponse$inboundSchema;
  /** @deprecated use `DownloadSchemaRevisionResponse$outboundSchema` instead. */
  export const outboundSchema = DownloadSchemaRevisionResponse$outboundSchema;
  /** @deprecated use `DownloadSchemaRevisionResponse$Outbound` instead. */
  export type Outbound = DownloadSchemaRevisionResponse$Outbound;
}
