/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetWorkspaceTeamGlobals = {
  workspaceId?: string | undefined;
};

export type GetWorkspaceTeamRequest = {
  /**
   * Unique identifier of the workspace.
   */
  workspaceId?: string | undefined;
};

export type GetWorkspaceTeamResponse =
  | shared.ErrorT
  | shared.WorkspaceTeamResponse;

/** @internal */
export const GetWorkspaceTeamGlobals$inboundSchema: z.ZodType<
  GetWorkspaceTeamGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type GetWorkspaceTeamGlobals$Outbound = {
  workspace_id?: string | undefined;
};

/** @internal */
export const GetWorkspaceTeamGlobals$outboundSchema: z.ZodType<
  GetWorkspaceTeamGlobals$Outbound,
  z.ZodTypeDef,
  GetWorkspaceTeamGlobals
> = z.object({
  workspaceId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceTeamGlobals$ {
  /** @deprecated use `GetWorkspaceTeamGlobals$inboundSchema` instead. */
  export const inboundSchema = GetWorkspaceTeamGlobals$inboundSchema;
  /** @deprecated use `GetWorkspaceTeamGlobals$outboundSchema` instead. */
  export const outboundSchema = GetWorkspaceTeamGlobals$outboundSchema;
  /** @deprecated use `GetWorkspaceTeamGlobals$Outbound` instead. */
  export type Outbound = GetWorkspaceTeamGlobals$Outbound;
}

export function getWorkspaceTeamGlobalsToJSON(
  getWorkspaceTeamGlobals: GetWorkspaceTeamGlobals,
): string {
  return JSON.stringify(
    GetWorkspaceTeamGlobals$outboundSchema.parse(getWorkspaceTeamGlobals),
  );
}

export function getWorkspaceTeamGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkspaceTeamGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkspaceTeamGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkspaceTeamGlobals' from JSON`,
  );
}

/** @internal */
export const GetWorkspaceTeamRequest$inboundSchema: z.ZodType<
  GetWorkspaceTeamRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type GetWorkspaceTeamRequest$Outbound = {
  workspace_id?: string | undefined;
};

/** @internal */
export const GetWorkspaceTeamRequest$outboundSchema: z.ZodType<
  GetWorkspaceTeamRequest$Outbound,
  z.ZodTypeDef,
  GetWorkspaceTeamRequest
> = z.object({
  workspaceId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceTeamRequest$ {
  /** @deprecated use `GetWorkspaceTeamRequest$inboundSchema` instead. */
  export const inboundSchema = GetWorkspaceTeamRequest$inboundSchema;
  /** @deprecated use `GetWorkspaceTeamRequest$outboundSchema` instead. */
  export const outboundSchema = GetWorkspaceTeamRequest$outboundSchema;
  /** @deprecated use `GetWorkspaceTeamRequest$Outbound` instead. */
  export type Outbound = GetWorkspaceTeamRequest$Outbound;
}

export function getWorkspaceTeamRequestToJSON(
  getWorkspaceTeamRequest: GetWorkspaceTeamRequest,
): string {
  return JSON.stringify(
    GetWorkspaceTeamRequest$outboundSchema.parse(getWorkspaceTeamRequest),
  );
}

export function getWorkspaceTeamRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkspaceTeamRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkspaceTeamRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkspaceTeamRequest' from JSON`,
  );
}

/** @internal */
export const GetWorkspaceTeamResponse$inboundSchema: z.ZodType<
  GetWorkspaceTeamResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  shared.ErrorT$inboundSchema,
  shared.WorkspaceTeamResponse$inboundSchema,
]);

/** @internal */
export type GetWorkspaceTeamResponse$Outbound =
  | shared.ErrorT$Outbound
  | shared.WorkspaceTeamResponse$Outbound;

/** @internal */
export const GetWorkspaceTeamResponse$outboundSchema: z.ZodType<
  GetWorkspaceTeamResponse$Outbound,
  z.ZodTypeDef,
  GetWorkspaceTeamResponse
> = z.union([
  shared.ErrorT$outboundSchema,
  shared.WorkspaceTeamResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceTeamResponse$ {
  /** @deprecated use `GetWorkspaceTeamResponse$inboundSchema` instead. */
  export const inboundSchema = GetWorkspaceTeamResponse$inboundSchema;
  /** @deprecated use `GetWorkspaceTeamResponse$outboundSchema` instead. */
  export const outboundSchema = GetWorkspaceTeamResponse$outboundSchema;
  /** @deprecated use `GetWorkspaceTeamResponse$Outbound` instead. */
  export type Outbound = GetWorkspaceTeamResponse$Outbound;
}

export function getWorkspaceTeamResponseToJSON(
  getWorkspaceTeamResponse: GetWorkspaceTeamResponse,
): string {
  return JSON.stringify(
    GetWorkspaceTeamResponse$outboundSchema.parse(getWorkspaceTeamResponse),
  );
}

export function getWorkspaceTeamResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkspaceTeamResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkspaceTeamResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkspaceTeamResponse' from JSON`,
  );
}
