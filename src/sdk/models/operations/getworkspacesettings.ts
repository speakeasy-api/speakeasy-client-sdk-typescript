/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export type GetWorkspaceSettingsGlobals = {
  workspaceId?: string | undefined;
};

export type GetWorkspaceSettingsRequest = {
  /**
   * Unique identifier of the workspace.
   */
  workspaceId?: string | undefined;
};

export type GetWorkspaceSettingsResponse =
  | shared.ErrorT
  | shared.WorkspaceSettings;

/** @internal */
export const GetWorkspaceSettingsGlobals$inboundSchema: z.ZodType<
  GetWorkspaceSettingsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type GetWorkspaceSettingsGlobals$Outbound = {
  workspace_id?: string | undefined;
};

/** @internal */
export const GetWorkspaceSettingsGlobals$outboundSchema: z.ZodType<
  GetWorkspaceSettingsGlobals$Outbound,
  z.ZodTypeDef,
  GetWorkspaceSettingsGlobals
> = z.object({
  workspaceId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceSettingsGlobals$ {
  /** @deprecated use `GetWorkspaceSettingsGlobals$inboundSchema` instead. */
  export const inboundSchema = GetWorkspaceSettingsGlobals$inboundSchema;
  /** @deprecated use `GetWorkspaceSettingsGlobals$outboundSchema` instead. */
  export const outboundSchema = GetWorkspaceSettingsGlobals$outboundSchema;
  /** @deprecated use `GetWorkspaceSettingsGlobals$Outbound` instead. */
  export type Outbound = GetWorkspaceSettingsGlobals$Outbound;
}

/** @internal */
export const GetWorkspaceSettingsRequest$inboundSchema: z.ZodType<
  GetWorkspaceSettingsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type GetWorkspaceSettingsRequest$Outbound = {
  workspace_id?: string | undefined;
};

/** @internal */
export const GetWorkspaceSettingsRequest$outboundSchema: z.ZodType<
  GetWorkspaceSettingsRequest$Outbound,
  z.ZodTypeDef,
  GetWorkspaceSettingsRequest
> = z.object({
  workspaceId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceSettingsRequest$ {
  /** @deprecated use `GetWorkspaceSettingsRequest$inboundSchema` instead. */
  export const inboundSchema = GetWorkspaceSettingsRequest$inboundSchema;
  /** @deprecated use `GetWorkspaceSettingsRequest$outboundSchema` instead. */
  export const outboundSchema = GetWorkspaceSettingsRequest$outboundSchema;
  /** @deprecated use `GetWorkspaceSettingsRequest$Outbound` instead. */
  export type Outbound = GetWorkspaceSettingsRequest$Outbound;
}

/** @internal */
export const GetWorkspaceSettingsResponse$inboundSchema: z.ZodType<
  GetWorkspaceSettingsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  shared.ErrorT$inboundSchema,
  shared.WorkspaceSettings$inboundSchema,
]);

/** @internal */
export type GetWorkspaceSettingsResponse$Outbound =
  | shared.ErrorT$Outbound
  | shared.WorkspaceSettings$Outbound;

/** @internal */
export const GetWorkspaceSettingsResponse$outboundSchema: z.ZodType<
  GetWorkspaceSettingsResponse$Outbound,
  z.ZodTypeDef,
  GetWorkspaceSettingsResponse
> = z.union([
  shared.ErrorT$outboundSchema,
  shared.WorkspaceSettings$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceSettingsResponse$ {
  /** @deprecated use `GetWorkspaceSettingsResponse$inboundSchema` instead. */
  export const inboundSchema = GetWorkspaceSettingsResponse$inboundSchema;
  /** @deprecated use `GetWorkspaceSettingsResponse$outboundSchema` instead. */
  export const outboundSchema = GetWorkspaceSettingsResponse$outboundSchema;
  /** @deprecated use `GetWorkspaceSettingsResponse$Outbound` instead. */
  export type Outbound = GetWorkspaceSettingsResponse$Outbound;
}
