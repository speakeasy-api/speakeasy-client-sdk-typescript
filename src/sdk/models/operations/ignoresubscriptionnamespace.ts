/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IgnoreSubscriptionNamespaceRequest = {
  /**
   * The existing subscription ID
   */
  subscriptionID: string;
  /**
   * The namespace name
   */
  namespaceName: string;
};

/** @internal */
export const IgnoreSubscriptionNamespaceRequest$inboundSchema: z.ZodType<
  IgnoreSubscriptionNamespaceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscriptionID: z.string(),
  namespaceName: z.string(),
});

/** @internal */
export type IgnoreSubscriptionNamespaceRequest$Outbound = {
  subscriptionID: string;
  namespaceName: string;
};

/** @internal */
export const IgnoreSubscriptionNamespaceRequest$outboundSchema: z.ZodType<
  IgnoreSubscriptionNamespaceRequest$Outbound,
  z.ZodTypeDef,
  IgnoreSubscriptionNamespaceRequest
> = z.object({
  subscriptionID: z.string(),
  namespaceName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IgnoreSubscriptionNamespaceRequest$ {
  /** @deprecated use `IgnoreSubscriptionNamespaceRequest$inboundSchema` instead. */
  export const inboundSchema = IgnoreSubscriptionNamespaceRequest$inboundSchema;
  /** @deprecated use `IgnoreSubscriptionNamespaceRequest$outboundSchema` instead. */
  export const outboundSchema =
    IgnoreSubscriptionNamespaceRequest$outboundSchema;
  /** @deprecated use `IgnoreSubscriptionNamespaceRequest$Outbound` instead. */
  export type Outbound = IgnoreSubscriptionNamespaceRequest$Outbound;
}

export function ignoreSubscriptionNamespaceRequestToJSON(
  ignoreSubscriptionNamespaceRequest: IgnoreSubscriptionNamespaceRequest,
): string {
  return JSON.stringify(
    IgnoreSubscriptionNamespaceRequest$outboundSchema.parse(
      ignoreSubscriptionNamespaceRequest,
    ),
  );
}

export function ignoreSubscriptionNamespaceRequestFromJSON(
  jsonString: string,
): SafeParseResult<IgnoreSubscriptionNamespaceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      IgnoreSubscriptionNamespaceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IgnoreSubscriptionNamespaceRequest' from JSON`,
  );
}
