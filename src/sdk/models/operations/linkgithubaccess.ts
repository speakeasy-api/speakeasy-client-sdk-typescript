/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LinkGithubAccessRequest = {
  installationId?: string | undefined;
  githubOrg?: string | undefined;
  githubOidcToken?: string | undefined;
};

/** @internal */
export const LinkGithubAccessRequest$inboundSchema: z.ZodType<
  LinkGithubAccessRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  installation_id: z.string().optional(),
  github_org: z.string().optional(),
  github_oidc_token: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "installation_id": "installationId",
    "github_org": "githubOrg",
    "github_oidc_token": "githubOidcToken",
  });
});

/** @internal */
export type LinkGithubAccessRequest$Outbound = {
  installation_id?: string | undefined;
  github_org?: string | undefined;
  github_oidc_token?: string | undefined;
};

/** @internal */
export const LinkGithubAccessRequest$outboundSchema: z.ZodType<
  LinkGithubAccessRequest$Outbound,
  z.ZodTypeDef,
  LinkGithubAccessRequest
> = z.object({
  installationId: z.string().optional(),
  githubOrg: z.string().optional(),
  githubOidcToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    installationId: "installation_id",
    githubOrg: "github_org",
    githubOidcToken: "github_oidc_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkGithubAccessRequest$ {
  /** @deprecated use `LinkGithubAccessRequest$inboundSchema` instead. */
  export const inboundSchema = LinkGithubAccessRequest$inboundSchema;
  /** @deprecated use `LinkGithubAccessRequest$outboundSchema` instead. */
  export const outboundSchema = LinkGithubAccessRequest$outboundSchema;
  /** @deprecated use `LinkGithubAccessRequest$Outbound` instead. */
  export type Outbound = LinkGithubAccessRequest$Outbound;
}

export function linkGithubAccessRequestToJSON(
  linkGithubAccessRequest: LinkGithubAccessRequest,
): string {
  return JSON.stringify(
    LinkGithubAccessRequest$outboundSchema.parse(linkGithubAccessRequest),
  );
}

export function linkGithubAccessRequestFromJSON(
  jsonString: string,
): SafeParseResult<LinkGithubAccessRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinkGithubAccessRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinkGithubAccessRequest' from JSON`,
  );
}
