/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetPublishingTokenPublicMetadataRequest = {
  /**
   * Unique identifier of the publishing token.
   */
  tokenID: string;
};

/**
 * OK
 */
export type GetPublishingTokenPublicMetadataResponseBody = {
  organizationId?: string | undefined;
  targetId?: string | undefined;
  targetResource?: string | undefined;
  validUntil?: Date | undefined;
  workspaceId?: string | undefined;
};

/** @internal */
export const GetPublishingTokenPublicMetadataRequest$inboundSchema: z.ZodType<
  GetPublishingTokenPublicMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tokenID: z.string(),
});

/** @internal */
export type GetPublishingTokenPublicMetadataRequest$Outbound = {
  tokenID: string;
};

/** @internal */
export const GetPublishingTokenPublicMetadataRequest$outboundSchema: z.ZodType<
  GetPublishingTokenPublicMetadataRequest$Outbound,
  z.ZodTypeDef,
  GetPublishingTokenPublicMetadataRequest
> = z.object({
  tokenID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPublishingTokenPublicMetadataRequest$ {
  /** @deprecated use `GetPublishingTokenPublicMetadataRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetPublishingTokenPublicMetadataRequest$inboundSchema;
  /** @deprecated use `GetPublishingTokenPublicMetadataRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetPublishingTokenPublicMetadataRequest$outboundSchema;
  /** @deprecated use `GetPublishingTokenPublicMetadataRequest$Outbound` instead. */
  export type Outbound = GetPublishingTokenPublicMetadataRequest$Outbound;
}

export function getPublishingTokenPublicMetadataRequestToJSON(
  getPublishingTokenPublicMetadataRequest:
    GetPublishingTokenPublicMetadataRequest,
): string {
  return JSON.stringify(
    GetPublishingTokenPublicMetadataRequest$outboundSchema.parse(
      getPublishingTokenPublicMetadataRequest,
    ),
  );
}

export function getPublishingTokenPublicMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetPublishingTokenPublicMetadataRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetPublishingTokenPublicMetadataRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetPublishingTokenPublicMetadataRequest' from JSON`,
  );
}

/** @internal */
export const GetPublishingTokenPublicMetadataResponseBody$inboundSchema:
  z.ZodType<
    GetPublishingTokenPublicMetadataResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    organization_id: z.string().optional(),
    target_id: z.string().optional(),
    target_resource: z.string().optional(),
    valid_until: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    workspace_id: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "organization_id": "organizationId",
      "target_id": "targetId",
      "target_resource": "targetResource",
      "valid_until": "validUntil",
      "workspace_id": "workspaceId",
    });
  });

/** @internal */
export type GetPublishingTokenPublicMetadataResponseBody$Outbound = {
  organization_id?: string | undefined;
  target_id?: string | undefined;
  target_resource?: string | undefined;
  valid_until?: string | undefined;
  workspace_id?: string | undefined;
};

/** @internal */
export const GetPublishingTokenPublicMetadataResponseBody$outboundSchema:
  z.ZodType<
    GetPublishingTokenPublicMetadataResponseBody$Outbound,
    z.ZodTypeDef,
    GetPublishingTokenPublicMetadataResponseBody
  > = z.object({
    organizationId: z.string().optional(),
    targetId: z.string().optional(),
    targetResource: z.string().optional(),
    validUntil: z.date().transform(v => v.toISOString()).optional(),
    workspaceId: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      organizationId: "organization_id",
      targetId: "target_id",
      targetResource: "target_resource",
      validUntil: "valid_until",
      workspaceId: "workspace_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPublishingTokenPublicMetadataResponseBody$ {
  /** @deprecated use `GetPublishingTokenPublicMetadataResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetPublishingTokenPublicMetadataResponseBody$inboundSchema;
  /** @deprecated use `GetPublishingTokenPublicMetadataResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetPublishingTokenPublicMetadataResponseBody$outboundSchema;
  /** @deprecated use `GetPublishingTokenPublicMetadataResponseBody$Outbound` instead. */
  export type Outbound = GetPublishingTokenPublicMetadataResponseBody$Outbound;
}

export function getPublishingTokenPublicMetadataResponseBodyToJSON(
  getPublishingTokenPublicMetadataResponseBody:
    GetPublishingTokenPublicMetadataResponseBody,
): string {
  return JSON.stringify(
    GetPublishingTokenPublicMetadataResponseBody$outboundSchema.parse(
      getPublishingTokenPublicMetadataResponseBody,
    ),
  );
}

export function getPublishingTokenPublicMetadataResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetPublishingTokenPublicMetadataResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetPublishingTokenPublicMetadataResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetPublishingTokenPublicMetadataResponseBody' from JSON`,
  );
}
