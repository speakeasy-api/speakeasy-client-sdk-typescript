/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetPublishingTokenResponse =
  | shared.ErrorT
  | Array<shared.PublishingToken>;

/** @internal */
export const GetPublishingTokenResponse$inboundSchema: z.ZodType<
  GetPublishingTokenResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  shared.ErrorT$inboundSchema,
  z.array(shared.PublishingToken$inboundSchema),
]);

/** @internal */
export type GetPublishingTokenResponse$Outbound =
  | shared.ErrorT$Outbound
  | Array<shared.PublishingToken$Outbound>;

/** @internal */
export const GetPublishingTokenResponse$outboundSchema: z.ZodType<
  GetPublishingTokenResponse$Outbound,
  z.ZodTypeDef,
  GetPublishingTokenResponse
> = z.union([
  shared.ErrorT$outboundSchema,
  z.array(shared.PublishingToken$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPublishingTokenResponse$ {
  /** @deprecated use `GetPublishingTokenResponse$inboundSchema` instead. */
  export const inboundSchema = GetPublishingTokenResponse$inboundSchema;
  /** @deprecated use `GetPublishingTokenResponse$outboundSchema` instead. */
  export const outboundSchema = GetPublishingTokenResponse$outboundSchema;
  /** @deprecated use `GetPublishingTokenResponse$Outbound` instead. */
  export type Outbound = GetPublishingTokenResponse$Outbound;
}

export function getPublishingTokenResponseToJSON(
  getPublishingTokenResponse: GetPublishingTokenResponse,
): string {
  return JSON.stringify(
    GetPublishingTokenResponse$outboundSchema.parse(getPublishingTokenResponse),
  );
}

export function getPublishingTokenResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetPublishingTokenResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPublishingTokenResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPublishingTokenResponse' from JSON`,
  );
}
