/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The publishing token to update
 */
export type UpdatePublishingTokenExpirationRequestBody = {
  /**
   * The new name for the publishing token.
   */
  tokenName?: string | undefined;
  /**
   * The new expiration date for the publishing token.
   */
  validUntil: Date;
};

export type UpdatePublishingTokenExpirationRequest = {
  /**
   * Unique identifier of the publishing token.
   */
  tokenID: string;
  /**
   * The publishing token to update
   */
  requestBody?: UpdatePublishingTokenExpirationRequestBody | undefined;
};

/** @internal */
export const UpdatePublishingTokenExpirationRequestBody$inboundSchema:
  z.ZodType<UpdatePublishingTokenExpirationRequestBody, z.ZodTypeDef, unknown> =
    z.object({
      token_name: z.string().optional(),
      valid_until: z.string().datetime({ offset: true }).transform(v =>
        new Date(v)
      ),
    }).transform((v) => {
      return remap$(v, {
        "token_name": "tokenName",
        "valid_until": "validUntil",
      });
    });

/** @internal */
export type UpdatePublishingTokenExpirationRequestBody$Outbound = {
  token_name?: string | undefined;
  valid_until: string;
};

/** @internal */
export const UpdatePublishingTokenExpirationRequestBody$outboundSchema:
  z.ZodType<
    UpdatePublishingTokenExpirationRequestBody$Outbound,
    z.ZodTypeDef,
    UpdatePublishingTokenExpirationRequestBody
  > = z.object({
    tokenName: z.string().optional(),
    validUntil: z.date().transform(v => v.toISOString()),
  }).transform((v) => {
    return remap$(v, {
      tokenName: "token_name",
      validUntil: "valid_until",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePublishingTokenExpirationRequestBody$ {
  /** @deprecated use `UpdatePublishingTokenExpirationRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePublishingTokenExpirationRequestBody$inboundSchema;
  /** @deprecated use `UpdatePublishingTokenExpirationRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePublishingTokenExpirationRequestBody$outboundSchema;
  /** @deprecated use `UpdatePublishingTokenExpirationRequestBody$Outbound` instead. */
  export type Outbound = UpdatePublishingTokenExpirationRequestBody$Outbound;
}

export function updatePublishingTokenExpirationRequestBodyToJSON(
  updatePublishingTokenExpirationRequestBody:
    UpdatePublishingTokenExpirationRequestBody,
): string {
  return JSON.stringify(
    UpdatePublishingTokenExpirationRequestBody$outboundSchema.parse(
      updatePublishingTokenExpirationRequestBody,
    ),
  );
}

export function updatePublishingTokenExpirationRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdatePublishingTokenExpirationRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePublishingTokenExpirationRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdatePublishingTokenExpirationRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdatePublishingTokenExpirationRequest$inboundSchema: z.ZodType<
  UpdatePublishingTokenExpirationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tokenID: z.string(),
  RequestBody: z.lazy(() =>
    UpdatePublishingTokenExpirationRequestBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdatePublishingTokenExpirationRequest$Outbound = {
  tokenID: string;
  RequestBody?: UpdatePublishingTokenExpirationRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdatePublishingTokenExpirationRequest$outboundSchema: z.ZodType<
  UpdatePublishingTokenExpirationRequest$Outbound,
  z.ZodTypeDef,
  UpdatePublishingTokenExpirationRequest
> = z.object({
  tokenID: z.string(),
  requestBody: z.lazy(() =>
    UpdatePublishingTokenExpirationRequestBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePublishingTokenExpirationRequest$ {
  /** @deprecated use `UpdatePublishingTokenExpirationRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdatePublishingTokenExpirationRequest$inboundSchema;
  /** @deprecated use `UpdatePublishingTokenExpirationRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdatePublishingTokenExpirationRequest$outboundSchema;
  /** @deprecated use `UpdatePublishingTokenExpirationRequest$Outbound` instead. */
  export type Outbound = UpdatePublishingTokenExpirationRequest$Outbound;
}

export function updatePublishingTokenExpirationRequestToJSON(
  updatePublishingTokenExpirationRequest:
    UpdatePublishingTokenExpirationRequest,
): string {
  return JSON.stringify(
    UpdatePublishingTokenExpirationRequest$outboundSchema.parse(
      updatePublishingTokenExpirationRequest,
    ),
  );
}

export function updatePublishingTokenExpirationRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePublishingTokenExpirationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdatePublishingTokenExpirationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePublishingTokenExpirationRequest' from JSON`,
  );
}
