/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetWorkspaceGlobals = {
  workspaceId?: string | undefined;
};

export type GetWorkspaceRequest = {
  /**
   * Unique identifier of the workspace.
   */
  workspaceId?: string | undefined;
};

/** @internal */
export const GetWorkspaceGlobals$inboundSchema: z.ZodType<
  GetWorkspaceGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type GetWorkspaceGlobals$Outbound = {
  workspace_id?: string | undefined;
};

/** @internal */
export const GetWorkspaceGlobals$outboundSchema: z.ZodType<
  GetWorkspaceGlobals$Outbound,
  z.ZodTypeDef,
  GetWorkspaceGlobals
> = z.object({
  workspaceId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceGlobals$ {
  /** @deprecated use `GetWorkspaceGlobals$inboundSchema` instead. */
  export const inboundSchema = GetWorkspaceGlobals$inboundSchema;
  /** @deprecated use `GetWorkspaceGlobals$outboundSchema` instead. */
  export const outboundSchema = GetWorkspaceGlobals$outboundSchema;
  /** @deprecated use `GetWorkspaceGlobals$Outbound` instead. */
  export type Outbound = GetWorkspaceGlobals$Outbound;
}

export function getWorkspaceGlobalsToJSON(
  getWorkspaceGlobals: GetWorkspaceGlobals,
): string {
  return JSON.stringify(
    GetWorkspaceGlobals$outboundSchema.parse(getWorkspaceGlobals),
  );
}

export function getWorkspaceGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkspaceGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkspaceGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkspaceGlobals' from JSON`,
  );
}

/** @internal */
export const GetWorkspaceRequest$inboundSchema: z.ZodType<
  GetWorkspaceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type GetWorkspaceRequest$Outbound = {
  workspace_id?: string | undefined;
};

/** @internal */
export const GetWorkspaceRequest$outboundSchema: z.ZodType<
  GetWorkspaceRequest$Outbound,
  z.ZodTypeDef,
  GetWorkspaceRequest
> = z.object({
  workspaceId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceRequest$ {
  /** @deprecated use `GetWorkspaceRequest$inboundSchema` instead. */
  export const inboundSchema = GetWorkspaceRequest$inboundSchema;
  /** @deprecated use `GetWorkspaceRequest$outboundSchema` instead. */
  export const outboundSchema = GetWorkspaceRequest$outboundSchema;
  /** @deprecated use `GetWorkspaceRequest$Outbound` instead. */
  export type Outbound = GetWorkspaceRequest$Outbound;
}

export function getWorkspaceRequestToJSON(
  getWorkspaceRequest: GetWorkspaceRequest,
): string {
  return JSON.stringify(
    GetWorkspaceRequest$outboundSchema.parse(getWorkspaceRequest),
  );
}

export function getWorkspaceRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkspaceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkspaceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkspaceRequest' from JSON`,
  );
}
