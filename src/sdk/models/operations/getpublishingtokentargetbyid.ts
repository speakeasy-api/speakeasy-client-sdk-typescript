/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetPublishingTokenTargetByIDRequest = {
  /**
   * Unique identifier of the publishing token.
   */
  tokenID: string;
};

/** @internal */
export const GetPublishingTokenTargetByIDRequest$inboundSchema: z.ZodType<
  GetPublishingTokenTargetByIDRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tokenID: z.string(),
});

/** @internal */
export type GetPublishingTokenTargetByIDRequest$Outbound = {
  tokenID: string;
};

/** @internal */
export const GetPublishingTokenTargetByIDRequest$outboundSchema: z.ZodType<
  GetPublishingTokenTargetByIDRequest$Outbound,
  z.ZodTypeDef,
  GetPublishingTokenTargetByIDRequest
> = z.object({
  tokenID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPublishingTokenTargetByIDRequest$ {
  /** @deprecated use `GetPublishingTokenTargetByIDRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetPublishingTokenTargetByIDRequest$inboundSchema;
  /** @deprecated use `GetPublishingTokenTargetByIDRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetPublishingTokenTargetByIDRequest$outboundSchema;
  /** @deprecated use `GetPublishingTokenTargetByIDRequest$Outbound` instead. */
  export type Outbound = GetPublishingTokenTargetByIDRequest$Outbound;
}

export function getPublishingTokenTargetByIDRequestToJSON(
  getPublishingTokenTargetByIDRequest: GetPublishingTokenTargetByIDRequest,
): string {
  return JSON.stringify(
    GetPublishingTokenTargetByIDRequest$outboundSchema.parse(
      getPublishingTokenTargetByIDRequest,
    ),
  );
}

export function getPublishingTokenTargetByIDRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPublishingTokenTargetByIDRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPublishingTokenTargetByIDRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPublishingTokenTargetByIDRequest' from JSON`,
  );
}
