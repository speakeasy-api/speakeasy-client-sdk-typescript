/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GithubCheckPublishingSecretsRequest = {
  generateGenLockId: string;
};

/** @internal */
export const GithubCheckPublishingSecretsRequest$inboundSchema: z.ZodType<
  GithubCheckPublishingSecretsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  generate_gen_lock_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "generate_gen_lock_id": "generateGenLockId",
  });
});

/** @internal */
export type GithubCheckPublishingSecretsRequest$Outbound = {
  generate_gen_lock_id: string;
};

/** @internal */
export const GithubCheckPublishingSecretsRequest$outboundSchema: z.ZodType<
  GithubCheckPublishingSecretsRequest$Outbound,
  z.ZodTypeDef,
  GithubCheckPublishingSecretsRequest
> = z.object({
  generateGenLockId: z.string(),
}).transform((v) => {
  return remap$(v, {
    generateGenLockId: "generate_gen_lock_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GithubCheckPublishingSecretsRequest$ {
  /** @deprecated use `GithubCheckPublishingSecretsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GithubCheckPublishingSecretsRequest$inboundSchema;
  /** @deprecated use `GithubCheckPublishingSecretsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GithubCheckPublishingSecretsRequest$outboundSchema;
  /** @deprecated use `GithubCheckPublishingSecretsRequest$Outbound` instead. */
  export type Outbound = GithubCheckPublishingSecretsRequest$Outbound;
}

export function githubCheckPublishingSecretsRequestToJSON(
  githubCheckPublishingSecretsRequest: GithubCheckPublishingSecretsRequest,
): string {
  return JSON.stringify(
    GithubCheckPublishingSecretsRequest$outboundSchema.parse(
      githubCheckPublishingSecretsRequest,
    ),
  );
}

export function githubCheckPublishingSecretsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GithubCheckPublishingSecretsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GithubCheckPublishingSecretsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GithubCheckPublishingSecretsRequest' from JSON`,
  );
}
