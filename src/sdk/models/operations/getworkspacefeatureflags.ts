/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetWorkspaceFeatureFlagsGlobals = {
  workspaceId?: string | undefined;
};

export type GetWorkspaceFeatureFlagsRequest = {
  /**
   * Unique identifier of the workspace.
   */
  workspaceId?: string | undefined;
};

export type GetWorkspaceFeatureFlagsResponse =
  | shared.WorkspaceFeatureFlagResponse
  | shared.ErrorT;

/** @internal */
export const GetWorkspaceFeatureFlagsGlobals$inboundSchema: z.ZodType<
  GetWorkspaceFeatureFlagsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type GetWorkspaceFeatureFlagsGlobals$Outbound = {
  workspace_id?: string | undefined;
};

/** @internal */
export const GetWorkspaceFeatureFlagsGlobals$outboundSchema: z.ZodType<
  GetWorkspaceFeatureFlagsGlobals$Outbound,
  z.ZodTypeDef,
  GetWorkspaceFeatureFlagsGlobals
> = z.object({
  workspaceId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceFeatureFlagsGlobals$ {
  /** @deprecated use `GetWorkspaceFeatureFlagsGlobals$inboundSchema` instead. */
  export const inboundSchema = GetWorkspaceFeatureFlagsGlobals$inboundSchema;
  /** @deprecated use `GetWorkspaceFeatureFlagsGlobals$outboundSchema` instead. */
  export const outboundSchema = GetWorkspaceFeatureFlagsGlobals$outboundSchema;
  /** @deprecated use `GetWorkspaceFeatureFlagsGlobals$Outbound` instead. */
  export type Outbound = GetWorkspaceFeatureFlagsGlobals$Outbound;
}

export function getWorkspaceFeatureFlagsGlobalsToJSON(
  getWorkspaceFeatureFlagsGlobals: GetWorkspaceFeatureFlagsGlobals,
): string {
  return JSON.stringify(
    GetWorkspaceFeatureFlagsGlobals$outboundSchema.parse(
      getWorkspaceFeatureFlagsGlobals,
    ),
  );
}

export function getWorkspaceFeatureFlagsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkspaceFeatureFlagsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkspaceFeatureFlagsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkspaceFeatureFlagsGlobals' from JSON`,
  );
}

/** @internal */
export const GetWorkspaceFeatureFlagsRequest$inboundSchema: z.ZodType<
  GetWorkspaceFeatureFlagsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type GetWorkspaceFeatureFlagsRequest$Outbound = {
  workspace_id?: string | undefined;
};

/** @internal */
export const GetWorkspaceFeatureFlagsRequest$outboundSchema: z.ZodType<
  GetWorkspaceFeatureFlagsRequest$Outbound,
  z.ZodTypeDef,
  GetWorkspaceFeatureFlagsRequest
> = z.object({
  workspaceId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceFeatureFlagsRequest$ {
  /** @deprecated use `GetWorkspaceFeatureFlagsRequest$inboundSchema` instead. */
  export const inboundSchema = GetWorkspaceFeatureFlagsRequest$inboundSchema;
  /** @deprecated use `GetWorkspaceFeatureFlagsRequest$outboundSchema` instead. */
  export const outboundSchema = GetWorkspaceFeatureFlagsRequest$outboundSchema;
  /** @deprecated use `GetWorkspaceFeatureFlagsRequest$Outbound` instead. */
  export type Outbound = GetWorkspaceFeatureFlagsRequest$Outbound;
}

export function getWorkspaceFeatureFlagsRequestToJSON(
  getWorkspaceFeatureFlagsRequest: GetWorkspaceFeatureFlagsRequest,
): string {
  return JSON.stringify(
    GetWorkspaceFeatureFlagsRequest$outboundSchema.parse(
      getWorkspaceFeatureFlagsRequest,
    ),
  );
}

export function getWorkspaceFeatureFlagsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkspaceFeatureFlagsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkspaceFeatureFlagsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkspaceFeatureFlagsRequest' from JSON`,
  );
}

/** @internal */
export const GetWorkspaceFeatureFlagsResponse$inboundSchema: z.ZodType<
  GetWorkspaceFeatureFlagsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  shared.WorkspaceFeatureFlagResponse$inboundSchema,
  shared.ErrorT$inboundSchema,
]);

/** @internal */
export type GetWorkspaceFeatureFlagsResponse$Outbound =
  | shared.WorkspaceFeatureFlagResponse$Outbound
  | shared.ErrorT$Outbound;

/** @internal */
export const GetWorkspaceFeatureFlagsResponse$outboundSchema: z.ZodType<
  GetWorkspaceFeatureFlagsResponse$Outbound,
  z.ZodTypeDef,
  GetWorkspaceFeatureFlagsResponse
> = z.union([
  shared.WorkspaceFeatureFlagResponse$outboundSchema,
  shared.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceFeatureFlagsResponse$ {
  /** @deprecated use `GetWorkspaceFeatureFlagsResponse$inboundSchema` instead. */
  export const inboundSchema = GetWorkspaceFeatureFlagsResponse$inboundSchema;
  /** @deprecated use `GetWorkspaceFeatureFlagsResponse$outboundSchema` instead. */
  export const outboundSchema = GetWorkspaceFeatureFlagsResponse$outboundSchema;
  /** @deprecated use `GetWorkspaceFeatureFlagsResponse$Outbound` instead. */
  export type Outbound = GetWorkspaceFeatureFlagsResponse$Outbound;
}

export function getWorkspaceFeatureFlagsResponseToJSON(
  getWorkspaceFeatureFlagsResponse: GetWorkspaceFeatureFlagsResponse,
): string {
  return JSON.stringify(
    GetWorkspaceFeatureFlagsResponse$outboundSchema.parse(
      getWorkspaceFeatureFlagsResponse,
    ),
  );
}

export function getWorkspaceFeatureFlagsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkspaceFeatureFlagsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkspaceFeatureFlagsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkspaceFeatureFlagsResponse' from JSON`,
  );
}
