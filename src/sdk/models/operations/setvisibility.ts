/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Namespace visibility
 */
export type SetVisibilityRequestBody = {
  public: boolean;
};

export type SetVisibilityRequest = {
  namespaceName: string;
  /**
   * Namespace visibility
   */
  requestBody?: SetVisibilityRequestBody | undefined;
};

/** @internal */
export const SetVisibilityRequestBody$inboundSchema: z.ZodType<
  SetVisibilityRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  public: z.boolean(),
});

/** @internal */
export type SetVisibilityRequestBody$Outbound = {
  public: boolean;
};

/** @internal */
export const SetVisibilityRequestBody$outboundSchema: z.ZodType<
  SetVisibilityRequestBody$Outbound,
  z.ZodTypeDef,
  SetVisibilityRequestBody
> = z.object({
  public: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetVisibilityRequestBody$ {
  /** @deprecated use `SetVisibilityRequestBody$inboundSchema` instead. */
  export const inboundSchema = SetVisibilityRequestBody$inboundSchema;
  /** @deprecated use `SetVisibilityRequestBody$outboundSchema` instead. */
  export const outboundSchema = SetVisibilityRequestBody$outboundSchema;
  /** @deprecated use `SetVisibilityRequestBody$Outbound` instead. */
  export type Outbound = SetVisibilityRequestBody$Outbound;
}

export function setVisibilityRequestBodyToJSON(
  setVisibilityRequestBody: SetVisibilityRequestBody,
): string {
  return JSON.stringify(
    SetVisibilityRequestBody$outboundSchema.parse(setVisibilityRequestBody),
  );
}

export function setVisibilityRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<SetVisibilityRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetVisibilityRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetVisibilityRequestBody' from JSON`,
  );
}

/** @internal */
export const SetVisibilityRequest$inboundSchema: z.ZodType<
  SetVisibilityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  namespace_name: z.string(),
  RequestBody: z.lazy(() => SetVisibilityRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "namespace_name": "namespaceName",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type SetVisibilityRequest$Outbound = {
  namespace_name: string;
  RequestBody?: SetVisibilityRequestBody$Outbound | undefined;
};

/** @internal */
export const SetVisibilityRequest$outboundSchema: z.ZodType<
  SetVisibilityRequest$Outbound,
  z.ZodTypeDef,
  SetVisibilityRequest
> = z.object({
  namespaceName: z.string(),
  requestBody: z.lazy(() => SetVisibilityRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    namespaceName: "namespace_name",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetVisibilityRequest$ {
  /** @deprecated use `SetVisibilityRequest$inboundSchema` instead. */
  export const inboundSchema = SetVisibilityRequest$inboundSchema;
  /** @deprecated use `SetVisibilityRequest$outboundSchema` instead. */
  export const outboundSchema = SetVisibilityRequest$outboundSchema;
  /** @deprecated use `SetVisibilityRequest$Outbound` instead. */
  export type Outbound = SetVisibilityRequest$Outbound;
}

export function setVisibilityRequestToJSON(
  setVisibilityRequest: SetVisibilityRequest,
): string {
  return JSON.stringify(
    SetVisibilityRequest$outboundSchema.parse(setVisibilityRequest),
  );
}

export function setVisibilityRequestFromJSON(
  jsonString: string,
): SafeParseResult<SetVisibilityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetVisibilityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetVisibilityRequest' from JSON`,
  );
}
