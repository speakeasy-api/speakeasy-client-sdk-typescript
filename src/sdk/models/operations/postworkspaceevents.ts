/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type PostWorkspaceEventsGlobals = {
    workspaceID?: string | undefined;
};

export type PostWorkspaceEventsRequest = {
    /**
     * Unique identifier of the workspace.
     */
    workspaceID?: string | undefined;
    requestBody: Array<shared.CliEvent>;
};

/** @internal */
export const PostWorkspaceEventsGlobals$inboundSchema: z.ZodType<
    PostWorkspaceEventsGlobals,
    z.ZodTypeDef,
    unknown
> = z.object({
    workspaceID: z.string().optional(),
});

/** @internal */
export type PostWorkspaceEventsGlobals$Outbound = {
    workspaceID?: string | undefined;
};

/** @internal */
export const PostWorkspaceEventsGlobals$outboundSchema: z.ZodType<
    PostWorkspaceEventsGlobals$Outbound,
    z.ZodTypeDef,
    PostWorkspaceEventsGlobals
> = z.object({
    workspaceID: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostWorkspaceEventsGlobals$ {
    /** @deprecated use `PostWorkspaceEventsGlobals$inboundSchema` instead. */
    export const inboundSchema = PostWorkspaceEventsGlobals$inboundSchema;
    /** @deprecated use `PostWorkspaceEventsGlobals$outboundSchema` instead. */
    export const outboundSchema = PostWorkspaceEventsGlobals$outboundSchema;
    /** @deprecated use `PostWorkspaceEventsGlobals$Outbound` instead. */
    export type Outbound = PostWorkspaceEventsGlobals$Outbound;
}

/** @internal */
export const PostWorkspaceEventsRequest$inboundSchema: z.ZodType<
    PostWorkspaceEventsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        workspaceID: z.string().optional(),
        RequestBody: z.array(shared.CliEvent$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            RequestBody: "requestBody",
        });
    });

/** @internal */
export type PostWorkspaceEventsRequest$Outbound = {
    workspaceID?: string | undefined;
    RequestBody: Array<shared.CliEvent$Outbound>;
};

/** @internal */
export const PostWorkspaceEventsRequest$outboundSchema: z.ZodType<
    PostWorkspaceEventsRequest$Outbound,
    z.ZodTypeDef,
    PostWorkspaceEventsRequest
> = z
    .object({
        workspaceID: z.string().optional(),
        requestBody: z.array(shared.CliEvent$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostWorkspaceEventsRequest$ {
    /** @deprecated use `PostWorkspaceEventsRequest$inboundSchema` instead. */
    export const inboundSchema = PostWorkspaceEventsRequest$inboundSchema;
    /** @deprecated use `PostWorkspaceEventsRequest$outboundSchema` instead. */
    export const outboundSchema = PostWorkspaceEventsRequest$outboundSchema;
    /** @deprecated use `PostWorkspaceEventsRequest$Outbound` instead. */
    export type Outbound = PostWorkspaceEventsRequest$Outbound;
}
