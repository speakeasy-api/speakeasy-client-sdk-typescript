/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as shared from "../shared/index.js";

/**
 * Configuration for filter operations
 */
export type Op = {
  /**
   * Whether to AND or OR the filters
   */
  and: boolean;
};

export type GetAllApiVersionsRequest = {
  /**
   * The ID of the Api to retrieve.
   */
  apiID: string;
  /**
   * Configuration for filter operations
   */
  op?: Op | undefined;
  /**
   * Metadata to filter Apis on
   */
  metadata?: { [k: string]: Array<string> } | undefined;
};

export type GetAllApiVersionsResponse = shared.ErrorT | Array<shared.Api>;

/** @internal */
export const Op$inboundSchema: z.ZodType<Op, z.ZodTypeDef, unknown> = z.object({
  and: z.boolean(),
});

/** @internal */
export type Op$Outbound = {
  and: boolean;
};

/** @internal */
export const Op$outboundSchema: z.ZodType<Op$Outbound, z.ZodTypeDef, Op> = z
  .object({
    and: z.boolean(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Op$ {
  /** @deprecated use `Op$inboundSchema` instead. */
  export const inboundSchema = Op$inboundSchema;
  /** @deprecated use `Op$outboundSchema` instead. */
  export const outboundSchema = Op$outboundSchema;
  /** @deprecated use `Op$Outbound` instead. */
  export type Outbound = Op$Outbound;
}

/** @internal */
export const GetAllApiVersionsRequest$inboundSchema: z.ZodType<
  GetAllApiVersionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiID: z.string(),
  op: z.lazy(() => Op$inboundSchema).optional(),
  metadata: z.record(z.array(z.string())).optional(),
});

/** @internal */
export type GetAllApiVersionsRequest$Outbound = {
  apiID: string;
  op?: Op$Outbound | undefined;
  metadata?: { [k: string]: Array<string> } | undefined;
};

/** @internal */
export const GetAllApiVersionsRequest$outboundSchema: z.ZodType<
  GetAllApiVersionsRequest$Outbound,
  z.ZodTypeDef,
  GetAllApiVersionsRequest
> = z.object({
  apiID: z.string(),
  op: z.lazy(() => Op$outboundSchema).optional(),
  metadata: z.record(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllApiVersionsRequest$ {
  /** @deprecated use `GetAllApiVersionsRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllApiVersionsRequest$inboundSchema;
  /** @deprecated use `GetAllApiVersionsRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllApiVersionsRequest$outboundSchema;
  /** @deprecated use `GetAllApiVersionsRequest$Outbound` instead. */
  export type Outbound = GetAllApiVersionsRequest$Outbound;
}

/** @internal */
export const GetAllApiVersionsResponse$inboundSchema: z.ZodType<
  GetAllApiVersionsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([shared.ErrorT$inboundSchema, z.array(shared.Api$inboundSchema)]);

/** @internal */
export type GetAllApiVersionsResponse$Outbound =
  | shared.ErrorT$Outbound
  | Array<shared.Api$Outbound>;

/** @internal */
export const GetAllApiVersionsResponse$outboundSchema: z.ZodType<
  GetAllApiVersionsResponse$Outbound,
  z.ZodTypeDef,
  GetAllApiVersionsResponse
> = z.union([shared.ErrorT$outboundSchema, z.array(shared.Api$outboundSchema)]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllApiVersionsResponse$ {
  /** @deprecated use `GetAllApiVersionsResponse$inboundSchema` instead. */
  export const inboundSchema = GetAllApiVersionsResponse$inboundSchema;
  /** @deprecated use `GetAllApiVersionsResponse$outboundSchema` instead. */
  export const outboundSchema = GetAllApiVersionsResponse$outboundSchema;
  /** @deprecated use `GetAllApiVersionsResponse$Outbound` instead. */
  export type Outbound = GetAllApiVersionsResponse$Outbound;
}
