/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export type GetBlobRequest = {
  organizationSlug: string;
  workspaceSlug: string;
  namespaceName: string;
  digest: string;
};

export type GetBlobResponse = shared.ErrorT | ReadableStream<Uint8Array>;

/** @internal */
export const GetBlobRequest$inboundSchema: z.ZodType<
  GetBlobRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_slug: z.string(),
  workspace_slug: z.string(),
  namespace_name: z.string(),
  digest: z.string(),
}).transform((v) => {
  return remap$(v, {
    "organization_slug": "organizationSlug",
    "workspace_slug": "workspaceSlug",
    "namespace_name": "namespaceName",
  });
});

/** @internal */
export type GetBlobRequest$Outbound = {
  organization_slug: string;
  workspace_slug: string;
  namespace_name: string;
  digest: string;
};

/** @internal */
export const GetBlobRequest$outboundSchema: z.ZodType<
  GetBlobRequest$Outbound,
  z.ZodTypeDef,
  GetBlobRequest
> = z.object({
  organizationSlug: z.string(),
  workspaceSlug: z.string(),
  namespaceName: z.string(),
  digest: z.string(),
}).transform((v) => {
  return remap$(v, {
    organizationSlug: "organization_slug",
    workspaceSlug: "workspace_slug",
    namespaceName: "namespace_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBlobRequest$ {
  /** @deprecated use `GetBlobRequest$inboundSchema` instead. */
  export const inboundSchema = GetBlobRequest$inboundSchema;
  /** @deprecated use `GetBlobRequest$outboundSchema` instead. */
  export const outboundSchema = GetBlobRequest$outboundSchema;
  /** @deprecated use `GetBlobRequest$Outbound` instead. */
  export type Outbound = GetBlobRequest$Outbound;
}

/** @internal */
export const GetBlobResponse$inboundSchema: z.ZodType<
  GetBlobResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  shared.ErrorT$inboundSchema,
  z.instanceof(ReadableStream<Uint8Array>),
]);

/** @internal */
export type GetBlobResponse$Outbound =
  | shared.ErrorT$Outbound
  | ReadableStream<Uint8Array>;

/** @internal */
export const GetBlobResponse$outboundSchema: z.ZodType<
  GetBlobResponse$Outbound,
  z.ZodTypeDef,
  GetBlobResponse
> = z.union([
  shared.ErrorT$outboundSchema,
  z.instanceof(ReadableStream<Uint8Array>),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBlobResponse$ {
  /** @deprecated use `GetBlobResponse$inboundSchema` instead. */
  export const inboundSchema = GetBlobResponse$inboundSchema;
  /** @deprecated use `GetBlobResponse$outboundSchema` instead. */
  export const outboundSchema = GetBlobResponse$outboundSchema;
  /** @deprecated use `GetBlobResponse$Outbound` instead. */
  export type Outbound = GetBlobResponse$Outbound;
}
