/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetOrganizationRequest = {
  /**
   * Unique identifier of the organization.
   */
  organizationID: string;
};

/** @internal */
export const GetOrganizationRequest$inboundSchema: z.ZodType<
  GetOrganizationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organizationID: z.string(),
});

/** @internal */
export type GetOrganizationRequest$Outbound = {
  organizationID: string;
};

/** @internal */
export const GetOrganizationRequest$outboundSchema: z.ZodType<
  GetOrganizationRequest$Outbound,
  z.ZodTypeDef,
  GetOrganizationRequest
> = z.object({
  organizationID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrganizationRequest$ {
  /** @deprecated use `GetOrganizationRequest$inboundSchema` instead. */
  export const inboundSchema = GetOrganizationRequest$inboundSchema;
  /** @deprecated use `GetOrganizationRequest$outboundSchema` instead. */
  export const outboundSchema = GetOrganizationRequest$outboundSchema;
  /** @deprecated use `GetOrganizationRequest$Outbound` instead. */
  export type Outbound = GetOrganizationRequest$Outbound;
}

export function getOrganizationRequestToJSON(
  getOrganizationRequest: GetOrganizationRequest,
): string {
  return JSON.stringify(
    GetOrganizationRequest$outboundSchema.parse(getOrganizationRequest),
  );
}

export function getOrganizationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetOrganizationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrganizationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrganizationRequest' from JSON`,
  );
}
