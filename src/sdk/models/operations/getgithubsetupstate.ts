/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetGithubSetupStateRequest = {
  org: string;
  repo: string;
  generateGenLockId: string;
};

/** @internal */
export const GetGithubSetupStateRequest$inboundSchema: z.ZodType<
  GetGithubSetupStateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org: z.string(),
  repo: z.string(),
  generate_gen_lock_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "generate_gen_lock_id": "generateGenLockId",
  });
});

/** @internal */
export type GetGithubSetupStateRequest$Outbound = {
  org: string;
  repo: string;
  generate_gen_lock_id: string;
};

/** @internal */
export const GetGithubSetupStateRequest$outboundSchema: z.ZodType<
  GetGithubSetupStateRequest$Outbound,
  z.ZodTypeDef,
  GetGithubSetupStateRequest
> = z.object({
  org: z.string(),
  repo: z.string(),
  generateGenLockId: z.string(),
}).transform((v) => {
  return remap$(v, {
    generateGenLockId: "generate_gen_lock_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetGithubSetupStateRequest$ {
  /** @deprecated use `GetGithubSetupStateRequest$inboundSchema` instead. */
  export const inboundSchema = GetGithubSetupStateRequest$inboundSchema;
  /** @deprecated use `GetGithubSetupStateRequest$outboundSchema` instead. */
  export const outboundSchema = GetGithubSetupStateRequest$outboundSchema;
  /** @deprecated use `GetGithubSetupStateRequest$Outbound` instead. */
  export type Outbound = GetGithubSetupStateRequest$Outbound;
}

export function getGithubSetupStateRequestToJSON(
  getGithubSetupStateRequest: GetGithubSetupStateRequest,
): string {
  return JSON.stringify(
    GetGithubSetupStateRequest$outboundSchema.parse(getGithubSetupStateRequest),
  );
}

export function getGithubSetupStateRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetGithubSetupStateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetGithubSetupStateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetGithubSetupStateRequest' from JSON`,
  );
}
