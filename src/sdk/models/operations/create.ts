/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateRequestBody = {
  /**
   * URL to shorten
   */
  url: string;
};

/** @internal */
export const CreateRequestBody$inboundSchema: z.ZodType<
  CreateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
});

/** @internal */
export type CreateRequestBody$Outbound = {
  url: string;
};

/** @internal */
export const CreateRequestBody$outboundSchema: z.ZodType<
  CreateRequestBody$Outbound,
  z.ZodTypeDef,
  CreateRequestBody
> = z.object({
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRequestBody$ {
  /** @deprecated use `CreateRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateRequestBody$inboundSchema;
  /** @deprecated use `CreateRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateRequestBody$outboundSchema;
  /** @deprecated use `CreateRequestBody$Outbound` instead. */
  export type Outbound = CreateRequestBody$Outbound;
}

export function createRequestBodyToJSON(
  createRequestBody: CreateRequestBody,
): string {
  return JSON.stringify(
    CreateRequestBody$outboundSchema.parse(createRequestBody),
  );
}

export function createRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRequestBody' from JSON`,
  );
}
