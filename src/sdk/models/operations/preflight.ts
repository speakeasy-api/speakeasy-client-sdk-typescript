/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type PreflightResponse = shared.PreflightToken | shared.ErrorT;

/** @internal */
export const PreflightResponse$inboundSchema: z.ZodType<
  PreflightResponse,
  z.ZodTypeDef,
  unknown
> = z.union([shared.PreflightToken$inboundSchema, shared.ErrorT$inboundSchema]);

/** @internal */
export type PreflightResponse$Outbound =
  | shared.PreflightToken$Outbound
  | shared.ErrorT$Outbound;

/** @internal */
export const PreflightResponse$outboundSchema: z.ZodType<
  PreflightResponse$Outbound,
  z.ZodTypeDef,
  PreflightResponse
> = z.union([
  shared.PreflightToken$outboundSchema,
  shared.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreflightResponse$ {
  /** @deprecated use `PreflightResponse$inboundSchema` instead. */
  export const inboundSchema = PreflightResponse$inboundSchema;
  /** @deprecated use `PreflightResponse$outboundSchema` instead. */
  export const outboundSchema = PreflightResponse$outboundSchema;
  /** @deprecated use `PreflightResponse$Outbound` instead. */
  export type Outbound = PreflightResponse$Outbound;
}

export function preflightResponseToJSON(
  preflightResponse: PreflightResponse,
): string {
  return JSON.stringify(
    PreflightResponse$outboundSchema.parse(preflightResponse),
  );
}

export function preflightResponseFromJSON(
  jsonString: string,
): SafeParseResult<PreflightResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreflightResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreflightResponse' from JSON`,
  );
}
