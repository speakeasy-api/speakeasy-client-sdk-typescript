/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GenerateCodeSamplePreviewResponse =
  | shared.UsageSnippets
  | shared.ErrorT;

/** @internal */
export const GenerateCodeSamplePreviewResponse$inboundSchema: z.ZodType<
  GenerateCodeSamplePreviewResponse,
  z.ZodTypeDef,
  unknown
> = z.union([shared.UsageSnippets$inboundSchema, shared.ErrorT$inboundSchema]);

/** @internal */
export type GenerateCodeSamplePreviewResponse$Outbound =
  | shared.UsageSnippets$Outbound
  | shared.ErrorT$Outbound;

/** @internal */
export const GenerateCodeSamplePreviewResponse$outboundSchema: z.ZodType<
  GenerateCodeSamplePreviewResponse$Outbound,
  z.ZodTypeDef,
  GenerateCodeSamplePreviewResponse
> = z.union([
  shared.UsageSnippets$outboundSchema,
  shared.ErrorT$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateCodeSamplePreviewResponse$ {
  /** @deprecated use `GenerateCodeSamplePreviewResponse$inboundSchema` instead. */
  export const inboundSchema = GenerateCodeSamplePreviewResponse$inboundSchema;
  /** @deprecated use `GenerateCodeSamplePreviewResponse$outboundSchema` instead. */
  export const outboundSchema =
    GenerateCodeSamplePreviewResponse$outboundSchema;
  /** @deprecated use `GenerateCodeSamplePreviewResponse$Outbound` instead. */
  export type Outbound = GenerateCodeSamplePreviewResponse$Outbound;
}

export function generateCodeSamplePreviewResponseToJSON(
  generateCodeSamplePreviewResponse: GenerateCodeSamplePreviewResponse,
): string {
  return JSON.stringify(
    GenerateCodeSamplePreviewResponse$outboundSchema.parse(
      generateCodeSamplePreviewResponse,
    ),
  );
}

export function generateCodeSamplePreviewResponseFromJSON(
  jsonString: string,
): SafeParseResult<GenerateCodeSamplePreviewResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateCodeSamplePreviewResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateCodeSamplePreviewResponse' from JSON`,
  );
}
