/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type SearchWorkspaceEventsGlobals = {
  workspaceId?: string | undefined;
};

export type SearchWorkspaceEventsRequest = {
  /**
   * Unique identifier of the workspace.
   */
  workspaceId?: string | undefined;
  /**
   * Unique identifier of the source revision digest.
   */
  sourceRevisionDigest?: string | undefined;
  /**
   * Unique identifier of the lint report digest.
   */
  lintReportDigest?: string | undefined;
  /**
   * Unique identifier of the openapi diff report digest.
   */
  openapiDiffReportDigest?: string | undefined;
  /**
   * Specified interaction type for events.
   */
  interactionType?: shared.InteractionType | undefined;
  /**
   * A specific gen lock ID for the events.
   */
  generateGenLockId?: string | undefined;
  /**
   * Shared execution ID for cli events across a single action.
   */
  executionId?: string | undefined;
  /**
   * Whether the event was successful or not.
   */
  success?: boolean | undefined;
  /**
   * Number of results to return.
   */
  limit?: number | undefined;
};

/** @internal */
export const SearchWorkspaceEventsGlobals$inboundSchema: z.ZodType<
  SearchWorkspaceEventsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type SearchWorkspaceEventsGlobals$Outbound = {
  workspace_id?: string | undefined;
};

/** @internal */
export const SearchWorkspaceEventsGlobals$outboundSchema: z.ZodType<
  SearchWorkspaceEventsGlobals$Outbound,
  z.ZodTypeDef,
  SearchWorkspaceEventsGlobals
> = z.object({
  workspaceId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchWorkspaceEventsGlobals$ {
  /** @deprecated use `SearchWorkspaceEventsGlobals$inboundSchema` instead. */
  export const inboundSchema = SearchWorkspaceEventsGlobals$inboundSchema;
  /** @deprecated use `SearchWorkspaceEventsGlobals$outboundSchema` instead. */
  export const outboundSchema = SearchWorkspaceEventsGlobals$outboundSchema;
  /** @deprecated use `SearchWorkspaceEventsGlobals$Outbound` instead. */
  export type Outbound = SearchWorkspaceEventsGlobals$Outbound;
}

export function searchWorkspaceEventsGlobalsToJSON(
  searchWorkspaceEventsGlobals: SearchWorkspaceEventsGlobals,
): string {
  return JSON.stringify(
    SearchWorkspaceEventsGlobals$outboundSchema.parse(
      searchWorkspaceEventsGlobals,
    ),
  );
}

export function searchWorkspaceEventsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<SearchWorkspaceEventsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchWorkspaceEventsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchWorkspaceEventsGlobals' from JSON`,
  );
}

/** @internal */
export const SearchWorkspaceEventsRequest$inboundSchema: z.ZodType<
  SearchWorkspaceEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.string().optional(),
  source_revision_digest: z.string().optional(),
  lint_report_digest: z.string().optional(),
  openapi_diff_report_digest: z.string().optional(),
  interaction_type: shared.InteractionType$inboundSchema.optional(),
  generate_gen_lock_id: z.string().optional(),
  execution_id: z.string().optional(),
  success: z.boolean().optional(),
  limit: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
    "source_revision_digest": "sourceRevisionDigest",
    "lint_report_digest": "lintReportDigest",
    "openapi_diff_report_digest": "openapiDiffReportDigest",
    "interaction_type": "interactionType",
    "generate_gen_lock_id": "generateGenLockId",
    "execution_id": "executionId",
  });
});

/** @internal */
export type SearchWorkspaceEventsRequest$Outbound = {
  workspace_id?: string | undefined;
  source_revision_digest?: string | undefined;
  lint_report_digest?: string | undefined;
  openapi_diff_report_digest?: string | undefined;
  interaction_type?: string | undefined;
  generate_gen_lock_id?: string | undefined;
  execution_id?: string | undefined;
  success?: boolean | undefined;
  limit?: number | undefined;
};

/** @internal */
export const SearchWorkspaceEventsRequest$outboundSchema: z.ZodType<
  SearchWorkspaceEventsRequest$Outbound,
  z.ZodTypeDef,
  SearchWorkspaceEventsRequest
> = z.object({
  workspaceId: z.string().optional(),
  sourceRevisionDigest: z.string().optional(),
  lintReportDigest: z.string().optional(),
  openapiDiffReportDigest: z.string().optional(),
  interactionType: shared.InteractionType$outboundSchema.optional(),
  generateGenLockId: z.string().optional(),
  executionId: z.string().optional(),
  success: z.boolean().optional(),
  limit: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
    sourceRevisionDigest: "source_revision_digest",
    lintReportDigest: "lint_report_digest",
    openapiDiffReportDigest: "openapi_diff_report_digest",
    interactionType: "interaction_type",
    generateGenLockId: "generate_gen_lock_id",
    executionId: "execution_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchWorkspaceEventsRequest$ {
  /** @deprecated use `SearchWorkspaceEventsRequest$inboundSchema` instead. */
  export const inboundSchema = SearchWorkspaceEventsRequest$inboundSchema;
  /** @deprecated use `SearchWorkspaceEventsRequest$outboundSchema` instead. */
  export const outboundSchema = SearchWorkspaceEventsRequest$outboundSchema;
  /** @deprecated use `SearchWorkspaceEventsRequest$Outbound` instead. */
  export type Outbound = SearchWorkspaceEventsRequest$Outbound;
}

export function searchWorkspaceEventsRequestToJSON(
  searchWorkspaceEventsRequest: SearchWorkspaceEventsRequest,
): string {
  return JSON.stringify(
    SearchWorkspaceEventsRequest$outboundSchema.parse(
      searchWorkspaceEventsRequest,
    ),
  );
}

export function searchWorkspaceEventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchWorkspaceEventsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchWorkspaceEventsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchWorkspaceEventsRequest' from JSON`,
  );
}
