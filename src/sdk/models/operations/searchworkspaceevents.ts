/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../../../sdk/models/shared";
import { AxiosResponse } from "axios";

export class SearchWorkspaceEventsRequest extends SpeakeasyBase {
    /**
     * A specific gen lock ID for the events.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=generate_gen_lock_id" })
    generateGenLockId?: string;

    /**
     * Specified interaction type for events.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=interaction_type" })
    interactionType?: shared.InteractionType;

    /**
     * Unique identifier of the lint report digest.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=lint_report_digest" })
    lintReportDigest?: string;

    /**
     * Unique identifier of the openapi diff report digest.
     */
    @SpeakeasyMetadata({
        data: "queryParam, style=form;explode=true;name=openapi_diff_report_digest",
    })
    openapiDiffReportDigest?: string;

    /**
     * Unique identifier of the source revision digest.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=source_revision_digest" })
    sourceRevisionDigest?: string;

    /**
     * Unique identifier of the workspace.
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=workspaceID" })
    workspaceID?: string;
}

export class SearchWorkspaceEventsResponse extends SpeakeasyBase {
    /**
     * Success
     */
    @SpeakeasyMetadata({ elemType: shared.CliEvent })
    cliEventBatch?: shared.CliEvent[];

    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * Error
     */
    @SpeakeasyMetadata()
    error?: shared.ErrorT;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse: AxiosResponse;
}
