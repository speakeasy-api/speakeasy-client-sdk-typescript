/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The format of the OpenAPI specification.
 */
export const Format = {
  Json: "json",
  Yaml: "yaml",
} as const;
/**
 * The format of the OpenAPI specification.
 */
export type Format = ClosedEnum<typeof Format>;

export type CreateSchemaStoreItemRequestBody = {
  /**
   * The format of the OpenAPI specification.
   */
  format: Format;
  /**
   * The package name to use in code snippets / quickstart.
   */
  packageName: string;
  /**
   * The classname of the SDK to use in code snippets / quickstart.
   */
  sdkClassname: string;
  /**
   * The OpenAPI specification to store.
   */
  spec: string;
};

/** @internal */
export const Format$inboundSchema: z.ZodNativeEnum<typeof Format> = z
  .nativeEnum(Format);

/** @internal */
export const Format$outboundSchema: z.ZodNativeEnum<typeof Format> =
  Format$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Format$ {
  /** @deprecated use `Format$inboundSchema` instead. */
  export const inboundSchema = Format$inboundSchema;
  /** @deprecated use `Format$outboundSchema` instead. */
  export const outboundSchema = Format$outboundSchema;
}

/** @internal */
export const CreateSchemaStoreItemRequestBody$inboundSchema: z.ZodType<
  CreateSchemaStoreItemRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  format: Format$inboundSchema,
  packageName: z.string(),
  sdkClassname: z.string(),
  spec: z.string(),
});

/** @internal */
export type CreateSchemaStoreItemRequestBody$Outbound = {
  format: string;
  packageName: string;
  sdkClassname: string;
  spec: string;
};

/** @internal */
export const CreateSchemaStoreItemRequestBody$outboundSchema: z.ZodType<
  CreateSchemaStoreItemRequestBody$Outbound,
  z.ZodTypeDef,
  CreateSchemaStoreItemRequestBody
> = z.object({
  format: Format$outboundSchema,
  packageName: z.string(),
  sdkClassname: z.string(),
  spec: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSchemaStoreItemRequestBody$ {
  /** @deprecated use `CreateSchemaStoreItemRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateSchemaStoreItemRequestBody$inboundSchema;
  /** @deprecated use `CreateSchemaStoreItemRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateSchemaStoreItemRequestBody$outboundSchema;
  /** @deprecated use `CreateSchemaStoreItemRequestBody$Outbound` instead. */
  export type Outbound = CreateSchemaStoreItemRequestBody$Outbound;
}

export function createSchemaStoreItemRequestBodyToJSON(
  createSchemaStoreItemRequestBody: CreateSchemaStoreItemRequestBody,
): string {
  return JSON.stringify(
    CreateSchemaStoreItemRequestBody$outboundSchema.parse(
      createSchemaStoreItemRequestBody,
    ),
  );
}

export function createSchemaStoreItemRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateSchemaStoreItemRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSchemaStoreItemRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSchemaStoreItemRequestBody' from JSON`,
  );
}
