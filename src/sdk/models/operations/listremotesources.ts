/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListRemoteSourcesRequest = {
  namespaceName: string;
};

/** @internal */
export const ListRemoteSourcesRequest$inboundSchema: z.ZodType<
  ListRemoteSourcesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  namespace_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "namespace_name": "namespaceName",
  });
});

/** @internal */
export type ListRemoteSourcesRequest$Outbound = {
  namespace_name: string;
};

/** @internal */
export const ListRemoteSourcesRequest$outboundSchema: z.ZodType<
  ListRemoteSourcesRequest$Outbound,
  z.ZodTypeDef,
  ListRemoteSourcesRequest
> = z.object({
  namespaceName: z.string(),
}).transform((v) => {
  return remap$(v, {
    namespaceName: "namespace_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListRemoteSourcesRequest$ {
  /** @deprecated use `ListRemoteSourcesRequest$inboundSchema` instead. */
  export const inboundSchema = ListRemoteSourcesRequest$inboundSchema;
  /** @deprecated use `ListRemoteSourcesRequest$outboundSchema` instead. */
  export const outboundSchema = ListRemoteSourcesRequest$outboundSchema;
  /** @deprecated use `ListRemoteSourcesRequest$Outbound` instead. */
  export type Outbound = ListRemoteSourcesRequest$Outbound;
}

export function listRemoteSourcesRequestToJSON(
  listRemoteSourcesRequest: ListRemoteSourcesRequest,
): string {
  return JSON.stringify(
    ListRemoteSourcesRequest$outboundSchema.parse(listRemoteSourcesRequest),
  );
}

export function listRemoteSourcesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListRemoteSourcesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListRemoteSourcesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListRemoteSourcesRequest' from JSON`,
  );
}
