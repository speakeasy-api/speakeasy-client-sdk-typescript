/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

/**
 * Job accepted, returns a job ID to poll for status and result
 */
export type GenerateCodeSamplePreviewAsyncResponseBody = {
  /**
   * The job ID for polling
   */
  jobId: string;
  /**
   * The current status of the job. Possible values are `pending` or `running`.
   */
  status: shared.CodeSamplesJobStatus;
};

/** @internal */
export const GenerateCodeSamplePreviewAsyncResponseBody$inboundSchema:
  z.ZodType<GenerateCodeSamplePreviewAsyncResponseBody, z.ZodTypeDef, unknown> =
    z.object({
      job_id: z.string(),
      status: shared.CodeSamplesJobStatus$inboundSchema,
    }).transform((v) => {
      return remap$(v, {
        "job_id": "jobId",
      });
    });

/** @internal */
export type GenerateCodeSamplePreviewAsyncResponseBody$Outbound = {
  job_id: string;
  status: string;
};

/** @internal */
export const GenerateCodeSamplePreviewAsyncResponseBody$outboundSchema:
  z.ZodType<
    GenerateCodeSamplePreviewAsyncResponseBody$Outbound,
    z.ZodTypeDef,
    GenerateCodeSamplePreviewAsyncResponseBody
  > = z.object({
    jobId: z.string(),
    status: shared.CodeSamplesJobStatus$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      jobId: "job_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateCodeSamplePreviewAsyncResponseBody$ {
  /** @deprecated use `GenerateCodeSamplePreviewAsyncResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GenerateCodeSamplePreviewAsyncResponseBody$inboundSchema;
  /** @deprecated use `GenerateCodeSamplePreviewAsyncResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GenerateCodeSamplePreviewAsyncResponseBody$outboundSchema;
  /** @deprecated use `GenerateCodeSamplePreviewAsyncResponseBody$Outbound` instead. */
  export type Outbound = GenerateCodeSamplePreviewAsyncResponseBody$Outbound;
}

export function generateCodeSamplePreviewAsyncResponseBodyToJSON(
  generateCodeSamplePreviewAsyncResponseBody:
    GenerateCodeSamplePreviewAsyncResponseBody,
): string {
  return JSON.stringify(
    GenerateCodeSamplePreviewAsyncResponseBody$outboundSchema.parse(
      generateCodeSamplePreviewAsyncResponseBody,
    ),
  );
}

export function generateCodeSamplePreviewAsyncResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GenerateCodeSamplePreviewAsyncResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GenerateCodeSamplePreviewAsyncResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GenerateCodeSamplePreviewAsyncResponseBody' from JSON`,
  );
}
