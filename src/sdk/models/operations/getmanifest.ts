/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetManifestRequest = {
  organizationSlug: string;
  workspaceSlug: string;
  namespaceName: string;
  /**
   * Tag or digest
   */
  revisionReference: string;
};

/** @internal */
export const GetManifestRequest$inboundSchema: z.ZodType<
  GetManifestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_slug: z.string(),
  workspace_slug: z.string(),
  namespace_name: z.string(),
  revision_reference: z.string(),
}).transform((v) => {
  return remap$(v, {
    "organization_slug": "organizationSlug",
    "workspace_slug": "workspaceSlug",
    "namespace_name": "namespaceName",
    "revision_reference": "revisionReference",
  });
});

/** @internal */
export type GetManifestRequest$Outbound = {
  organization_slug: string;
  workspace_slug: string;
  namespace_name: string;
  revision_reference: string;
};

/** @internal */
export const GetManifestRequest$outboundSchema: z.ZodType<
  GetManifestRequest$Outbound,
  z.ZodTypeDef,
  GetManifestRequest
> = z.object({
  organizationSlug: z.string(),
  workspaceSlug: z.string(),
  namespaceName: z.string(),
  revisionReference: z.string(),
}).transform((v) => {
  return remap$(v, {
    organizationSlug: "organization_slug",
    workspaceSlug: "workspace_slug",
    namespaceName: "namespace_name",
    revisionReference: "revision_reference",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetManifestRequest$ {
  /** @deprecated use `GetManifestRequest$inboundSchema` instead. */
  export const inboundSchema = GetManifestRequest$inboundSchema;
  /** @deprecated use `GetManifestRequest$outboundSchema` instead. */
  export const outboundSchema = GetManifestRequest$outboundSchema;
  /** @deprecated use `GetManifestRequest$Outbound` instead. */
  export type Outbound = GetManifestRequest$Outbound;
}

export function getManifestRequestToJSON(
  getManifestRequest: GetManifestRequest,
): string {
  return JSON.stringify(
    GetManifestRequest$outboundSchema.parse(getManifestRequest),
  );
}

export function getManifestRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetManifestRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetManifestRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetManifestRequest' from JSON`,
  );
}
