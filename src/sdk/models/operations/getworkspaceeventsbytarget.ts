/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type GetWorkspaceEventsByTargetGlobals = {
    workspaceID?: string | undefined;
};

export type GetWorkspaceEventsByTargetRequest = {
    /**
     * Unique identifier of the workspace.
     */
    workspaceID?: string | undefined;
    /**
     * Filter to only return events corresponding to a particular gen_lock_id (gen_lock_id uniquely identifies a target)
     */
    targetID: string;
    /**
     * Filter to only return events created after this timestamp
     */
    afterCreatedAt?: Date | undefined;
};

export type GetWorkspaceEventsByTargetResponse = shared.ErrorT | Array<shared.CliEvent>;

/** @internal */
export const GetWorkspaceEventsByTargetGlobals$inboundSchema: z.ZodType<
    GetWorkspaceEventsByTargetGlobals,
    z.ZodTypeDef,
    unknown
> = z.object({
    workspaceID: z.string().optional(),
});

/** @internal */
export type GetWorkspaceEventsByTargetGlobals$Outbound = {
    workspaceID?: string | undefined;
};

/** @internal */
export const GetWorkspaceEventsByTargetGlobals$outboundSchema: z.ZodType<
    GetWorkspaceEventsByTargetGlobals$Outbound,
    z.ZodTypeDef,
    GetWorkspaceEventsByTargetGlobals
> = z.object({
    workspaceID: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceEventsByTargetGlobals$ {
    /** @deprecated use `GetWorkspaceEventsByTargetGlobals$inboundSchema` instead. */
    export const inboundSchema = GetWorkspaceEventsByTargetGlobals$inboundSchema;
    /** @deprecated use `GetWorkspaceEventsByTargetGlobals$outboundSchema` instead. */
    export const outboundSchema = GetWorkspaceEventsByTargetGlobals$outboundSchema;
    /** @deprecated use `GetWorkspaceEventsByTargetGlobals$Outbound` instead. */
    export type Outbound = GetWorkspaceEventsByTargetGlobals$Outbound;
}

/** @internal */
export const GetWorkspaceEventsByTargetRequest$inboundSchema: z.ZodType<
    GetWorkspaceEventsByTargetRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        workspaceID: z.string().optional(),
        targetID: z.string(),
        after_created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            after_created_at: "afterCreatedAt",
        });
    });

/** @internal */
export type GetWorkspaceEventsByTargetRequest$Outbound = {
    workspaceID?: string | undefined;
    targetID: string;
    after_created_at?: string | undefined;
};

/** @internal */
export const GetWorkspaceEventsByTargetRequest$outboundSchema: z.ZodType<
    GetWorkspaceEventsByTargetRequest$Outbound,
    z.ZodTypeDef,
    GetWorkspaceEventsByTargetRequest
> = z
    .object({
        workspaceID: z.string().optional(),
        targetID: z.string(),
        afterCreatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            afterCreatedAt: "after_created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceEventsByTargetRequest$ {
    /** @deprecated use `GetWorkspaceEventsByTargetRequest$inboundSchema` instead. */
    export const inboundSchema = GetWorkspaceEventsByTargetRequest$inboundSchema;
    /** @deprecated use `GetWorkspaceEventsByTargetRequest$outboundSchema` instead. */
    export const outboundSchema = GetWorkspaceEventsByTargetRequest$outboundSchema;
    /** @deprecated use `GetWorkspaceEventsByTargetRequest$Outbound` instead. */
    export type Outbound = GetWorkspaceEventsByTargetRequest$Outbound;
}

/** @internal */
export const GetWorkspaceEventsByTargetResponse$inboundSchema: z.ZodType<
    GetWorkspaceEventsByTargetResponse,
    z.ZodTypeDef,
    unknown
> = z.union([shared.ErrorT$inboundSchema, z.array(shared.CliEvent$inboundSchema)]);

/** @internal */
export type GetWorkspaceEventsByTargetResponse$Outbound =
    | shared.ErrorT$Outbound
    | Array<shared.CliEvent$Outbound>;

/** @internal */
export const GetWorkspaceEventsByTargetResponse$outboundSchema: z.ZodType<
    GetWorkspaceEventsByTargetResponse$Outbound,
    z.ZodTypeDef,
    GetWorkspaceEventsByTargetResponse
> = z.union([shared.ErrorT$outboundSchema, z.array(shared.CliEvent$outboundSchema)]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceEventsByTargetResponse$ {
    /** @deprecated use `GetWorkspaceEventsByTargetResponse$inboundSchema` instead. */
    export const inboundSchema = GetWorkspaceEventsByTargetResponse$inboundSchema;
    /** @deprecated use `GetWorkspaceEventsByTargetResponse$outboundSchema` instead. */
    export const outboundSchema = GetWorkspaceEventsByTargetResponse$outboundSchema;
    /** @deprecated use `GetWorkspaceEventsByTargetResponse$Outbound` instead. */
    export type Outbound = GetWorkspaceEventsByTargetResponse$Outbound;
}
