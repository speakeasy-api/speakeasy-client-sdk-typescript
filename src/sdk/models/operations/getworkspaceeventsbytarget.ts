/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetWorkspaceEventsByTargetGlobals = {
  workspaceId?: string | undefined;
};

export type GetWorkspaceEventsByTargetRequest = {
  /**
   * Unique identifier of the workspace.
   */
  workspaceId?: string | undefined;
  /**
   * Filter to only return events corresponding to a particular gen_lock_id (gen_lock_id uniquely identifies a target)
   */
  targetId: string;
  /**
   * Filter to only return events created after this timestamp
   */
  afterCreatedAt?: Date | undefined;
};

export type GetWorkspaceEventsByTargetResponse =
  | shared.ErrorT
  | Array<shared.CliEvent>;

/** @internal */
export const GetWorkspaceEventsByTargetGlobals$inboundSchema: z.ZodType<
  GetWorkspaceEventsByTargetGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
  });
});

/** @internal */
export type GetWorkspaceEventsByTargetGlobals$Outbound = {
  workspace_id?: string | undefined;
};

/** @internal */
export const GetWorkspaceEventsByTargetGlobals$outboundSchema: z.ZodType<
  GetWorkspaceEventsByTargetGlobals$Outbound,
  z.ZodTypeDef,
  GetWorkspaceEventsByTargetGlobals
> = z.object({
  workspaceId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceEventsByTargetGlobals$ {
  /** @deprecated use `GetWorkspaceEventsByTargetGlobals$inboundSchema` instead. */
  export const inboundSchema = GetWorkspaceEventsByTargetGlobals$inboundSchema;
  /** @deprecated use `GetWorkspaceEventsByTargetGlobals$outboundSchema` instead. */
  export const outboundSchema =
    GetWorkspaceEventsByTargetGlobals$outboundSchema;
  /** @deprecated use `GetWorkspaceEventsByTargetGlobals$Outbound` instead. */
  export type Outbound = GetWorkspaceEventsByTargetGlobals$Outbound;
}

export function getWorkspaceEventsByTargetGlobalsToJSON(
  getWorkspaceEventsByTargetGlobals: GetWorkspaceEventsByTargetGlobals,
): string {
  return JSON.stringify(
    GetWorkspaceEventsByTargetGlobals$outboundSchema.parse(
      getWorkspaceEventsByTargetGlobals,
    ),
  );
}

export function getWorkspaceEventsByTargetGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkspaceEventsByTargetGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkspaceEventsByTargetGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkspaceEventsByTargetGlobals' from JSON`,
  );
}

/** @internal */
export const GetWorkspaceEventsByTargetRequest$inboundSchema: z.ZodType<
  GetWorkspaceEventsByTargetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.string().optional(),
  target_id: z.string(),
  after_created_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
    "target_id": "targetId",
    "after_created_at": "afterCreatedAt",
  });
});

/** @internal */
export type GetWorkspaceEventsByTargetRequest$Outbound = {
  workspace_id?: string | undefined;
  target_id: string;
  after_created_at?: string | undefined;
};

/** @internal */
export const GetWorkspaceEventsByTargetRequest$outboundSchema: z.ZodType<
  GetWorkspaceEventsByTargetRequest$Outbound,
  z.ZodTypeDef,
  GetWorkspaceEventsByTargetRequest
> = z.object({
  workspaceId: z.string().optional(),
  targetId: z.string(),
  afterCreatedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
    targetId: "target_id",
    afterCreatedAt: "after_created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceEventsByTargetRequest$ {
  /** @deprecated use `GetWorkspaceEventsByTargetRequest$inboundSchema` instead. */
  export const inboundSchema = GetWorkspaceEventsByTargetRequest$inboundSchema;
  /** @deprecated use `GetWorkspaceEventsByTargetRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetWorkspaceEventsByTargetRequest$outboundSchema;
  /** @deprecated use `GetWorkspaceEventsByTargetRequest$Outbound` instead. */
  export type Outbound = GetWorkspaceEventsByTargetRequest$Outbound;
}

export function getWorkspaceEventsByTargetRequestToJSON(
  getWorkspaceEventsByTargetRequest: GetWorkspaceEventsByTargetRequest,
): string {
  return JSON.stringify(
    GetWorkspaceEventsByTargetRequest$outboundSchema.parse(
      getWorkspaceEventsByTargetRequest,
    ),
  );
}

export function getWorkspaceEventsByTargetRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkspaceEventsByTargetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkspaceEventsByTargetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkspaceEventsByTargetRequest' from JSON`,
  );
}

/** @internal */
export const GetWorkspaceEventsByTargetResponse$inboundSchema: z.ZodType<
  GetWorkspaceEventsByTargetResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  shared.ErrorT$inboundSchema,
  z.array(shared.CliEvent$inboundSchema),
]);

/** @internal */
export type GetWorkspaceEventsByTargetResponse$Outbound =
  | shared.ErrorT$Outbound
  | Array<shared.CliEvent$Outbound>;

/** @internal */
export const GetWorkspaceEventsByTargetResponse$outboundSchema: z.ZodType<
  GetWorkspaceEventsByTargetResponse$Outbound,
  z.ZodTypeDef,
  GetWorkspaceEventsByTargetResponse
> = z.union([
  shared.ErrorT$outboundSchema,
  z.array(shared.CliEvent$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceEventsByTargetResponse$ {
  /** @deprecated use `GetWorkspaceEventsByTargetResponse$inboundSchema` instead. */
  export const inboundSchema = GetWorkspaceEventsByTargetResponse$inboundSchema;
  /** @deprecated use `GetWorkspaceEventsByTargetResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetWorkspaceEventsByTargetResponse$outboundSchema;
  /** @deprecated use `GetWorkspaceEventsByTargetResponse$Outbound` instead. */
  export type Outbound = GetWorkspaceEventsByTargetResponse$Outbound;
}

export function getWorkspaceEventsByTargetResponseToJSON(
  getWorkspaceEventsByTargetResponse: GetWorkspaceEventsByTargetResponse,
): string {
  return JSON.stringify(
    GetWorkspaceEventsByTargetResponse$outboundSchema.parse(
      getWorkspaceEventsByTargetResponse,
    ),
  );
}

export function getWorkspaceEventsByTargetResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkspaceEventsByTargetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetWorkspaceEventsByTargetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkspaceEventsByTargetResponse' from JSON`,
  );
}
