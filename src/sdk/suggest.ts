/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { isBlobLike } from "./types/blobs.js";

export enum ApplyOperationIDsAcceptEnum {
    applicationJson = "application/json",
    applicationXYaml = "application/x-yaml",
}

export class Suggest extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Apply operation ID suggestions and download result.
     */
    async applyOperationIDs(
        request: operations.ApplyOperationIDsRequest,
        options?: RequestOptions & { acceptHeaderOverride?: ApplyOperationIDsAcceptEnum }
    ): Promise<operations.ApplyOperationIDsResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ApplyOperationIDsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const path$ = this.templateURLComponent("/v1/suggest/operation_ids/apply")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: options?.acceptHeaderOverride || "application/json;q=1, application/x-yaml;q=0",
            "x-session-id": encodeSimple$("x-session-id", payload$["x-session-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "applyOperationIDs",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.ApplyOperationIDsResponse>()
            .stream(200, operations.ApplyOperationIDsResponse$inboundSchema, {
                ctype: "application/json",
            })
            .stream(200, operations.ApplyOperationIDsResponse$inboundSchema, {
                ctype: "application/x-yaml",
            })
            .json("default", operations.ApplyOperationIDsResponse$inboundSchema)
            .match(response);

        return result$;
    }

    /**
     * Generate operation ID suggestions.
     *
     * @remarks
     * Get suggestions from an LLM model for improving the operationIDs in the provided schema.
     */
    async suggestOperationIDs(
        request: operations.SuggestOperationIDsRequest,
        options?: RequestOptions
    ): Promise<shared.SuggestedOperationIDs> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.SuggestOperationIDsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = new FormData();

        if (isBlobLike(payload$.RequestBody.schema)) {
            body$.append("schema", payload$.RequestBody.schema);
        } else {
            body$.append(
                "schema",
                new Blob([payload$.RequestBody.schema.content], {
                    type: "application/octet-stream",
                }),
                payload$.RequestBody.schema.fileName
            );
        }
        if (payload$.RequestBody.opts !== undefined) {
            body$.append("opts", encodeJSON$("opts", payload$.RequestBody.opts, { explode: true }));
        }

        const path$ = this.templateURLComponent("/v1/suggest/operation_ids")();

        const query$ = encodeFormQuery$({
            limit: payload$.limit,
        });

        const headers$ = new Headers({
            Accept: "application/json",
            "x-session-id": encodeSimple$("x-session-id", payload$["x-session-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "suggestOperationIDs",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<shared.SuggestedOperationIDs>()
            .json(200, shared.SuggestedOperationIDs$inboundSchema)
            .match(response);

        return result$;
    }

    /**
     * Generate operation ID suggestions.
     *
     * @remarks
     * Get suggestions from an LLM model for improving the operationIDs in the provided schema.
     */
    async suggestOperationIDsRegistry(
        request: operations.SuggestOperationIDsRegistryRequest,
        options?: RequestOptions
    ): Promise<shared.SuggestedOperationIDs> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.SuggestOperationIDsRegistryRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.SuggestOperationIDsOpts, { explode: true });

        const pathParams$ = {
            namespace_name: encodeSimple$("namespace_name", payload$.namespace_name, {
                explode: false,
                charEncoding: "percent",
            }),
            revision_reference: encodeSimple$("revision_reference", payload$.revision_reference, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/v1/suggest/operation_ids/{namespace_name}/{revision_reference}"
        )(pathParams$);

        const query$ = encodeFormQuery$({
            limit: payload$.limit,
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "x-session-id": encodeSimple$("x-session-id", payload$["x-session-id"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "suggestOperationIDsRegistry",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<shared.SuggestedOperationIDs>()
            .json(200, shared.SuggestedOperationIDs$inboundSchema)
            .match(response);

        return result$;
    }
}
