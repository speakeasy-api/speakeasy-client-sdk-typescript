/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { encodeFormQuery as encodeFormQuery$ } from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { extractSecurity } from "../lib/security.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";

export class Auth extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Get or refresh an access token for the current workspace.
     */
    async getAccessToken(
        request: operations.GetAccessTokenRequest,
        options?: RequestOptions
    ): Promise<operations.GetAccessTokenResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetAccessTokenRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/v1/auth/access_token")();

        const query$ = encodeFormQuery$({
            workspace_id: payload$.workspace_id,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const context = { operationID: "getAccessToken", oAuth2Scopes: [], securitySource: null };

        const request$ = this.createRequest$(
            context,
            {
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.GetAccessTokenResponse>()
            .json(200, operations.GetAccessTokenResponse$inboundSchema)
            .json("default", operations.GetAccessTokenResponse$inboundSchema)
            .match(response);

        return result$;
    }

    /**
     * Get information about the current user.
     */
    async getUser(options?: RequestOptions): Promise<operations.GetUserResponse> {
        const path$ = this.templateURLComponent("/v1/user")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "getUser",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.GetUserResponse>()
            .json(200, operations.GetUserResponse$inboundSchema)
            .json("default", operations.GetUserResponse$inboundSchema)
            .match(response);

        return result$;
    }

    /**
     * Get access allowances for a particular workspace
     *
     * @remarks
     * Checks if generation is permitted for a particular run of the CLI
     */
    async getWorkspaceAccess(
        request: operations.GetWorkspaceAccessRequest,
        options?: RequestOptions
    ): Promise<shared.AccessDetails> {
        const input$ = typeof request === "undefined" ? {} : request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetWorkspaceAccessRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/v1/workspace/access")();

        const query$ = encodeFormQuery$({
            genLockId: payload$.genLockId,
            passive: payload$.passive,
            targetType: payload$.targetType,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "getWorkspaceAccess",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries ||
                this.options$.retryConfig || {
                    strategy: "backoff",
                    backoff: {
                        initialInterval: 100,
                        maxInterval: 2000,
                        exponent: 1.5,
                        maxElapsedTime: 60000,
                    },
                    retryConnectionErrors: true,
                },
            retryCodes: options?.retryCodes || ["408", "500", "502", "503"],
        });

        const [result$] = await this.matcher<shared.AccessDetails>()
            .json(200, shared.AccessDetails$inboundSchema)
            .match(response);

        return result$;
    }

    /**
     * Validate the current api key.
     */
    async validateApiKey(options?: RequestOptions): Promise<operations.ValidateApiKeyResponse> {
        const path$ = this.templateURLComponent("/v1/auth/validate")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ = await extractSecurity(this.options$.security);
        const context = {
            operationID: "validateApiKey",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: [],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.ValidateApiKeyResponse>()
            .json(200, operations.ValidateApiKeyResponse$inboundSchema)
            .json("default", operations.ValidateApiKeyResponse$inboundSchema)
            .match(response);

        return result$;
    }
}
